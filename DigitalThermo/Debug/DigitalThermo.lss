
DigitalThermo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000041d0  00004264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800160  00800160  000042c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000058a9  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b85  00000000  00000000  00009c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001734  00000000  00000000  0000a7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  0000bf34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b73  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006df0  00000000  00000000  0000cbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000139e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 ed       	ldi	r30, 0xD0	; 208
      7c:	f1 e4       	ldi	r31, 0x41	; 65
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 36       	cpi	r26, 0x60	; 96
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 37       	cpi	r26, 0x7E	; 126
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b4 1c 	call	0x3968	; 0x3968 <main>
      9e:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12uart_putcharcP6__file>:
		void log(const char *format, ...) {
			va_list args;
			va_start(args, format);
			printf(format, args);
			va_end(args);
		}
      a6:	cf 93       	push	r28
      a8:	c8 2f       	mov	r28, r24
      aa:	8a 30       	cpi	r24, 0x0A	; 10
      ac:	19 f4       	brne	.+6      	; 0xb4 <_Z12uart_putcharcP6__file+0xe>
      ae:	8d e0       	ldi	r24, 0x0D	; 13
      b0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12uart_putcharcP6__file>
      b4:	e0 ec       	ldi	r30, 0xC0	; 192
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	85 ff       	sbrs	r24, 5
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z12uart_putcharcP6__file+0x12>
      be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	cf 91       	pop	r28
      c8:	08 95       	ret

000000ca <_Z12uart_getcharP6__file>:
      ca:	e0 ec       	ldi	r30, 0xC0	; 192
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	88 23       	and	r24, r24
      d2:	ec f7       	brge	.-6      	; 0xce <_Z12uart_getcharP6__file+0x4>
      d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	08 95       	ret

000000dc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>:
      dc:	61 11       	cpse	r22, r1
      de:	20 c0       	rjmp	.+64     	; 0x120 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x44>
      e0:	88 30       	cpi	r24, 0x08	; 8
      e2:	78 f4       	brcc	.+30     	; 0x102 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x26>
      e4:	4a b1       	in	r20, 0x0a	; 10
      e6:	87 70       	andi	r24, 0x07	; 7
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	b9 01       	movw	r22, r18
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x18>
      f0:	66 0f       	add	r22, r22
      f2:	77 1f       	adc	r23, r23
      f4:	8a 95       	dec	r24
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x14>
      f8:	cb 01       	movw	r24, r22
      fa:	80 95       	com	r24
      fc:	84 23       	and	r24, r20
      fe:	8a b9       	out	0x0a, r24	; 10
     100:	08 95       	ret
     102:	44 b1       	in	r20, 0x04	; 4
     104:	87 70       	andi	r24, 0x07	; 7
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	b9 01       	movw	r22, r18
     10c:	02 c0       	rjmp	.+4      	; 0x112 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x36>
     10e:	66 0f       	add	r22, r22
     110:	77 1f       	adc	r23, r23
     112:	8a 95       	dec	r24
     114:	e2 f7       	brpl	.-8      	; 0x10e <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x32>
     116:	cb 01       	movw	r24, r22
     118:	80 95       	com	r24
     11a:	84 23       	and	r24, r20
     11c:	84 b9       	out	0x04, r24	; 4
     11e:	08 95       	ret
     120:	61 30       	cpi	r22, 0x01	; 1
     122:	e9 f4       	brne	.+58     	; 0x15e <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x82>
     124:	88 30       	cpi	r24, 0x08	; 8
     126:	70 f4       	brcc	.+28     	; 0x144 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x68>
     128:	4a b1       	in	r20, 0x0a	; 10
     12a:	87 70       	andi	r24, 0x07	; 7
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x5c>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x58>
     13c:	cb 01       	movw	r24, r22
     13e:	84 2b       	or	r24, r20
     140:	8a b9       	out	0x0a, r24	; 10
     142:	08 95       	ret
     144:	44 b1       	in	r20, 0x04	; 4
     146:	87 70       	andi	r24, 0x07	; 7
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	b9 01       	movw	r22, r18
     14e:	02 c0       	rjmp	.+4      	; 0x154 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x78>
     150:	66 0f       	add	r22, r22
     152:	77 1f       	adc	r23, r23
     154:	8a 95       	dec	r24
     156:	e2 f7       	brpl	.-8      	; 0x150 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x74>
     158:	cb 01       	movw	r24, r22
     15a:	84 2b       	or	r24, r20
     15c:	84 b9       	out	0x04, r24	; 4
     15e:	08 95       	ret

00000160 <_Z9uart_initv>:
     160:	e6 e6       	ldi	r30, 0x66	; 102
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	83 e5       	ldi	r24, 0x53	; 83
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	91 87       	std	Z+9, r25	; 0x09
     16a:	80 87       	std	Z+8, r24	; 0x08
     16c:	85 e6       	ldi	r24, 0x65	; 101
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	93 87       	std	Z+11, r25	; 0x0b
     172:	82 87       	std	Z+10, r24	; 0x0a
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	83 83       	std	Z+3, r24	; 0x03
     178:	15 86       	std	Z+13, r1	; 0x0d
     17a:	14 86       	std	Z+12, r1	; 0x0c
     17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     180:	87 e6       	ldi	r24, 0x67	; 103
     182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     186:	a0 ec       	ldi	r26, 0xC0	; 192
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	8c 91       	ld	r24, X
     18c:	8d 7f       	andi	r24, 0xFD	; 253
     18e:	8c 93       	st	X, r24
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     196:	88 e1       	ldi	r24, 0x18	; 24
     198:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     19c:	a8 e7       	ldi	r26, 0x78	; 120
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	13 96       	adiw	r26, 0x03	; 3
     1a2:	fc 93       	st	X, r31
     1a4:	ee 93       	st	-X, r30
     1a6:	12 97       	sbiw	r26, 0x02	; 2
     1a8:	ed 93       	st	X+, r30
     1aa:	fc 93       	st	X, r31
     1ac:	08 95       	ret

000001ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>:
				SendCommand(0x01);
				util::delay_ms_static(2);
				SendCommand(0x80);
			}
			
			private: void SendCommand(byte cmd) {
     1ae:	fc 01       	movw	r30, r24
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     1b0:	82 81       	ldd	r24, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     1b2:	64 ff       	sbrs	r22, 4
     1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x44>
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	70 f4       	brcc	.+28     	; 0x1d6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x28>
     1ba:	4b b1       	in	r20, 0x0b	; 11
     1bc:	87 70       	andi	r24, 0x07	; 7
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	d9 01       	movw	r26, r18
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1c>
     1c6:	aa 0f       	add	r26, r26
     1c8:	bb 1f       	adc	r27, r27
     1ca:	8a 95       	dec	r24
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x18>
     1ce:	cd 01       	movw	r24, r26
     1d0:	84 2b       	or	r24, r20
     1d2:	8b b9       	out	0x0b, r24	; 11
     1d4:	2d c0       	rjmp	.+90     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
     1d6:	45 b1       	in	r20, 0x05	; 5
     1d8:	87 70       	andi	r24, 0x07	; 7
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	d9 01       	movw	r26, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x38>
     1e2:	aa 0f       	add	r26, r26
     1e4:	bb 1f       	adc	r27, r27
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x34>
     1ea:	cd 01       	movw	r24, r26
     1ec:	84 2b       	or	r24, r20
     1ee:	85 b9       	out	0x05, r24	; 5
     1f0:	1f c0       	rjmp	.+62     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	78 f4       	brcc	.+30     	; 0x214 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x66>
     1f6:	4b b1       	in	r20, 0x0b	; 11
     1f8:	87 70       	andi	r24, 0x07	; 7
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	d9 01       	movw	r26, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x58>
     202:	aa 0f       	add	r26, r26
     204:	bb 1f       	adc	r27, r27
     206:	8a 95       	dec	r24
     208:	e2 f7       	brpl	.-8      	; 0x202 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x54>
     20a:	cd 01       	movw	r24, r26
     20c:	80 95       	com	r24
     20e:	84 23       	and	r24, r20
     210:	8b b9       	out	0x0b, r24	; 11
     212:	0e c0       	rjmp	.+28     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
     214:	45 b1       	in	r20, 0x05	; 5
     216:	87 70       	andi	r24, 0x07	; 7
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	d9 01       	movw	r26, r18
     21e:	02 c0       	rjmp	.+4      	; 0x224 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x76>
     220:	aa 0f       	add	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	8a 95       	dec	r24
     226:	e2 f7       	brpl	.-8      	; 0x220 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x72>
     228:	cd 01       	movw	r24, r26
     22a:	80 95       	com	r24
     22c:	84 23       	and	r24, r20
     22e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     230:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     232:	65 ff       	sbrs	r22, 5
     234:	1e c0       	rjmp	.+60     	; 0x272 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xc4>
     236:	88 30       	cpi	r24, 0x08	; 8
     238:	70 f4       	brcc	.+28     	; 0x256 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xa8>
     23a:	4b b1       	in	r20, 0x0b	; 11
     23c:	87 70       	andi	r24, 0x07	; 7
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	d9 01       	movw	r26, r18
     244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x9c>
     246:	aa 0f       	add	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	8a 95       	dec	r24
     24c:	e2 f7       	brpl	.-8      	; 0x246 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x98>
     24e:	cd 01       	movw	r24, r26
     250:	84 2b       	or	r24, r20
     252:	8b b9       	out	0x0b, r24	; 11
     254:	2d c0       	rjmp	.+90     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
     256:	45 b1       	in	r20, 0x05	; 5
     258:	87 70       	andi	r24, 0x07	; 7
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	d9 01       	movw	r26, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xb8>
     262:	aa 0f       	add	r26, r26
     264:	bb 1f       	adc	r27, r27
     266:	8a 95       	dec	r24
     268:	e2 f7       	brpl	.-8      	; 0x262 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xb4>
     26a:	cd 01       	movw	r24, r26
     26c:	84 2b       	or	r24, r20
     26e:	85 b9       	out	0x05, r24	; 5
     270:	1f c0       	rjmp	.+62     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     272:	88 30       	cpi	r24, 0x08	; 8
     274:	78 f4       	brcc	.+30     	; 0x294 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xe6>
     276:	4b b1       	in	r20, 0x0b	; 11
     278:	87 70       	andi	r24, 0x07	; 7
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	d9 01       	movw	r26, r18
     280:	02 c0       	rjmp	.+4      	; 0x286 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xd8>
     282:	aa 0f       	add	r26, r26
     284:	bb 1f       	adc	r27, r27
     286:	8a 95       	dec	r24
     288:	e2 f7       	brpl	.-8      	; 0x282 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xd4>
     28a:	cd 01       	movw	r24, r26
     28c:	80 95       	com	r24
     28e:	84 23       	and	r24, r20
     290:	8b b9       	out	0x0b, r24	; 11
     292:	0e c0       	rjmp	.+28     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
     294:	45 b1       	in	r20, 0x05	; 5
     296:	87 70       	andi	r24, 0x07	; 7
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	d9 01       	movw	r26, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xf6>
     2a0:	aa 0f       	add	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	8a 95       	dec	r24
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xf2>
     2a8:	cd 01       	movw	r24, r26
     2aa:	80 95       	com	r24
     2ac:	84 23       	and	r24, r20
     2ae:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     2b2:	66 ff       	sbrs	r22, 6
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x144>
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	70 f4       	brcc	.+28     	; 0x2d6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x128>
     2ba:	4b b1       	in	r20, 0x0b	; 11
     2bc:	87 70       	andi	r24, 0x07	; 7
     2be:	21 e0       	ldi	r18, 0x01	; 1
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	d9 01       	movw	r26, r18
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x11c>
     2c6:	aa 0f       	add	r26, r26
     2c8:	bb 1f       	adc	r27, r27
     2ca:	8a 95       	dec	r24
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x118>
     2ce:	cd 01       	movw	r24, r26
     2d0:	84 2b       	or	r24, r20
     2d2:	8b b9       	out	0x0b, r24	; 11
     2d4:	2d c0       	rjmp	.+90     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
     2d6:	45 b1       	in	r20, 0x05	; 5
     2d8:	87 70       	andi	r24, 0x07	; 7
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	d9 01       	movw	r26, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x138>
     2e2:	aa 0f       	add	r26, r26
     2e4:	bb 1f       	adc	r27, r27
     2e6:	8a 95       	dec	r24
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x134>
     2ea:	cd 01       	movw	r24, r26
     2ec:	84 2b       	or	r24, r20
     2ee:	85 b9       	out	0x05, r24	; 5
     2f0:	1f c0       	rjmp	.+62     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     2f2:	88 30       	cpi	r24, 0x08	; 8
     2f4:	78 f4       	brcc	.+30     	; 0x314 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x166>
     2f6:	4b b1       	in	r20, 0x0b	; 11
     2f8:	87 70       	andi	r24, 0x07	; 7
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	d9 01       	movw	r26, r18
     300:	02 c0       	rjmp	.+4      	; 0x306 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x158>
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	8a 95       	dec	r24
     308:	e2 f7       	brpl	.-8      	; 0x302 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x154>
     30a:	cd 01       	movw	r24, r26
     30c:	80 95       	com	r24
     30e:	84 23       	and	r24, r20
     310:	8b b9       	out	0x0b, r24	; 11
     312:	0e c0       	rjmp	.+28     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
     314:	45 b1       	in	r20, 0x05	; 5
     316:	87 70       	andi	r24, 0x07	; 7
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	d9 01       	movw	r26, r18
     31e:	02 c0       	rjmp	.+4      	; 0x324 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x176>
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	8a 95       	dec	r24
     326:	e2 f7       	brpl	.-8      	; 0x320 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x172>
     328:	cd 01       	movw	r24, r26
     32a:	80 95       	com	r24
     32c:	84 23       	and	r24, r20
     32e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     330:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     332:	66 23       	and	r22, r22
     334:	f4 f4       	brge	.+60     	; 0x372 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1c4>
     336:	88 30       	cpi	r24, 0x08	; 8
     338:	70 f4       	brcc	.+28     	; 0x356 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1a8>
     33a:	4b b1       	in	r20, 0x0b	; 11
     33c:	87 70       	andi	r24, 0x07	; 7
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	d9 01       	movw	r26, r18
     344:	02 c0       	rjmp	.+4      	; 0x34a <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x19c>
     346:	aa 0f       	add	r26, r26
     348:	bb 1f       	adc	r27, r27
     34a:	8a 95       	dec	r24
     34c:	e2 f7       	brpl	.-8      	; 0x346 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x198>
     34e:	cd 01       	movw	r24, r26
     350:	84 2b       	or	r24, r20
     352:	8b b9       	out	0x0b, r24	; 11
     354:	2d c0       	rjmp	.+90     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
     356:	45 b1       	in	r20, 0x05	; 5
     358:	87 70       	andi	r24, 0x07	; 7
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	d9 01       	movw	r26, r18
     360:	02 c0       	rjmp	.+4      	; 0x366 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1b8>
     362:	aa 0f       	add	r26, r26
     364:	bb 1f       	adc	r27, r27
     366:	8a 95       	dec	r24
     368:	e2 f7       	brpl	.-8      	; 0x362 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1b4>
     36a:	cd 01       	movw	r24, r26
     36c:	84 2b       	or	r24, r20
     36e:	85 b9       	out	0x05, r24	; 5
     370:	1f c0       	rjmp	.+62     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     372:	88 30       	cpi	r24, 0x08	; 8
     374:	78 f4       	brcc	.+30     	; 0x394 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1e6>
     376:	4b b1       	in	r20, 0x0b	; 11
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	d9 01       	movw	r26, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1d8>
     382:	aa 0f       	add	r26, r26
     384:	bb 1f       	adc	r27, r27
     386:	8a 95       	dec	r24
     388:	e2 f7       	brpl	.-8      	; 0x382 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1d4>
     38a:	cd 01       	movw	r24, r26
     38c:	80 95       	com	r24
     38e:	84 23       	and	r24, r20
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
     394:	45 b1       	in	r20, 0x05	; 5
     396:	87 70       	andi	r24, 0x07	; 7
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	d9 01       	movw	r26, r18
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1f6>
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	8a 95       	dec	r24
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1f2>
     3a8:	cd 01       	movw	r24, r26
     3aa:	80 95       	com	r24
     3ac:	84 23       	and	r24, r20
     3ae:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     3b0:	80 81       	ld	r24, Z
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	78 f4       	brcc	.+30     	; 0x3d4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x226>
     3b6:	4b b1       	in	r20, 0x0b	; 11
     3b8:	87 70       	andi	r24, 0x07	; 7
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	d9 01       	movw	r26, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x218>
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	8a 95       	dec	r24
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x214>
     3ca:	cd 01       	movw	r24, r26
     3cc:	80 95       	com	r24
     3ce:	84 23       	and	r24, r20
     3d0:	8b b9       	out	0x0b, r24	; 11
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x242>
     3d4:	45 b1       	in	r20, 0x05	; 5
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	d9 01       	movw	r26, r18
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x236>
     3e0:	aa 0f       	add	r26, r26
     3e2:	bb 1f       	adc	r27, r27
     3e4:	8a 95       	dec	r24
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x232>
     3e8:	cd 01       	movw	r24, r26
     3ea:	80 95       	com	r24
     3ec:	84 23       	and	r24, r20
     3ee:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     3f0:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	70 f4       	brcc	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f6:	4b b1       	in	r20, 0x0b	; 11
     3f8:	87 70       	andi	r24, 0x07	; 7
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	d9 01       	movw	r26, r18
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	aa 0f       	add	r26, r26
     404:	bb 1f       	adc	r27, r27
     406:	8a 95       	dec	r24
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	cd 01       	movw	r24, r26
     40c:	84 2b       	or	r24, r20
     40e:	8b b9       	out	0x0b, r24	; 11
     410:	0d c0       	rjmp	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     412:	45 b1       	in	r20, 0x05	; 5
     414:	87 70       	andi	r24, 0x07	; 7
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	d9 01       	movw	r26, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	aa 0f       	add	r26, r26
     420:	bb 1f       	adc	r27, r27
     422:	8a 95       	dec	r24
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	cd 01       	movw	r24, r26
     428:	84 2b       	or	r24, r20
     42a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	b5 e0       	ldi	r27, 0x05	; 5
     42e:	ba 95       	dec	r27
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	00 00       	nop
     434:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
     436:	88 30       	cpi	r24, 0x08	; 8
     438:	78 f4       	brcc	.+30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     43a:	4b b1       	in	r20, 0x0b	; 11
     43c:	87 70       	andi	r24, 0x07	; 7
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	d9 01       	movw	r26, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	aa 0f       	add	r26, r26
     448:	bb 1f       	adc	r27, r27
     44a:	8a 95       	dec	r24
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	cd 01       	movw	r24, r26
     450:	80 95       	com	r24
     452:	84 23       	and	r24, r20
     454:	8b b9       	out	0x0b, r24	; 11
     456:	0e c0       	rjmp	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     458:	45 b1       	in	r20, 0x05	; 5
     45a:	87 70       	andi	r24, 0x07	; 7
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	d9 01       	movw	r26, r18
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     464:	aa 0f       	add	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	8a 95       	dec	r24
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     46c:	cd 01       	movw	r24, r26
     46e:	80 95       	com	r24
     470:	84 23       	and	r24, r20
     472:	85 b9       	out	0x05, r24	; 5
     474:	8f e1       	ldi	r24, 0x1F	; 31
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47e:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     480:	82 81       	ldd	r24, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     482:	60 ff       	sbrs	r22, 0
     484:	1e c0       	rjmp	.+60     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     486:	88 30       	cpi	r24, 0x08	; 8
     488:	70 f4       	brcc	.+28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     48a:	4b b1       	in	r20, 0x0b	; 11
     48c:	87 70       	andi	r24, 0x07	; 7
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	d9 01       	movw	r26, r18
     494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     496:	aa 0f       	add	r26, r26
     498:	bb 1f       	adc	r27, r27
     49a:	8a 95       	dec	r24
     49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49e:	cd 01       	movw	r24, r26
     4a0:	84 2b       	or	r24, r20
     4a2:	8b b9       	out	0x0b, r24	; 11
     4a4:	2d c0       	rjmp	.+90     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4a6:	45 b1       	in	r20, 0x05	; 5
     4a8:	87 70       	andi	r24, 0x07	; 7
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	d9 01       	movw	r26, r18
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	aa 0f       	add	r26, r26
     4b4:	bb 1f       	adc	r27, r27
     4b6:	8a 95       	dec	r24
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	cd 01       	movw	r24, r26
     4bc:	84 2b       	or	r24, r20
     4be:	85 b9       	out	0x05, r24	; 5
     4c0:	1f c0       	rjmp	.+62     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     4c2:	88 30       	cpi	r24, 0x08	; 8
     4c4:	78 f4       	brcc	.+30     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4c6:	4b b1       	in	r20, 0x0b	; 11
     4c8:	87 70       	andi	r24, 0x07	; 7
     4ca:	21 e0       	ldi	r18, 0x01	; 1
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	d9 01       	movw	r26, r18
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d2:	aa 0f       	add	r26, r26
     4d4:	bb 1f       	adc	r27, r27
     4d6:	8a 95       	dec	r24
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4da:	cd 01       	movw	r24, r26
     4dc:	80 95       	com	r24
     4de:	84 23       	and	r24, r20
     4e0:	8b b9       	out	0x0b, r24	; 11
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4e4:	45 b1       	in	r20, 0x05	; 5
     4e6:	87 70       	andi	r24, 0x07	; 7
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	d9 01       	movw	r26, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f0:	aa 0f       	add	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	8a 95       	dec	r24
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	cd 01       	movw	r24, r26
     4fa:	80 95       	com	r24
     4fc:	84 23       	and	r24, r20
     4fe:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     500:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     502:	61 ff       	sbrs	r22, 1
     504:	1e c0       	rjmp	.+60     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     506:	88 30       	cpi	r24, 0x08	; 8
     508:	70 f4       	brcc	.+28     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     50a:	4b b1       	in	r20, 0x0b	; 11
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	d9 01       	movw	r26, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	8a 95       	dec	r24
     51c:	e2 f7       	brpl	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     51e:	cd 01       	movw	r24, r26
     520:	84 2b       	or	r24, r20
     522:	8b b9       	out	0x0b, r24	; 11
     524:	2d c0       	rjmp	.+90     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     526:	45 b1       	in	r20, 0x05	; 5
     528:	87 70       	andi	r24, 0x07	; 7
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	d9 01       	movw	r26, r18
     530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     532:	aa 0f       	add	r26, r26
     534:	bb 1f       	adc	r27, r27
     536:	8a 95       	dec	r24
     538:	e2 f7       	brpl	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     53a:	cd 01       	movw	r24, r26
     53c:	84 2b       	or	r24, r20
     53e:	85 b9       	out	0x05, r24	; 5
     540:	1f c0       	rjmp	.+62     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     542:	88 30       	cpi	r24, 0x08	; 8
     544:	78 f4       	brcc	.+30     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     546:	4b b1       	in	r20, 0x0b	; 11
     548:	87 70       	andi	r24, 0x07	; 7
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	d9 01       	movw	r26, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	aa 0f       	add	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	8a 95       	dec	r24
     558:	e2 f7       	brpl	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55a:	cd 01       	movw	r24, r26
     55c:	80 95       	com	r24
     55e:	84 23       	and	r24, r20
     560:	8b b9       	out	0x0b, r24	; 11
     562:	0e c0       	rjmp	.+28     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     564:	45 b1       	in	r20, 0x05	; 5
     566:	87 70       	andi	r24, 0x07	; 7
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	d9 01       	movw	r26, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     570:	aa 0f       	add	r26, r26
     572:	bb 1f       	adc	r27, r27
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     578:	cd 01       	movw	r24, r26
     57a:	80 95       	com	r24
     57c:	84 23       	and	r24, r20
     57e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     580:	84 81       	ldd	r24, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     582:	62 ff       	sbrs	r22, 2
     584:	1e c0       	rjmp	.+60     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	70 f4       	brcc	.+28     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     58a:	4b b1       	in	r20, 0x0b	; 11
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	d9 01       	movw	r26, r18
     594:	02 c0       	rjmp	.+4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     596:	aa 0f       	add	r26, r26
     598:	bb 1f       	adc	r27, r27
     59a:	8a 95       	dec	r24
     59c:	e2 f7       	brpl	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59e:	cd 01       	movw	r24, r26
     5a0:	84 2b       	or	r24, r20
     5a2:	8b b9       	out	0x0b, r24	; 11
     5a4:	2d c0       	rjmp	.+90     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5a6:	45 b1       	in	r20, 0x05	; 5
     5a8:	87 70       	andi	r24, 0x07	; 7
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	d9 01       	movw	r26, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b2:	aa 0f       	add	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	8a 95       	dec	r24
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5ba:	cd 01       	movw	r24, r26
     5bc:	84 2b       	or	r24, r20
     5be:	85 b9       	out	0x05, r24	; 5
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     5c2:	88 30       	cpi	r24, 0x08	; 8
     5c4:	78 f4       	brcc	.+30     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5c6:	4b b1       	in	r20, 0x0b	; 11
     5c8:	87 70       	andi	r24, 0x07	; 7
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	d9 01       	movw	r26, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d2:	aa 0f       	add	r26, r26
     5d4:	bb 1f       	adc	r27, r27
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5da:	cd 01       	movw	r24, r26
     5dc:	80 95       	com	r24
     5de:	84 23       	and	r24, r20
     5e0:	8b b9       	out	0x0b, r24	; 11
     5e2:	0e c0       	rjmp	.+28     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5e4:	45 b1       	in	r20, 0x05	; 5
     5e6:	87 70       	andi	r24, 0x07	; 7
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	d9 01       	movw	r26, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5f0:	aa 0f       	add	r26, r26
     5f2:	bb 1f       	adc	r27, r27
     5f4:	8a 95       	dec	r24
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5f8:	cd 01       	movw	r24, r26
     5fa:	80 95       	com	r24
     5fc:	84 23       	and	r24, r20
     5fe:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     600:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     602:	63 ff       	sbrs	r22, 3
     604:	1e c0       	rjmp	.+60     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     606:	88 30       	cpi	r24, 0x08	; 8
     608:	70 f4       	brcc	.+28     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     60a:	4b b1       	in	r20, 0x0b	; 11
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	b9 01       	movw	r22, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     616:	66 0f       	add	r22, r22
     618:	77 1f       	adc	r23, r23
     61a:	8a 95       	dec	r24
     61c:	e2 f7       	brpl	.-8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     61e:	cb 01       	movw	r24, r22
     620:	84 2b       	or	r24, r20
     622:	8b b9       	out	0x0b, r24	; 11
     624:	2d c0       	rjmp	.+90     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     626:	45 b1       	in	r20, 0x05	; 5
     628:	87 70       	andi	r24, 0x07	; 7
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	d9 01       	movw	r26, r18
     630:	02 c0       	rjmp	.+4      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     632:	aa 0f       	add	r26, r26
     634:	bb 1f       	adc	r27, r27
     636:	8a 95       	dec	r24
     638:	e2 f7       	brpl	.-8      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     63a:	cd 01       	movw	r24, r26
     63c:	84 2b       	or	r24, r20
     63e:	85 b9       	out	0x05, r24	; 5
     640:	1f c0       	rjmp	.+62     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     642:	88 30       	cpi	r24, 0x08	; 8
     644:	78 f4       	brcc	.+30     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     646:	4b b1       	in	r20, 0x0b	; 11
     648:	87 70       	andi	r24, 0x07	; 7
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	b9 01       	movw	r22, r18
     650:	02 c0       	rjmp	.+4      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     652:	66 0f       	add	r22, r22
     654:	77 1f       	adc	r23, r23
     656:	8a 95       	dec	r24
     658:	e2 f7       	brpl	.-8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     65a:	cb 01       	movw	r24, r22
     65c:	80 95       	com	r24
     65e:	84 23       	and	r24, r20
     660:	8b b9       	out	0x0b, r24	; 11
     662:	0e c0       	rjmp	.+28     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     664:	45 b1       	in	r20, 0x05	; 5
     666:	87 70       	andi	r24, 0x07	; 7
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	d9 01       	movw	r26, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     670:	aa 0f       	add	r26, r26
     672:	bb 1f       	adc	r27, r27
     674:	8a 95       	dec	r24
     676:	e2 f7       	brpl	.-8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     678:	cd 01       	movw	r24, r26
     67a:	80 95       	com	r24
     67c:	84 23       	and	r24, r20
     67e:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     680:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	70 f4       	brcc	.+28     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     686:	4b b1       	in	r20, 0x0b	; 11
     688:	87 70       	andi	r24, 0x07	; 7
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	b9 01       	movw	r22, r18
     690:	02 c0       	rjmp	.+4      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     692:	66 0f       	add	r22, r22
     694:	77 1f       	adc	r23, r23
     696:	8a 95       	dec	r24
     698:	e2 f7       	brpl	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     69a:	cb 01       	movw	r24, r22
     69c:	84 2b       	or	r24, r20
     69e:	8b b9       	out	0x0b, r24	; 11
     6a0:	0d c0       	rjmp	.+26     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6a2:	45 b1       	in	r20, 0x05	; 5
     6a4:	87 70       	andi	r24, 0x07	; 7
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	d9 01       	movw	r26, r18
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     6ae:	aa 0f       	add	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	8a 95       	dec	r24
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     6b6:	cd 01       	movw	r24, r26
     6b8:	84 2b       	or	r24, r20
     6ba:	85 b9       	out	0x05, r24	; 5
     6bc:	b5 e0       	ldi	r27, 0x05	; 5
     6be:	ba 95       	dec	r27
     6c0:	f1 f7       	brne	.-4      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6c2:	00 00       	nop
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	78 f4       	brcc	.+30     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     6ca:	4b b1       	in	r20, 0x0b	; 11
     6cc:	87 70       	andi	r24, 0x07	; 7
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
     6de:	cb 01       	movw	r24, r22
     6e0:	80 95       	com	r24
     6e2:	84 23       	and	r24, r20
     6e4:	8b b9       	out	0x0b, r24	; 11
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     6e8:	45 b1       	in	r20, 0x05	; 5
     6ea:	87 70       	andi	r24, 0x07	; 7
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	d9 01       	movw	r26, r18
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f4:	aa 0f       	add	r26, r26
     6f6:	bb 1f       	adc	r27, r27
     6f8:	8a 95       	dec	r24
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6fc:	cd 01       	movw	r24, r26
     6fe:	80 95       	com	r24
     700:	84 23       	and	r24, r20
     702:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     704:	8f e3       	ldi	r24, 0x3F	; 63
     706:	9f e1       	ldi	r25, 0x1F	; 31
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     70e:	00 00       	nop
     710:	08 95       	ret

00000712 <_Z5setupv>:
using namespace zeduino;

component::DisplayLCD *lcd;
component::DHT11 *dht11;

void setup() {
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	00 d0       	rcall	.+0      	; 0x728 <_Z5setupv+0x16>
     728:	00 d0       	rcall	.+0      	; 0x72a <_Z5setupv+0x18>
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
	EPort ports[] = {P5, P4, P3, P2};
     72e:	85 e0       	ldi	r24, 0x05	; 5
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	8b 83       	std	Y+3, r24	; 0x03
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	8c 83       	std	Y+4, r24	; 0x04
typedef int16_t int16;
typedef uint8_t uint8;
typedef uint16_t uint16;

void * operator new(size_t size) {
	return malloc(size);	
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 c5 1c 	call	0x398a	; 0x398a <malloc>
     746:	8c 01       	movw	r16, r24
			
			public: enum EOperationMode {COMMAND = 0, DATA = 1};
			
			private: EPort _pMode, _pPulse, _ports[4];
			
			public: DisplayLCD(EPort mode, EPort pulse, EPort ports[]) : _pMode(mode), _pPulse(pulse) {
     748:	8c e0       	ldi	r24, 0x0C	; 12
     74a:	d8 01       	movw	r26, r16
     74c:	8c 93       	st	X, r24
     74e:	8b e0       	ldi	r24, 0x0B	; 11
     750:	11 96       	adiw	r26, 0x01	; 1
     752:	8c 93       	st	X, r24
     754:	fe 01       	movw	r30, r28
     756:	31 96       	adiw	r30, 0x01	; 1
     758:	7f 01       	movw	r14, r30
     75a:	68 01       	movw	r12, r16
     75c:	f2 e0       	ldi	r31, 0x02	; 2
     75e:	cf 0e       	add	r12, r31
     760:	d1 1c       	adc	r13, r1
     762:	5e 01       	movw	r10, r28
     764:	25 e0       	ldi	r18, 0x05	; 5
     766:	a2 0e       	add	r10, r18
     768:	b1 1c       	adc	r11, r1
				for (int i = 0 ; i < 4; i++) {
					_ports[i] = ports[i];
     76a:	d7 01       	movw	r26, r14
     76c:	8d 91       	ld	r24, X+
     76e:	7d 01       	movw	r14, r26
     770:	f6 01       	movw	r30, r12
     772:	81 93       	st	Z+, r24
     774:	6f 01       	movw	r12, r30
					port::mode(_ports[i], OUTPUT);
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
			public: enum EOperationMode {COMMAND = 0, DATA = 1};
			
			private: EPort _pMode, _pPulse, _ports[4];
			
			public: DisplayLCD(EPort mode, EPort pulse, EPort ports[]) : _pMode(mode), _pPulse(pulse) {
				for (int i = 0 ; i < 4; i++) {
     77c:	ae 14       	cp	r10, r14
     77e:	bf 04       	cpc	r11, r15
     780:	a1 f7       	brne	.-24     	; 0x76a <_Z5setupv+0x58>
					_ports[i] = ports[i];
					port::mode(_ports[i], OUTPUT);
				}
				port::mode(_pMode, OUTPUT);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	d8 01       	movw	r26, r16
     786:	8c 91       	ld	r24, X
     788:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				port::mode(_pPulse, OUTPUT);
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	f8 01       	movw	r30, r16
     790:	81 81       	ldd	r24, Z+1	; 0x01
     792:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
     796:	ff ef       	ldi	r31, 0xFF	; 255
     798:	29 ef       	ldi	r18, 0xF9	; 249
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f1 50       	subi	r31, 0x01	; 1
     79e:	20 40       	sbci	r18, 0x00	; 0
     7a0:	30 40       	sbci	r19, 0x00	; 0
     7a2:	e1 f7       	brne	.-8      	; 0x79c <_Z5setupv+0x8a>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <_Z5setupv+0x94>
     7a6:	00 00       	nop
				
				util::delay_ms_static(20);
				SendCommand(0x33);
     7a8:	63 e3       	ldi	r22, 0x33	; 51
     7aa:	c8 01       	movw	r24, r16
     7ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     7b0:	d8 01       	movw	r26, r16
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     7b6:	88 30       	cpi	r24, 0x08	; 8
     7b8:	70 f4       	brcc	.+28     	; 0x7d6 <_Z5setupv+0xc4>
     7ba:	4b b1       	in	r20, 0x0b	; 11
     7bc:	87 70       	andi	r24, 0x07	; 7
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <_Z5setupv+0xb8>
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	8a 95       	dec	r24
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <_Z5setupv+0xb4>
     7ce:	cf 01       	movw	r24, r30
     7d0:	84 2b       	or	r24, r20
     7d2:	8b b9       	out	0x0b, r24	; 11
     7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <_Z5setupv+0xde>
     7d6:	45 b1       	in	r20, 0x05	; 5
     7d8:	87 70       	andi	r24, 0x07	; 7
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	b9 01       	movw	r22, r18
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <_Z5setupv+0xd4>
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	8a 95       	dec	r24
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <_Z5setupv+0xd0>
     7ea:	cb 01       	movw	r24, r22
     7ec:	84 2b       	or	r24, r20
     7ee:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     7f0:	d8 01       	movw	r26, r16
     7f2:	13 96       	adiw	r26, 0x03	; 3
     7f4:	8c 91       	ld	r24, X
     7f6:	88 30       	cpi	r24, 0x08	; 8
     7f8:	70 f4       	brcc	.+28     	; 0x816 <_Z5setupv+0x104>
     7fa:	4b b1       	in	r20, 0x0b	; 11
     7fc:	87 70       	andi	r24, 0x07	; 7
     7fe:	21 e0       	ldi	r18, 0x01	; 1
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	f9 01       	movw	r30, r18
     804:	02 c0       	rjmp	.+4      	; 0x80a <_Z5setupv+0xf8>
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	8a 95       	dec	r24
     80c:	e2 f7       	brpl	.-8      	; 0x806 <_Z5setupv+0xf4>
     80e:	cf 01       	movw	r24, r30
     810:	84 2b       	or	r24, r20
     812:	8b b9       	out	0x0b, r24	; 11
     814:	0d c0       	rjmp	.+26     	; 0x830 <_Z5setupv+0x11e>
     816:	45 b1       	in	r20, 0x05	; 5
     818:	87 70       	andi	r24, 0x07	; 7
     81a:	21 e0       	ldi	r18, 0x01	; 1
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	b9 01       	movw	r22, r18
     820:	02 c0       	rjmp	.+4      	; 0x826 <_Z5setupv+0x114>
     822:	66 0f       	add	r22, r22
     824:	77 1f       	adc	r23, r23
     826:	8a 95       	dec	r24
     828:	e2 f7       	brpl	.-8      	; 0x822 <_Z5setupv+0x110>
     82a:	cb 01       	movw	r24, r22
     82c:	84 2b       	or	r24, r20
     82e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     830:	d8 01       	movw	r26, r16
     832:	14 96       	adiw	r26, 0x04	; 4
     834:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     836:	88 30       	cpi	r24, 0x08	; 8
     838:	78 f4       	brcc	.+30     	; 0x858 <_Z5setupv+0x146>
     83a:	4b b1       	in	r20, 0x0b	; 11
     83c:	87 70       	andi	r24, 0x07	; 7
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	02 c0       	rjmp	.+4      	; 0x84a <_Z5setupv+0x138>
     846:	ee 0f       	add	r30, r30
     848:	ff 1f       	adc	r31, r31
     84a:	8a 95       	dec	r24
     84c:	e2 f7       	brpl	.-8      	; 0x846 <_Z5setupv+0x134>
     84e:	cf 01       	movw	r24, r30
     850:	80 95       	com	r24
     852:	84 23       	and	r24, r20
     854:	8b b9       	out	0x0b, r24	; 11
     856:	0e c0       	rjmp	.+28     	; 0x874 <_Z5setupv+0x162>
     858:	45 b1       	in	r20, 0x05	; 5
     85a:	87 70       	andi	r24, 0x07	; 7
     85c:	21 e0       	ldi	r18, 0x01	; 1
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	b9 01       	movw	r22, r18
     862:	02 c0       	rjmp	.+4      	; 0x868 <_Z5setupv+0x156>
     864:	66 0f       	add	r22, r22
     866:	77 1f       	adc	r23, r23
     868:	8a 95       	dec	r24
     86a:	e2 f7       	brpl	.-8      	; 0x864 <_Z5setupv+0x152>
     86c:	cb 01       	movw	r24, r22
     86e:	80 95       	com	r24
     870:	84 23       	and	r24, r20
     872:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     874:	d8 01       	movw	r26, r16
     876:	15 96       	adiw	r26, 0x05	; 5
     878:	8c 91       	ld	r24, X
     87a:	88 30       	cpi	r24, 0x08	; 8
     87c:	78 f4       	brcc	.+30     	; 0x89c <_Z5setupv+0x18a>
     87e:	4b b1       	in	r20, 0x0b	; 11
     880:	87 70       	andi	r24, 0x07	; 7
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	02 c0       	rjmp	.+4      	; 0x88e <_Z5setupv+0x17c>
     88a:	ee 0f       	add	r30, r30
     88c:	ff 1f       	adc	r31, r31
     88e:	8a 95       	dec	r24
     890:	e2 f7       	brpl	.-8      	; 0x88a <_Z5setupv+0x178>
     892:	cf 01       	movw	r24, r30
     894:	80 95       	com	r24
     896:	84 23       	and	r24, r20
     898:	8b b9       	out	0x0b, r24	; 11
     89a:	0e c0       	rjmp	.+28     	; 0x8b8 <_Z5setupv+0x1a6>
     89c:	45 b1       	in	r20, 0x05	; 5
     89e:	87 70       	andi	r24, 0x07	; 7
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	b9 01       	movw	r22, r18
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <_Z5setupv+0x19a>
     8a8:	66 0f       	add	r22, r22
     8aa:	77 1f       	adc	r23, r23
     8ac:	8a 95       	dec	r24
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <_Z5setupv+0x196>
     8b0:	cb 01       	movw	r24, r22
     8b2:	80 95       	com	r24
     8b4:	84 23       	and	r24, r20
     8b6:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     8b8:	d8 01       	movw	r26, r16
     8ba:	8c 91       	ld	r24, X
     8bc:	88 30       	cpi	r24, 0x08	; 8
     8be:	78 f4       	brcc	.+30     	; 0x8de <_Z5setupv+0x1cc>
     8c0:	4b b1       	in	r20, 0x0b	; 11
     8c2:	87 70       	andi	r24, 0x07	; 7
     8c4:	21 e0       	ldi	r18, 0x01	; 1
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <_Z5setupv+0x1be>
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	8a 95       	dec	r24
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <_Z5setupv+0x1ba>
     8d4:	cf 01       	movw	r24, r30
     8d6:	80 95       	com	r24
     8d8:	84 23       	and	r24, r20
     8da:	8b b9       	out	0x0b, r24	; 11
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <_Z5setupv+0x1e8>
     8de:	45 b1       	in	r20, 0x05	; 5
     8e0:	87 70       	andi	r24, 0x07	; 7
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	b9 01       	movw	r22, r18
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <_Z5setupv+0x1dc>
     8ea:	66 0f       	add	r22, r22
     8ec:	77 1f       	adc	r23, r23
     8ee:	8a 95       	dec	r24
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <_Z5setupv+0x1d8>
     8f2:	cb 01       	movw	r24, r22
     8f4:	80 95       	com	r24
     8f6:	84 23       	and	r24, r20
     8f8:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     8fa:	d8 01       	movw	r26, r16
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     900:	88 30       	cpi	r24, 0x08	; 8
     902:	70 f4       	brcc	.+28     	; 0x920 <__stack+0x21>
     904:	4b b1       	in	r20, 0x0b	; 11
     906:	87 70       	andi	r24, 0x07	; 7
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	8a 95       	dec	r24
     916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0x11>
     918:	cf 01       	movw	r24, r30
     91a:	84 2b       	or	r24, r20
     91c:	8b b9       	out	0x0b, r24	; 11
     91e:	0d c0       	rjmp	.+26     	; 0x93a <__stack+0x3b>
     920:	45 b1       	in	r20, 0x05	; 5
     922:	87 70       	andi	r24, 0x07	; 7
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	b9 01       	movw	r22, r18
     92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	8a 95       	dec	r24
     932:	e2 f7       	brpl	.-8      	; 0x92c <__stack+0x2d>
     934:	cb 01       	movw	r24, r22
     936:	84 2b       	or	r24, r20
     938:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93a:	75 e0       	ldi	r23, 0x05	; 5
     93c:	7a 95       	dec	r23
     93e:	f1 f7       	brne	.-4      	; 0x93c <__stack+0x3d>
     940:	00 00       	nop
     942:	d8 01       	movw	r26, r16
     944:	11 96       	adiw	r26, 0x01	; 1
     946:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     948:	88 30       	cpi	r24, 0x08	; 8
     94a:	78 f4       	brcc	.+30     	; 0x96a <__stack+0x6b>
     94c:	4b b1       	in	r20, 0x0b	; 11
     94e:	87 70       	andi	r24, 0x07	; 7
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0x59>
     960:	cf 01       	movw	r24, r30
     962:	80 95       	com	r24
     964:	84 23       	and	r24, r20
     966:	8b b9       	out	0x0b, r24	; 11
     968:	0e c0       	rjmp	.+28     	; 0x986 <__stack+0x87>
     96a:	45 b1       	in	r20, 0x05	; 5
     96c:	87 70       	andi	r24, 0x07	; 7
     96e:	21 e0       	ldi	r18, 0x01	; 1
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	b9 01       	movw	r22, r18
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x7b>
     976:	66 0f       	add	r22, r22
     978:	77 1f       	adc	r23, r23
     97a:	8a 95       	dec	r24
     97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x77>
     97e:	cb 01       	movw	r24, r22
     980:	80 95       	com	r24
     982:	84 23       	and	r24, r20
     984:	85 b9       	out	0x05, r24	; 5
     986:	8f e1       	ldi	r24, 0x1F	; 31
     988:	93 e0       	ldi	r25, 0x03	; 3
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <__stack+0x8b>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <__stack+0x91>
     990:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     992:	d8 01       	movw	r26, r16
     994:	12 96       	adiw	r26, 0x02	; 2
     996:	8c 91       	ld	r24, X
     998:	88 30       	cpi	r24, 0x08	; 8
     99a:	78 f4       	brcc	.+30     	; 0x9ba <__stack+0xbb>
     99c:	4b b1       	in	r20, 0x0b	; 11
     99e:	87 70       	andi	r24, 0x07	; 7
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__stack+0xad>
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	8a 95       	dec	r24
     9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <__stack+0xa9>
     9b0:	cf 01       	movw	r24, r30
     9b2:	80 95       	com	r24
     9b4:	84 23       	and	r24, r20
     9b6:	8b b9       	out	0x0b, r24	; 11
     9b8:	0e c0       	rjmp	.+28     	; 0x9d6 <__stack+0xd7>
     9ba:	45 b1       	in	r20, 0x05	; 5
     9bc:	87 70       	andi	r24, 0x07	; 7
     9be:	21 e0       	ldi	r18, 0x01	; 1
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	b9 01       	movw	r22, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
     9c6:	66 0f       	add	r22, r22
     9c8:	77 1f       	adc	r23, r23
     9ca:	8a 95       	dec	r24
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <__stack+0xc7>
     9ce:	cb 01       	movw	r24, r22
     9d0:	80 95       	com	r24
     9d2:	84 23       	and	r24, r20
     9d4:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     9d6:	d8 01       	movw	r26, r16
     9d8:	13 96       	adiw	r26, 0x03	; 3
     9da:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     9dc:	88 30       	cpi	r24, 0x08	; 8
     9de:	70 f4       	brcc	.+28     	; 0x9fc <__stack+0xfd>
     9e0:	4b b1       	in	r20, 0x0b	; 11
     9e2:	87 70       	andi	r24, 0x07	; 7
     9e4:	21 e0       	ldi	r18, 0x01	; 1
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <__stack+0xf1>
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	8a 95       	dec	r24
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <__stack+0xed>
     9f4:	cf 01       	movw	r24, r30
     9f6:	84 2b       	or	r24, r20
     9f8:	8b b9       	out	0x0b, r24	; 11
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <__stack+0x117>
     9fc:	45 b1       	in	r20, 0x05	; 5
     9fe:	87 70       	andi	r24, 0x07	; 7
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	b9 01       	movw	r22, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__stack+0x10d>
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	8a 95       	dec	r24
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <__stack+0x109>
     a10:	cb 01       	movw	r24, r22
     a12:	84 2b       	or	r24, r20
     a14:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     a16:	d8 01       	movw	r26, r16
     a18:	14 96       	adiw	r26, 0x04	; 4
     a1a:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     a1c:	88 30       	cpi	r24, 0x08	; 8
     a1e:	78 f4       	brcc	.+30     	; 0xa3e <__stack+0x13f>
     a20:	4b b1       	in	r20, 0x0b	; 11
     a22:	87 70       	andi	r24, 0x07	; 7
     a24:	21 e0       	ldi	r18, 0x01	; 1
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	f9 01       	movw	r30, r18
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <__stack+0x131>
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	8a 95       	dec	r24
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <__stack+0x12d>
     a34:	cf 01       	movw	r24, r30
     a36:	80 95       	com	r24
     a38:	84 23       	and	r24, r20
     a3a:	8b b9       	out	0x0b, r24	; 11
     a3c:	0e c0       	rjmp	.+28     	; 0xa5a <__stack+0x15b>
     a3e:	45 b1       	in	r20, 0x05	; 5
     a40:	87 70       	andi	r24, 0x07	; 7
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	b9 01       	movw	r22, r18
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x14f>
     a4a:	66 0f       	add	r22, r22
     a4c:	77 1f       	adc	r23, r23
     a4e:	8a 95       	dec	r24
     a50:	e2 f7       	brpl	.-8      	; 0xa4a <__stack+0x14b>
     a52:	cb 01       	movw	r24, r22
     a54:	80 95       	com	r24
     a56:	84 23       	and	r24, r20
     a58:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     a5a:	d8 01       	movw	r26, r16
     a5c:	15 96       	adiw	r26, 0x05	; 5
     a5e:	8c 91       	ld	r24, X
     a60:	88 30       	cpi	r24, 0x08	; 8
     a62:	78 f4       	brcc	.+30     	; 0xa82 <__stack+0x183>
     a64:	4b b1       	in	r20, 0x0b	; 11
     a66:	87 70       	andi	r24, 0x07	; 7
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	f9 01       	movw	r30, r18
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <__stack+0x175>
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	8a 95       	dec	r24
     a76:	e2 f7       	brpl	.-8      	; 0xa70 <__stack+0x171>
     a78:	cf 01       	movw	r24, r30
     a7a:	80 95       	com	r24
     a7c:	84 23       	and	r24, r20
     a7e:	8b b9       	out	0x0b, r24	; 11
     a80:	0e c0       	rjmp	.+28     	; 0xa9e <__stack+0x19f>
     a82:	45 b1       	in	r20, 0x05	; 5
     a84:	87 70       	andi	r24, 0x07	; 7
     a86:	21 e0       	ldi	r18, 0x01	; 1
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	b9 01       	movw	r22, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <__stack+0x193>
     a8e:	66 0f       	add	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	8a 95       	dec	r24
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <__stack+0x18f>
     a96:	cb 01       	movw	r24, r22
     a98:	80 95       	com	r24
     a9a:	84 23       	and	r24, r20
     a9c:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     a9e:	d8 01       	movw	r26, r16
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     aa4:	88 30       	cpi	r24, 0x08	; 8
     aa6:	70 f4       	brcc	.+28     	; 0xac4 <__stack+0x1c5>
     aa8:	4b b1       	in	r20, 0x0b	; 11
     aaa:	87 70       	andi	r24, 0x07	; 7
     aac:	21 e0       	ldi	r18, 0x01	; 1
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	f9 01       	movw	r30, r18
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <__stack+0x1b9>
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	8a 95       	dec	r24
     aba:	e2 f7       	brpl	.-8      	; 0xab4 <__stack+0x1b5>
     abc:	cf 01       	movw	r24, r30
     abe:	84 2b       	or	r24, r20
     ac0:	8b b9       	out	0x0b, r24	; 11
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__stack+0x1df>
     ac4:	45 b1       	in	r20, 0x05	; 5
     ac6:	87 70       	andi	r24, 0x07	; 7
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	b9 01       	movw	r22, r18
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <__stack+0x1d5>
     ad0:	66 0f       	add	r22, r22
     ad2:	77 1f       	adc	r23, r23
     ad4:	8a 95       	dec	r24
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <__stack+0x1d1>
     ad8:	cb 01       	movw	r24, r22
     ada:	84 2b       	or	r24, r20
     adc:	85 b9       	out	0x05, r24	; 5
     ade:	75 e0       	ldi	r23, 0x05	; 5
     ae0:	7a 95       	dec	r23
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <__stack+0x1e1>
     ae4:	00 00       	nop
     ae6:	d8 01       	movw	r26, r16
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     aec:	88 30       	cpi	r24, 0x08	; 8
     aee:	78 f4       	brcc	.+30     	; 0xb0e <__stack+0x20f>
     af0:	4b b1       	in	r20, 0x0b	; 11
     af2:	87 70       	andi	r24, 0x07	; 7
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	f9 01       	movw	r30, r18
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x201>
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	8a 95       	dec	r24
     b02:	e2 f7       	brpl	.-8      	; 0xafc <__stack+0x1fd>
     b04:	cf 01       	movw	r24, r30
     b06:	80 95       	com	r24
     b08:	84 23       	and	r24, r20
     b0a:	8b b9       	out	0x0b, r24	; 11
     b0c:	0e c0       	rjmp	.+28     	; 0xb2a <__stack+0x22b>
     b0e:	45 b1       	in	r20, 0x05	; 5
     b10:	87 70       	andi	r24, 0x07	; 7
     b12:	21 e0       	ldi	r18, 0x01	; 1
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	b9 01       	movw	r22, r18
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <__stack+0x21f>
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	8a 95       	dec	r24
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <__stack+0x21b>
     b22:	cb 01       	movw	r24, r22
     b24:	80 95       	com	r24
     b26:	84 23       	and	r24, r20
     b28:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	8f e3       	ldi	r24, 0x3F	; 63
     b2c:	9f e1       	ldi	r25, 0x1F	; 31
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	f1 f7       	brne	.-4      	; 0xb2e <__stack+0x22f>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <__stack+0x235>
     b34:	00 00       	nop
				port::mode(_pPulse, OUTPUT);
				
				util::delay_ms_static(20);
				SendCommand(0x33);
				SendCommand(0x32);
				SendCommand(0x28);
     b36:	68 e2       	ldi	r22, 0x28	; 40
     b38:	c8 01       	movw	r24, r16
     b3a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     b3e:	d8 01       	movw	r26, r16
     b40:	12 96       	adiw	r26, 0x02	; 2
     b42:	8c 91       	ld	r24, X
     b44:	88 30       	cpi	r24, 0x08	; 8
     b46:	78 f4       	brcc	.+30     	; 0xb66 <__stack+0x267>
     b48:	4b b1       	in	r20, 0x0b	; 11
     b4a:	87 70       	andi	r24, 0x07	; 7
     b4c:	21 e0       	ldi	r18, 0x01	; 1
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	f9 01       	movw	r30, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__stack+0x259>
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	8a 95       	dec	r24
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <__stack+0x255>
     b5c:	cf 01       	movw	r24, r30
     b5e:	80 95       	com	r24
     b60:	84 23       	and	r24, r20
     b62:	8b b9       	out	0x0b, r24	; 11
     b64:	0e c0       	rjmp	.+28     	; 0xb82 <__stack+0x283>
     b66:	45 b1       	in	r20, 0x05	; 5
     b68:	87 70       	andi	r24, 0x07	; 7
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	b9 01       	movw	r22, r18
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <__stack+0x277>
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	8a 95       	dec	r24
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <__stack+0x273>
     b7a:	cb 01       	movw	r24, r22
     b7c:	80 95       	com	r24
     b7e:	84 23       	and	r24, r20
     b80:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     b82:	d8 01       	movw	r26, r16
     b84:	13 96       	adiw	r26, 0x03	; 3
     b86:	8c 91       	ld	r24, X
     b88:	88 30       	cpi	r24, 0x08	; 8
     b8a:	78 f4       	brcc	.+30     	; 0xbaa <__stack+0x2ab>
     b8c:	4b b1       	in	r20, 0x0b	; 11
     b8e:	87 70       	andi	r24, 0x07	; 7
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x29d>
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	8a 95       	dec	r24
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <__stack+0x299>
     ba0:	cf 01       	movw	r24, r30
     ba2:	80 95       	com	r24
     ba4:	84 23       	and	r24, r20
     ba6:	8b b9       	out	0x0b, r24	; 11
     ba8:	0e c0       	rjmp	.+28     	; 0xbc6 <__stack+0x2c7>
     baa:	45 b1       	in	r20, 0x05	; 5
     bac:	87 70       	andi	r24, 0x07	; 7
     bae:	21 e0       	ldi	r18, 0x01	; 1
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	b9 01       	movw	r22, r18
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <__stack+0x2bb>
     bb6:	66 0f       	add	r22, r22
     bb8:	77 1f       	adc	r23, r23
     bba:	8a 95       	dec	r24
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <__stack+0x2b7>
     bbe:	cb 01       	movw	r24, r22
     bc0:	80 95       	com	r24
     bc2:	84 23       	and	r24, r20
     bc4:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     bc6:	d8 01       	movw	r26, r16
     bc8:	14 96       	adiw	r26, 0x04	; 4
     bca:	8c 91       	ld	r24, X
     bcc:	88 30       	cpi	r24, 0x08	; 8
     bce:	78 f4       	brcc	.+30     	; 0xbee <__stack+0x2ef>
     bd0:	4b b1       	in	r20, 0x0b	; 11
     bd2:	87 70       	andi	r24, 0x07	; 7
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	f9 01       	movw	r30, r18
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <__stack+0x2e1>
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	8a 95       	dec	r24
     be2:	e2 f7       	brpl	.-8      	; 0xbdc <__stack+0x2dd>
     be4:	cf 01       	movw	r24, r30
     be6:	80 95       	com	r24
     be8:	84 23       	and	r24, r20
     bea:	8b b9       	out	0x0b, r24	; 11
     bec:	0e c0       	rjmp	.+28     	; 0xc0a <__stack+0x30b>
     bee:	45 b1       	in	r20, 0x05	; 5
     bf0:	87 70       	andi	r24, 0x07	; 7
     bf2:	21 e0       	ldi	r18, 0x01	; 1
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	b9 01       	movw	r22, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <__stack+0x2ff>
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	8a 95       	dec	r24
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <__stack+0x2fb>
     c02:	cb 01       	movw	r24, r22
     c04:	80 95       	com	r24
     c06:	84 23       	and	r24, r20
     c08:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     c0a:	d8 01       	movw	r26, r16
     c0c:	15 96       	adiw	r26, 0x05	; 5
     c0e:	8c 91       	ld	r24, X
     c10:	88 30       	cpi	r24, 0x08	; 8
     c12:	78 f4       	brcc	.+30     	; 0xc32 <__stack+0x333>
     c14:	4b b1       	in	r20, 0x0b	; 11
     c16:	87 70       	andi	r24, 0x07	; 7
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__stack+0x325>
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	8a 95       	dec	r24
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <__stack+0x321>
     c28:	cf 01       	movw	r24, r30
     c2a:	80 95       	com	r24
     c2c:	84 23       	and	r24, r20
     c2e:	8b b9       	out	0x0b, r24	; 11
     c30:	0e c0       	rjmp	.+28     	; 0xc4e <__stack+0x34f>
     c32:	45 b1       	in	r20, 0x05	; 5
     c34:	87 70       	andi	r24, 0x07	; 7
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	b9 01       	movw	r22, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__stack+0x343>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	8a 95       	dec	r24
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <__stack+0x33f>
     c46:	cb 01       	movw	r24, r22
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     c4e:	d8 01       	movw	r26, r16
     c50:	8c 91       	ld	r24, X
     c52:	88 30       	cpi	r24, 0x08	; 8
     c54:	78 f4       	brcc	.+30     	; 0xc74 <__stack+0x375>
     c56:	4b b1       	in	r20, 0x0b	; 11
     c58:	87 70       	andi	r24, 0x07	; 7
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	f9 01       	movw	r30, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <__stack+0x367>
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	8a 95       	dec	r24
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <__stack+0x363>
     c6a:	cf 01       	movw	r24, r30
     c6c:	80 95       	com	r24
     c6e:	84 23       	and	r24, r20
     c70:	8b b9       	out	0x0b, r24	; 11
     c72:	0e c0       	rjmp	.+28     	; 0xc90 <__stack+0x391>
     c74:	45 b1       	in	r20, 0x05	; 5
     c76:	87 70       	andi	r24, 0x07	; 7
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	b9 01       	movw	r22, r18
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <__stack+0x385>
     c80:	66 0f       	add	r22, r22
     c82:	77 1f       	adc	r23, r23
     c84:	8a 95       	dec	r24
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <__stack+0x381>
     c88:	cb 01       	movw	r24, r22
     c8a:	80 95       	com	r24
     c8c:	84 23       	and	r24, r20
     c8e:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     c90:	d8 01       	movw	r26, r16
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     c96:	88 30       	cpi	r24, 0x08	; 8
     c98:	70 f4       	brcc	.+28     	; 0xcb6 <__stack+0x3b7>
     c9a:	4b b1       	in	r20, 0x0b	; 11
     c9c:	87 70       	andi	r24, 0x07	; 7
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	f9 01       	movw	r30, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <__stack+0x3ab>
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	8a 95       	dec	r24
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <__stack+0x3a7>
     cae:	cf 01       	movw	r24, r30
     cb0:	84 2b       	or	r24, r20
     cb2:	8b b9       	out	0x0b, r24	; 11
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__stack+0x3d1>
     cb6:	45 b1       	in	r20, 0x05	; 5
     cb8:	87 70       	andi	r24, 0x07	; 7
     cba:	21 e0       	ldi	r18, 0x01	; 1
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	b9 01       	movw	r22, r18
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <__stack+0x3c7>
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	8a 95       	dec	r24
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <__stack+0x3c3>
     cca:	cb 01       	movw	r24, r22
     ccc:	84 2b       	or	r24, r20
     cce:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd0:	75 e0       	ldi	r23, 0x05	; 5
     cd2:	7a 95       	dec	r23
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <__stack+0x3d3>
     cd6:	00 00       	nop
     cd8:	d8 01       	movw	r26, r16
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     cde:	88 30       	cpi	r24, 0x08	; 8
     ce0:	78 f4       	brcc	.+30     	; 0xd00 <__stack+0x401>
     ce2:	4b b1       	in	r20, 0x0b	; 11
     ce4:	87 70       	andi	r24, 0x07	; 7
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	f9 01       	movw	r30, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <__stack+0x3f3>
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	8a 95       	dec	r24
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <__stack+0x3ef>
     cf6:	cf 01       	movw	r24, r30
     cf8:	80 95       	com	r24
     cfa:	84 23       	and	r24, r20
     cfc:	8b b9       	out	0x0b, r24	; 11
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <__stack+0x41d>
     d00:	45 b1       	in	r20, 0x05	; 5
     d02:	87 70       	andi	r24, 0x07	; 7
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	b9 01       	movw	r22, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <__stack+0x411>
     d0c:	66 0f       	add	r22, r22
     d0e:	77 1f       	adc	r23, r23
     d10:	8a 95       	dec	r24
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <__stack+0x40d>
     d14:	cb 01       	movw	r24, r22
     d16:	80 95       	com	r24
     d18:	84 23       	and	r24, r20
     d1a:	85 b9       	out	0x05, r24	; 5
     d1c:	8f e1       	ldi	r24, 0x1F	; 31
     d1e:	93 e0       	ldi	r25, 0x03	; 3
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <__stack+0x421>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <__stack+0x427>
     d26:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     d28:	d8 01       	movw	r26, r16
     d2a:	12 96       	adiw	r26, 0x02	; 2
     d2c:	8c 91       	ld	r24, X
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	78 f4       	brcc	.+30     	; 0xd50 <__stack+0x451>
     d32:	4b b1       	in	r20, 0x0b	; 11
     d34:	87 70       	andi	r24, 0x07	; 7
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <__stack+0x443>
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	8a 95       	dec	r24
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <__stack+0x43f>
     d46:	cf 01       	movw	r24, r30
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8b b9       	out	0x0b, r24	; 11
     d4e:	0e c0       	rjmp	.+28     	; 0xd6c <__stack+0x46d>
     d50:	45 b1       	in	r20, 0x05	; 5
     d52:	87 70       	andi	r24, 0x07	; 7
     d54:	21 e0       	ldi	r18, 0x01	; 1
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	b9 01       	movw	r22, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <__stack+0x461>
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	8a 95       	dec	r24
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <__stack+0x45d>
     d64:	cb 01       	movw	r24, r22
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     d6c:	d8 01       	movw	r26, r16
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	8c 91       	ld	r24, X
     d72:	88 30       	cpi	r24, 0x08	; 8
     d74:	78 f4       	brcc	.+30     	; 0xd94 <__stack+0x495>
     d76:	4b b1       	in	r20, 0x0b	; 11
     d78:	87 70       	andi	r24, 0x07	; 7
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	f9 01       	movw	r30, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <__stack+0x487>
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	8a 95       	dec	r24
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <__stack+0x483>
     d8a:	cf 01       	movw	r24, r30
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8b b9       	out	0x0b, r24	; 11
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <__stack+0x4b1>
     d94:	45 b1       	in	r20, 0x05	; 5
     d96:	87 70       	andi	r24, 0x07	; 7
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	b9 01       	movw	r22, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <__stack+0x4a5>
     da0:	66 0f       	add	r22, r22
     da2:	77 1f       	adc	r23, r23
     da4:	8a 95       	dec	r24
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <__stack+0x4a1>
     da8:	cb 01       	movw	r24, r22
     daa:	80 95       	com	r24
     dac:	84 23       	and	r24, r20
     dae:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     db0:	d8 01       	movw	r26, r16
     db2:	14 96       	adiw	r26, 0x04	; 4
     db4:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     db6:	88 30       	cpi	r24, 0x08	; 8
     db8:	70 f4       	brcc	.+28     	; 0xdd6 <__stack+0x4d7>
     dba:	4b b1       	in	r20, 0x0b	; 11
     dbc:	87 70       	andi	r24, 0x07	; 7
     dbe:	21 e0       	ldi	r18, 0x01	; 1
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	f9 01       	movw	r30, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <__stack+0x4cb>
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	8a 95       	dec	r24
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <__stack+0x4c7>
     dce:	cf 01       	movw	r24, r30
     dd0:	84 2b       	or	r24, r20
     dd2:	8b b9       	out	0x0b, r24	; 11
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__stack+0x4f1>
     dd6:	45 b1       	in	r20, 0x05	; 5
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	b9 01       	movw	r22, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <__stack+0x4e7>
     de2:	66 0f       	add	r22, r22
     de4:	77 1f       	adc	r23, r23
     de6:	8a 95       	dec	r24
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <__stack+0x4e3>
     dea:	cb 01       	movw	r24, r22
     dec:	84 2b       	or	r24, r20
     dee:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     df0:	d8 01       	movw	r26, r16
     df2:	15 96       	adiw	r26, 0x05	; 5
     df4:	8c 91       	ld	r24, X
     df6:	88 30       	cpi	r24, 0x08	; 8
     df8:	70 f4       	brcc	.+28     	; 0xe16 <__stack+0x517>
     dfa:	4b b1       	in	r20, 0x0b	; 11
     dfc:	87 70       	andi	r24, 0x07	; 7
     dfe:	21 e0       	ldi	r18, 0x01	; 1
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	f9 01       	movw	r30, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <__stack+0x50b>
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	8a 95       	dec	r24
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <__stack+0x507>
     e0e:	cf 01       	movw	r24, r30
     e10:	84 2b       	or	r24, r20
     e12:	8b b9       	out	0x0b, r24	; 11
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__stack+0x531>
     e16:	45 b1       	in	r20, 0x05	; 5
     e18:	87 70       	andi	r24, 0x07	; 7
     e1a:	21 e0       	ldi	r18, 0x01	; 1
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	b9 01       	movw	r22, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <__stack+0x527>
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	8a 95       	dec	r24
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <__stack+0x523>
     e2a:	cb 01       	movw	r24, r22
     e2c:	84 2b       	or	r24, r20
     e2e:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     e30:	d8 01       	movw	r26, r16
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	8c 91       	ld	r24, X
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	70 f4       	brcc	.+28     	; 0xe56 <__stack+0x557>
     e3a:	4b b1       	in	r20, 0x0b	; 11
     e3c:	87 70       	andi	r24, 0x07	; 7
     e3e:	21 e0       	ldi	r18, 0x01	; 1
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	f9 01       	movw	r30, r18
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <__stack+0x54b>
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	8a 95       	dec	r24
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <__stack+0x547>
     e4e:	cf 01       	movw	r24, r30
     e50:	84 2b       	or	r24, r20
     e52:	8b b9       	out	0x0b, r24	; 11
     e54:	0d c0       	rjmp	.+26     	; 0xe70 <__stack+0x571>
     e56:	45 b1       	in	r20, 0x05	; 5
     e58:	87 70       	andi	r24, 0x07	; 7
     e5a:	21 e0       	ldi	r18, 0x01	; 1
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	b9 01       	movw	r22, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <__stack+0x567>
     e62:	66 0f       	add	r22, r22
     e64:	77 1f       	adc	r23, r23
     e66:	8a 95       	dec	r24
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <__stack+0x563>
     e6a:	cb 01       	movw	r24, r22
     e6c:	84 2b       	or	r24, r20
     e6e:	85 b9       	out	0x05, r24	; 5
     e70:	75 e0       	ldi	r23, 0x05	; 5
     e72:	7a 95       	dec	r23
     e74:	f1 f7       	brne	.-4      	; 0xe72 <__stack+0x573>
     e76:	00 00       	nop
     e78:	d8 01       	movw	r26, r16
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     e7e:	88 30       	cpi	r24, 0x08	; 8
     e80:	78 f4       	brcc	.+30     	; 0xea0 <__stack+0x5a1>
     e82:	4b b1       	in	r20, 0x0b	; 11
     e84:	87 70       	andi	r24, 0x07	; 7
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <__stack+0x593>
     e8e:	ee 0f       	add	r30, r30
     e90:	ff 1f       	adc	r31, r31
     e92:	8a 95       	dec	r24
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <__stack+0x58f>
     e96:	cf 01       	movw	r24, r30
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8b b9       	out	0x0b, r24	; 11
     e9e:	0e c0       	rjmp	.+28     	; 0xebc <__stack+0x5bd>
     ea0:	45 b1       	in	r20, 0x05	; 5
     ea2:	87 70       	andi	r24, 0x07	; 7
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	b9 01       	movw	r22, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <__stack+0x5b1>
     eac:	66 0f       	add	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	8a 95       	dec	r24
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <__stack+0x5ad>
     eb4:	cb 01       	movw	r24, r22
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ebc:	8f e3       	ldi	r24, 0x3F	; 63
     ebe:	9f e1       	ldi	r25, 0x1F	; 31
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <__stack+0x5c1>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <__stack+0x5c7>
     ec6:	00 00       	nop
				util::delay_ms_static(20);
				SendCommand(0x33);
				SendCommand(0x32);
				SendCommand(0x28);
				SendCommand(0x0C);
				SendCommand(0x06);
     ec8:	66 e0       	ldi	r22, 0x06	; 6
     eca:	c8 01       	movw	r24, r16
     ecc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				SendCommand(0x01);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
     ed8:	af e3       	ldi	r26, 0x3F	; 63
     eda:	bf e1       	ldi	r27, 0x1F	; 31
     edc:	11 97       	sbiw	r26, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <__stack+0x5dd>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <__stack+0x5e3>
     ee2:	00 00       	nop
	lcd = new component::DisplayLCD(P12, P11, ports);
     ee4:	10 93 65 01 	sts	0x0165, r17	; 0x800165 <lcd+0x1>
     ee8:	00 93 64 01 	sts	0x0164, r16	; 0x800164 <lcd>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     eec:	f8 01       	movw	r30, r16
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	88 30       	cpi	r24, 0x08	; 8
     ef2:	78 f4       	brcc	.+30     	; 0xf12 <__stack+0x613>
     ef4:	4b b1       	in	r20, 0x0b	; 11
     ef6:	87 70       	andi	r24, 0x07	; 7
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	b9 01       	movw	r22, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <__stack+0x605>
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	8a 95       	dec	r24
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <__stack+0x601>
     f08:	cb 01       	movw	r24, r22
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8b b9       	out	0x0b, r24	; 11
     f10:	0e c0       	rjmp	.+28     	; 0xf2e <__stack+0x62f>
     f12:	45 b1       	in	r20, 0x05	; 5
     f14:	87 70       	andi	r24, 0x07	; 7
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	d9 01       	movw	r26, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__stack+0x623>
     f1e:	aa 0f       	add	r26, r26
     f20:	bb 1f       	adc	r27, r27
     f22:	8a 95       	dec	r24
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <__stack+0x61f>
     f26:	cd 01       	movw	r24, r26
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     f2e:	f8 01       	movw	r30, r16
     f30:	83 81       	ldd	r24, Z+3	; 0x03
     f32:	88 30       	cpi	r24, 0x08	; 8
     f34:	78 f4       	brcc	.+30     	; 0xf54 <__stack+0x655>
     f36:	4b b1       	in	r20, 0x0b	; 11
     f38:	87 70       	andi	r24, 0x07	; 7
     f3a:	21 e0       	ldi	r18, 0x01	; 1
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	b9 01       	movw	r22, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <__stack+0x647>
     f42:	66 0f       	add	r22, r22
     f44:	77 1f       	adc	r23, r23
     f46:	8a 95       	dec	r24
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <__stack+0x643>
     f4a:	cb 01       	movw	r24, r22
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8b b9       	out	0x0b, r24	; 11
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <__stack+0x671>
     f54:	45 b1       	in	r20, 0x05	; 5
     f56:	87 70       	andi	r24, 0x07	; 7
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	d9 01       	movw	r26, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <__stack+0x665>
     f60:	aa 0f       	add	r26, r26
     f62:	bb 1f       	adc	r27, r27
     f64:	8a 95       	dec	r24
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <__stack+0x661>
     f68:	cd 01       	movw	r24, r26
     f6a:	80 95       	com	r24
     f6c:	84 23       	and	r24, r20
     f6e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     f70:	f8 01       	movw	r30, r16
     f72:	84 81       	ldd	r24, Z+4	; 0x04
     f74:	88 30       	cpi	r24, 0x08	; 8
     f76:	78 f4       	brcc	.+30     	; 0xf96 <__stack+0x697>
     f78:	4b b1       	in	r20, 0x0b	; 11
     f7a:	87 70       	andi	r24, 0x07	; 7
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	b9 01       	movw	r22, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <__stack+0x689>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <__stack+0x685>
     f8c:	cb 01       	movw	r24, r22
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8b b9       	out	0x0b, r24	; 11
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <__stack+0x6b3>
     f96:	45 b1       	in	r20, 0x05	; 5
     f98:	87 70       	andi	r24, 0x07	; 7
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	d9 01       	movw	r26, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <__stack+0x6a7>
     fa2:	aa 0f       	add	r26, r26
     fa4:	bb 1f       	adc	r27, r27
     fa6:	8a 95       	dec	r24
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <__stack+0x6a3>
     faa:	cd 01       	movw	r24, r26
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     fb2:	f8 01       	movw	r30, r16
     fb4:	85 81       	ldd	r24, Z+5	; 0x05
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	78 f4       	brcc	.+30     	; 0xfd8 <__stack+0x6d9>
     fba:	4b b1       	in	r20, 0x0b	; 11
     fbc:	87 70       	andi	r24, 0x07	; 7
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	b9 01       	movw	r22, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <__stack+0x6cb>
     fc6:	66 0f       	add	r22, r22
     fc8:	77 1f       	adc	r23, r23
     fca:	8a 95       	dec	r24
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <__stack+0x6c7>
     fce:	cb 01       	movw	r24, r22
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8b b9       	out	0x0b, r24	; 11
     fd6:	0e c0       	rjmp	.+28     	; 0xff4 <__stack+0x6f5>
     fd8:	45 b1       	in	r20, 0x05	; 5
     fda:	87 70       	andi	r24, 0x07	; 7
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	d9 01       	movw	r26, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <__stack+0x6e9>
     fe4:	aa 0f       	add	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <__stack+0x6e5>
     fec:	cd 01       	movw	r24, r26
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 81       	ld	r24, Z
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	78 f4       	brcc	.+30     	; 0x101a <__stack+0x71b>
     ffc:	4b b1       	in	r20, 0x0b	; 11
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <__stack+0x70d>
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <__stack+0x709>
    1010:	cb 01       	movw	r24, r22
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8b b9       	out	0x0b, r24	; 11
    1018:	0e c0       	rjmp	.+28     	; 0x1036 <__stack+0x737>
    101a:	45 b1       	in	r20, 0x05	; 5
    101c:	87 70       	andi	r24, 0x07	; 7
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	d9 01       	movw	r26, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <__stack+0x72b>
    1026:	aa 0f       	add	r26, r26
    1028:	bb 1f       	adc	r27, r27
    102a:	8a 95       	dec	r24
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <__stack+0x727>
    102e:	cd 01       	movw	r24, r26
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1036:	f8 01       	movw	r30, r16
    1038:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    103a:	88 30       	cpi	r24, 0x08	; 8
    103c:	70 f4       	brcc	.+28     	; 0x105a <__stack+0x75b>
    103e:	4b b1       	in	r20, 0x0b	; 11
    1040:	87 70       	andi	r24, 0x07	; 7
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	b9 01       	movw	r22, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <__stack+0x74f>
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <__stack+0x74b>
    1052:	cb 01       	movw	r24, r22
    1054:	84 2b       	or	r24, r20
    1056:	8b b9       	out	0x0b, r24	; 11
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <__stack+0x775>
    105a:	45 b1       	in	r20, 0x05	; 5
    105c:	87 70       	andi	r24, 0x07	; 7
    105e:	21 e0       	ldi	r18, 0x01	; 1
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	d9 01       	movw	r26, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <__stack+0x76b>
    1066:	aa 0f       	add	r26, r26
    1068:	bb 1f       	adc	r27, r27
    106a:	8a 95       	dec	r24
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <__stack+0x767>
    106e:	cd 01       	movw	r24, r26
    1070:	84 2b       	or	r24, r20
    1072:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1074:	b5 e0       	ldi	r27, 0x05	; 5
    1076:	ba 95       	dec	r27
    1078:	f1 f7       	brne	.-4      	; 0x1076 <__stack+0x777>
    107a:	00 00       	nop
    107c:	f8 01       	movw	r30, r16
    107e:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	78 f4       	brcc	.+30     	; 0x10a2 <__stack+0x7a3>
    1084:	4b b1       	in	r20, 0x0b	; 11
    1086:	87 70       	andi	r24, 0x07	; 7
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	b9 01       	movw	r22, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <__stack+0x795>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <__stack+0x791>
    1098:	cb 01       	movw	r24, r22
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8b b9       	out	0x0b, r24	; 11
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <__stack+0x7bf>
    10a2:	45 b1       	in	r20, 0x05	; 5
    10a4:	87 70       	andi	r24, 0x07	; 7
    10a6:	21 e0       	ldi	r18, 0x01	; 1
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	d9 01       	movw	r26, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <__stack+0x7b3>
    10ae:	aa 0f       	add	r26, r26
    10b0:	bb 1f       	adc	r27, r27
    10b2:	8a 95       	dec	r24
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <__stack+0x7af>
    10b6:	cd 01       	movw	r24, r26
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	85 b9       	out	0x05, r24	; 5
    10be:	ef e1       	ldi	r30, 0x1F	; 31
    10c0:	f3 e0       	ldi	r31, 0x03	; 3
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <__stack+0x7c3>
    10c6:	00 c0       	rjmp	.+0      	; 0x10c8 <__stack+0x7c9>
    10c8:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    10ca:	d8 01       	movw	r26, r16
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	70 f4       	brcc	.+28     	; 0x10f0 <__stack+0x7f1>
    10d4:	4b b1       	in	r20, 0x0b	; 11
    10d6:	87 70       	andi	r24, 0x07	; 7
    10d8:	21 e0       	ldi	r18, 0x01	; 1
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	f9 01       	movw	r30, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <__stack+0x7e5>
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <__stack+0x7e1>
    10e8:	cf 01       	movw	r24, r30
    10ea:	84 2b       	or	r24, r20
    10ec:	8b b9       	out	0x0b, r24	; 11
    10ee:	0d c0       	rjmp	.+26     	; 0x110a <__stack+0x80b>
    10f0:	45 b1       	in	r20, 0x05	; 5
    10f2:	87 70       	andi	r24, 0x07	; 7
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	b9 01       	movw	r22, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <__stack+0x801>
    10fc:	66 0f       	add	r22, r22
    10fe:	77 1f       	adc	r23, r23
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <__stack+0x7fd>
    1104:	cb 01       	movw	r24, r22
    1106:	84 2b       	or	r24, r20
    1108:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    110a:	d8 01       	movw	r26, r16
    110c:	13 96       	adiw	r26, 0x03	; 3
    110e:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	78 f4       	brcc	.+30     	; 0x1132 <__stack+0x833>
    1114:	4b b1       	in	r20, 0x0b	; 11
    1116:	87 70       	andi	r24, 0x07	; 7
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	f9 01       	movw	r30, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <__stack+0x825>
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	8a 95       	dec	r24
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <__stack+0x821>
    1128:	cf 01       	movw	r24, r30
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8b b9       	out	0x0b, r24	; 11
    1130:	0e c0       	rjmp	.+28     	; 0x114e <__stack+0x84f>
    1132:	45 b1       	in	r20, 0x05	; 5
    1134:	87 70       	andi	r24, 0x07	; 7
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	b9 01       	movw	r22, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <__stack+0x843>
    113e:	66 0f       	add	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	8a 95       	dec	r24
    1144:	e2 f7       	brpl	.-8      	; 0x113e <__stack+0x83f>
    1146:	cb 01       	movw	r24, r22
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    114e:	d8 01       	movw	r26, r16
    1150:	14 96       	adiw	r26, 0x04	; 4
    1152:	8c 91       	ld	r24, X
    1154:	88 30       	cpi	r24, 0x08	; 8
    1156:	78 f4       	brcc	.+30     	; 0x1176 <__stack+0x877>
    1158:	4b b1       	in	r20, 0x0b	; 11
    115a:	87 70       	andi	r24, 0x07	; 7
    115c:	21 e0       	ldi	r18, 0x01	; 1
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	f9 01       	movw	r30, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <__stack+0x869>
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <__stack+0x865>
    116c:	cf 01       	movw	r24, r30
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8b b9       	out	0x0b, r24	; 11
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <__stack+0x893>
    1176:	45 b1       	in	r20, 0x05	; 5
    1178:	87 70       	andi	r24, 0x07	; 7
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	b9 01       	movw	r22, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__stack+0x887>
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <__stack+0x883>
    118a:	cb 01       	movw	r24, r22
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1192:	d8 01       	movw	r26, r16
    1194:	15 96       	adiw	r26, 0x05	; 5
    1196:	8c 91       	ld	r24, X
    1198:	88 30       	cpi	r24, 0x08	; 8
    119a:	78 f4       	brcc	.+30     	; 0x11ba <__stack+0x8bb>
    119c:	4b b1       	in	r20, 0x0b	; 11
    119e:	87 70       	andi	r24, 0x07	; 7
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <__stack+0x8ad>
    11a8:	ee 0f       	add	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <__stack+0x8a9>
    11b0:	cf 01       	movw	r24, r30
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8b b9       	out	0x0b, r24	; 11
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <__stack+0x8d7>
    11ba:	45 b1       	in	r20, 0x05	; 5
    11bc:	87 70       	andi	r24, 0x07	; 7
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	b9 01       	movw	r22, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <__stack+0x8cb>
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	8a 95       	dec	r24
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <__stack+0x8c7>
    11ce:	cb 01       	movw	r24, r22
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    11d6:	d8 01       	movw	r26, r16
    11d8:	11 96       	adiw	r26, 0x01	; 1
    11da:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	70 f4       	brcc	.+28     	; 0x11fc <__stack+0x8fd>
    11e0:	4b b1       	in	r20, 0x0b	; 11
    11e2:	87 70       	andi	r24, 0x07	; 7
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	f9 01       	movw	r30, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <__stack+0x8f1>
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31
    11f0:	8a 95       	dec	r24
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <__stack+0x8ed>
    11f4:	cf 01       	movw	r24, r30
    11f6:	84 2b       	or	r24, r20
    11f8:	8b b9       	out	0x0b, r24	; 11
    11fa:	0d c0       	rjmp	.+26     	; 0x1216 <__stack+0x917>
    11fc:	45 b1       	in	r20, 0x05	; 5
    11fe:	87 70       	andi	r24, 0x07	; 7
    1200:	21 e0       	ldi	r18, 0x01	; 1
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	b9 01       	movw	r22, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <__stack+0x90d>
    1208:	66 0f       	add	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <__stack+0x909>
    1210:	cb 01       	movw	r24, r22
    1212:	84 2b       	or	r24, r20
    1214:	85 b9       	out	0x05, r24	; 5
    1216:	75 e0       	ldi	r23, 0x05	; 5
    1218:	7a 95       	dec	r23
    121a:	f1 f7       	brne	.-4      	; 0x1218 <__stack+0x919>
    121c:	00 00       	nop
    121e:	d8 01       	movw	r26, r16
    1220:	11 96       	adiw	r26, 0x01	; 1
    1222:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1224:	88 30       	cpi	r24, 0x08	; 8
    1226:	78 f4       	brcc	.+30     	; 0x1246 <__stack+0x947>
    1228:	4b b1       	in	r20, 0x0b	; 11
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	21 e0       	ldi	r18, 0x01	; 1
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <__stack+0x939>
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <__stack+0x935>
    123c:	cf 01       	movw	r24, r30
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8b b9       	out	0x0b, r24	; 11
    1244:	0e c0       	rjmp	.+28     	; 0x1262 <__stack+0x963>
    1246:	45 b1       	in	r20, 0x05	; 5
    1248:	87 70       	andi	r24, 0x07	; 7
    124a:	21 e0       	ldi	r18, 0x01	; 1
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	b9 01       	movw	r22, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <__stack+0x957>
    1252:	66 0f       	add	r22, r22
    1254:	77 1f       	adc	r23, r23
    1256:	8a 95       	dec	r24
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <__stack+0x953>
    125a:	cb 01       	movw	r24, r22
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1262:	8f e3       	ldi	r24, 0x3F	; 63
    1264:	9f e1       	ldi	r25, 0x1F	; 31
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <__stack+0x967>
    126a:	00 c0       	rjmp	.+0      	; 0x126c <__stack+0x96d>
    126c:	00 00       	nop
    126e:	af e3       	ldi	r26, 0x3F	; 63
    1270:	bf e1       	ldi	r27, 0x1F	; 31
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <__stack+0x973>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <__stack+0x979>
    1278:	00 00       	nop
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    127a:	f8 01       	movw	r30, r16
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	88 30       	cpi	r24, 0x08	; 8
    1280:	78 f4       	brcc	.+30     	; 0x12a0 <__stack+0x9a1>
    1282:	4b b1       	in	r20, 0x0b	; 11
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	b9 01       	movw	r22, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <__stack+0x993>
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <__stack+0x98f>
    1296:	cb 01       	movw	r24, r22
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8b b9       	out	0x0b, r24	; 11
    129e:	0e c0       	rjmp	.+28     	; 0x12bc <__stack+0x9bd>
    12a0:	45 b1       	in	r20, 0x05	; 5
    12a2:	87 70       	andi	r24, 0x07	; 7
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	d9 01       	movw	r26, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <__stack+0x9b1>
    12ac:	aa 0f       	add	r26, r26
    12ae:	bb 1f       	adc	r27, r27
    12b0:	8a 95       	dec	r24
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <__stack+0x9ad>
    12b4:	cd 01       	movw	r24, r26
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    12bc:	f8 01       	movw	r30, r16
    12be:	83 81       	ldd	r24, Z+3	; 0x03
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	78 f4       	brcc	.+30     	; 0x12e2 <__stack+0x9e3>
    12c4:	4b b1       	in	r20, 0x0b	; 11
    12c6:	87 70       	andi	r24, 0x07	; 7
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	b9 01       	movw	r22, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <__stack+0x9d5>
    12d0:	66 0f       	add	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <__stack+0x9d1>
    12d8:	cb 01       	movw	r24, r22
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8b b9       	out	0x0b, r24	; 11
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <__stack+0x9ff>
    12e2:	45 b1       	in	r20, 0x05	; 5
    12e4:	87 70       	andi	r24, 0x07	; 7
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	d9 01       	movw	r26, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <__stack+0x9f3>
    12ee:	aa 0f       	add	r26, r26
    12f0:	bb 1f       	adc	r27, r27
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <__stack+0x9ef>
    12f6:	cd 01       	movw	r24, r26
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    12fe:	f8 01       	movw	r30, r16
    1300:	84 81       	ldd	r24, Z+4	; 0x04
    1302:	88 30       	cpi	r24, 0x08	; 8
    1304:	78 f4       	brcc	.+30     	; 0x1324 <__stack+0xa25>
    1306:	4b b1       	in	r20, 0x0b	; 11
    1308:	87 70       	andi	r24, 0x07	; 7
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	b9 01       	movw	r22, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <__stack+0xa17>
    1312:	66 0f       	add	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <__stack+0xa13>
    131a:	cb 01       	movw	r24, r22
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8b b9       	out	0x0b, r24	; 11
    1322:	0e c0       	rjmp	.+28     	; 0x1340 <__stack+0xa41>
    1324:	45 b1       	in	r20, 0x05	; 5
    1326:	87 70       	andi	r24, 0x07	; 7
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	d9 01       	movw	r26, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <__stack+0xa35>
    1330:	aa 0f       	add	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <__stack+0xa31>
    1338:	cd 01       	movw	r24, r26
    133a:	80 95       	com	r24
    133c:	84 23       	and	r24, r20
    133e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    1340:	f8 01       	movw	r30, r16
    1342:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	70 f4       	brcc	.+28     	; 0x1364 <__stack+0xa65>
    1348:	4b b1       	in	r20, 0x0b	; 11
    134a:	87 70       	andi	r24, 0x07	; 7
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	b9 01       	movw	r22, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <__stack+0xa59>
    1354:	66 0f       	add	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <__stack+0xa55>
    135c:	cb 01       	movw	r24, r22
    135e:	84 2b       	or	r24, r20
    1360:	8b b9       	out	0x0b, r24	; 11
    1362:	0d c0       	rjmp	.+26     	; 0x137e <__stack+0xa7f>
    1364:	45 b1       	in	r20, 0x05	; 5
    1366:	87 70       	andi	r24, 0x07	; 7
    1368:	21 e0       	ldi	r18, 0x01	; 1
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	d9 01       	movw	r26, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <__stack+0xa75>
    1370:	aa 0f       	add	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <__stack+0xa71>
    1378:	cd 01       	movw	r24, r26
    137a:	84 2b       	or	r24, r20
    137c:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    137e:	f8 01       	movw	r30, r16
    1380:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	78 f4       	brcc	.+30     	; 0x13a4 <__stack+0xaa5>
    1386:	4b b1       	in	r20, 0x0b	; 11
    1388:	87 70       	andi	r24, 0x07	; 7
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	b9 01       	movw	r22, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <__stack+0xa97>
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <__stack+0xa93>
    139a:	cb 01       	movw	r24, r22
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8b b9       	out	0x0b, r24	; 11
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <__stack+0xac1>
    13a4:	45 b1       	in	r20, 0x05	; 5
    13a6:	87 70       	andi	r24, 0x07	; 7
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	d9 01       	movw	r26, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <__stack+0xab5>
    13b0:	aa 0f       	add	r26, r26
    13b2:	bb 1f       	adc	r27, r27
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <__stack+0xab1>
    13b8:	cd 01       	movw	r24, r26
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    13c0:	f8 01       	movw	r30, r16
    13c2:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	70 f4       	brcc	.+28     	; 0x13e4 <__stack+0xae5>
    13c8:	4b b1       	in	r20, 0x0b	; 11
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	b9 01       	movw	r22, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <__stack+0xad9>
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <__stack+0xad5>
    13dc:	cb 01       	movw	r24, r22
    13de:	84 2b       	or	r24, r20
    13e0:	8b b9       	out	0x0b, r24	; 11
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <__stack+0xaff>
    13e4:	45 b1       	in	r20, 0x05	; 5
    13e6:	87 70       	andi	r24, 0x07	; 7
    13e8:	21 e0       	ldi	r18, 0x01	; 1
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	d9 01       	movw	r26, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <__stack+0xaf5>
    13f0:	aa 0f       	add	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <__stack+0xaf1>
    13f8:	cd 01       	movw	r24, r26
    13fa:	84 2b       	or	r24, r20
    13fc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fe:	b5 e0       	ldi	r27, 0x05	; 5
    1400:	ba 95       	dec	r27
    1402:	f1 f7       	brne	.-4      	; 0x1400 <__stack+0xb01>
    1404:	00 00       	nop
    1406:	f8 01       	movw	r30, r16
    1408:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    140a:	88 30       	cpi	r24, 0x08	; 8
    140c:	78 f4       	brcc	.+30     	; 0x142c <__stack+0xb2d>
    140e:	4b b1       	in	r20, 0x0b	; 11
    1410:	87 70       	andi	r24, 0x07	; 7
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <__stack+0xb1f>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <__stack+0xb1b>
    1422:	cb 01       	movw	r24, r22
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8b b9       	out	0x0b, r24	; 11
    142a:	0e c0       	rjmp	.+28     	; 0x1448 <__stack+0xb49>
    142c:	45 b1       	in	r20, 0x05	; 5
    142e:	87 70       	andi	r24, 0x07	; 7
    1430:	21 e0       	ldi	r18, 0x01	; 1
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	d9 01       	movw	r26, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <__stack+0xb3d>
    1438:	aa 0f       	add	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <__stack+0xb39>
    1440:	cd 01       	movw	r24, r26
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	85 b9       	out	0x05, r24	; 5
    1448:	ef e1       	ldi	r30, 0x1F	; 31
    144a:	f3 e0       	ldi	r31, 0x03	; 3
    144c:	31 97       	sbiw	r30, 0x01	; 1
    144e:	f1 f7       	brne	.-4      	; 0x144c <__stack+0xb4d>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <__stack+0xb53>
    1452:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    1454:	d8 01       	movw	r26, r16
    1456:	12 96       	adiw	r26, 0x02	; 2
    1458:	8c 91       	ld	r24, X
    145a:	88 30       	cpi	r24, 0x08	; 8
    145c:	78 f4       	brcc	.+30     	; 0x147c <__stack+0xb7d>
    145e:	4b b1       	in	r20, 0x0b	; 11
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	21 e0       	ldi	r18, 0x01	; 1
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	f9 01       	movw	r30, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <__stack+0xb6f>
    146a:	ee 0f       	add	r30, r30
    146c:	ff 1f       	adc	r31, r31
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <__stack+0xb6b>
    1472:	cf 01       	movw	r24, r30
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8b b9       	out	0x0b, r24	; 11
    147a:	0e c0       	rjmp	.+28     	; 0x1498 <__stack+0xb99>
    147c:	45 b1       	in	r20, 0x05	; 5
    147e:	87 70       	andi	r24, 0x07	; 7
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	b9 01       	movw	r22, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <__stack+0xb8d>
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <__stack+0xb89>
    1490:	cb 01       	movw	r24, r22
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1498:	d8 01       	movw	r26, r16
    149a:	13 96       	adiw	r26, 0x03	; 3
    149c:	8c 91       	ld	r24, X
    149e:	88 30       	cpi	r24, 0x08	; 8
    14a0:	78 f4       	brcc	.+30     	; 0x14c0 <__stack+0xbc1>
    14a2:	4b b1       	in	r20, 0x0b	; 11
    14a4:	87 70       	andi	r24, 0x07	; 7
    14a6:	21 e0       	ldi	r18, 0x01	; 1
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	f9 01       	movw	r30, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <__stack+0xbb3>
    14ae:	ee 0f       	add	r30, r30
    14b0:	ff 1f       	adc	r31, r31
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <__stack+0xbaf>
    14b6:	cf 01       	movw	r24, r30
    14b8:	80 95       	com	r24
    14ba:	84 23       	and	r24, r20
    14bc:	8b b9       	out	0x0b, r24	; 11
    14be:	0e c0       	rjmp	.+28     	; 0x14dc <__stack+0xbdd>
    14c0:	45 b1       	in	r20, 0x05	; 5
    14c2:	87 70       	andi	r24, 0x07	; 7
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	b9 01       	movw	r22, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <__stack+0xbd1>
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <__stack+0xbcd>
    14d4:	cb 01       	movw	r24, r22
    14d6:	80 95       	com	r24
    14d8:	84 23       	and	r24, r20
    14da:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    14dc:	d8 01       	movw	r26, r16
    14de:	14 96       	adiw	r26, 0x04	; 4
    14e0:	8c 91       	ld	r24, X
    14e2:	88 30       	cpi	r24, 0x08	; 8
    14e4:	78 f4       	brcc	.+30     	; 0x1504 <__stack+0xc05>
    14e6:	4b b1       	in	r20, 0x0b	; 11
    14e8:	87 70       	andi	r24, 0x07	; 7
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	f9 01       	movw	r30, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <__stack+0xbf7>
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <__stack+0xbf3>
    14fa:	cf 01       	movw	r24, r30
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8b b9       	out	0x0b, r24	; 11
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <__stack+0xc21>
    1504:	45 b1       	in	r20, 0x05	; 5
    1506:	87 70       	andi	r24, 0x07	; 7
    1508:	21 e0       	ldi	r18, 0x01	; 1
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	b9 01       	movw	r22, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <__stack+0xc15>
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <__stack+0xc11>
    1518:	cb 01       	movw	r24, r22
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1520:	d8 01       	movw	r26, r16
    1522:	15 96       	adiw	r26, 0x05	; 5
    1524:	8c 91       	ld	r24, X
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	78 f4       	brcc	.+30     	; 0x1548 <__stack+0xc49>
    152a:	4b b1       	in	r20, 0x0b	; 11
    152c:	87 70       	andi	r24, 0x07	; 7
    152e:	21 e0       	ldi	r18, 0x01	; 1
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	f9 01       	movw	r30, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <__stack+0xc3b>
    1536:	ee 0f       	add	r30, r30
    1538:	ff 1f       	adc	r31, r31
    153a:	8a 95       	dec	r24
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <__stack+0xc37>
    153e:	cf 01       	movw	r24, r30
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8b b9       	out	0x0b, r24	; 11
    1546:	0e c0       	rjmp	.+28     	; 0x1564 <__stack+0xc65>
    1548:	45 b1       	in	r20, 0x05	; 5
    154a:	87 70       	andi	r24, 0x07	; 7
    154c:	21 e0       	ldi	r18, 0x01	; 1
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	b9 01       	movw	r22, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <__stack+0xc59>
    1554:	66 0f       	add	r22, r22
    1556:	77 1f       	adc	r23, r23
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <__stack+0xc55>
    155c:	cb 01       	movw	r24, r22
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1564:	d8 01       	movw	r26, r16
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    156a:	88 30       	cpi	r24, 0x08	; 8
    156c:	70 f4       	brcc	.+28     	; 0x158a <__stack+0xc8b>
    156e:	4b b1       	in	r20, 0x0b	; 11
    1570:	87 70       	andi	r24, 0x07	; 7
    1572:	21 e0       	ldi	r18, 0x01	; 1
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	02 c0       	rjmp	.+4      	; 0x157e <__stack+0xc7f>
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	8a 95       	dec	r24
    1580:	e2 f7       	brpl	.-8      	; 0x157a <__stack+0xc7b>
    1582:	cf 01       	movw	r24, r30
    1584:	84 2b       	or	r24, r20
    1586:	8b b9       	out	0x0b, r24	; 11
    1588:	0d c0       	rjmp	.+26     	; 0x15a4 <__stack+0xca5>
    158a:	45 b1       	in	r20, 0x05	; 5
    158c:	87 70       	andi	r24, 0x07	; 7
    158e:	21 e0       	ldi	r18, 0x01	; 1
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	b9 01       	movw	r22, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <__stack+0xc9b>
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	8a 95       	dec	r24
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <__stack+0xc97>
    159e:	cb 01       	movw	r24, r22
    15a0:	84 2b       	or	r24, r20
    15a2:	85 b9       	out	0x05, r24	; 5
    15a4:	75 e0       	ldi	r23, 0x05	; 5
    15a6:	7a 95       	dec	r23
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <__stack+0xca7>
    15aa:	00 00       	nop
    15ac:	d8 01       	movw	r26, r16
    15ae:	11 96       	adiw	r26, 0x01	; 1
    15b0:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    15b2:	88 30       	cpi	r24, 0x08	; 8
    15b4:	78 f4       	brcc	.+30     	; 0x15d4 <__stack+0xcd5>
    15b6:	4b b1       	in	r20, 0x0b	; 11
    15b8:	87 70       	andi	r24, 0x07	; 7
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <__stack+0xcc7>
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <__stack+0xcc3>
    15ca:	cf 01       	movw	r24, r30
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8b b9       	out	0x0b, r24	; 11
    15d2:	0e c0       	rjmp	.+28     	; 0x15f0 <__stack+0xcf1>
    15d4:	45 b1       	in	r20, 0x05	; 5
    15d6:	87 70       	andi	r24, 0x07	; 7
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	b9 01       	movw	r22, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <__stack+0xce5>
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	8a 95       	dec	r24
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <__stack+0xce1>
    15e8:	cb 01       	movw	r24, r22
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15f0:	8f e3       	ldi	r24, 0x3F	; 63
    15f2:	9f e1       	ldi	r25, 0x1F	; 31
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <__stack+0xcf5>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <__stack+0xcfb>
    15fa:	00 00       	nop
			}
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
    15fc:	60 e8       	ldi	r22, 0x80	; 128
    15fe:	c8 01       	movw	r24, r16
    1600:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
    1604:	e6 e0       	ldi	r30, 0x06	; 6
    1606:	f1 e0       	ldi	r31, 0x01	; 1
    1608:	2a e5       	ldi	r18, 0x5A	; 90
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	04 c0       	rjmp	.+8      	; 0x161c <__stack+0xd1d>
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    1614:	20 81       	ld	r18, Z
    1616:	22 23       	and	r18, r18
    1618:	09 f4       	brne	.+2      	; 0x161c <__stack+0xd1d>
    161a:	03 c4       	rjmp	.+2054   	; 0x1e22 <__stack+0x1523>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
    161c:	40 31       	cpi	r20, 0x10	; 16
    161e:	51 05       	cpc	r21, r1
    1620:	19 f0       	breq	.+6      	; 0x1628 <__stack+0xd29>
    1622:	2a 30       	cpi	r18, 0x0A	; 10
    1624:	09 f0       	breq	.+2      	; 0x1628 <__stack+0xd29>
    1626:	91 c1       	rjmp	.+802    	; 0x194a <__stack+0x104b>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    1628:	d8 01       	movw	r26, r16
    162a:	12 96       	adiw	r26, 0x02	; 2
    162c:	2c 91       	ld	r18, X
    162e:	28 30       	cpi	r18, 0x08	; 8
    1630:	68 f4       	brcc	.+26     	; 0x164c <__stack+0xd4d>
    1632:	3b b1       	in	r19, 0x0b	; 11
    1634:	27 70       	andi	r18, 0x07	; 7
    1636:	bc 01       	movw	r22, r24
    1638:	02 c0       	rjmp	.+4      	; 0x163e <__stack+0xd3f>
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	2a 95       	dec	r18
    1640:	e2 f7       	brpl	.-8      	; 0x163a <__stack+0xd3b>
    1642:	26 2f       	mov	r18, r22
    1644:	20 95       	com	r18
    1646:	23 23       	and	r18, r19
    1648:	2b b9       	out	0x0b, r18	; 11
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <__stack+0xd65>
    164c:	35 b1       	in	r19, 0x05	; 5
    164e:	27 70       	andi	r18, 0x07	; 7
    1650:	bc 01       	movw	r22, r24
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <__stack+0xd59>
    1654:	66 0f       	add	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	2a 95       	dec	r18
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <__stack+0xd55>
    165c:	26 2f       	mov	r18, r22
    165e:	20 95       	com	r18
    1660:	23 23       	and	r18, r19
    1662:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
    1664:	d8 01       	movw	r26, r16
    1666:	13 96       	adiw	r26, 0x03	; 3
    1668:	2c 91       	ld	r18, X
    166a:	28 30       	cpi	r18, 0x08	; 8
    166c:	68 f4       	brcc	.+26     	; 0x1688 <__stack+0xd89>
    166e:	3b b1       	in	r19, 0x0b	; 11
    1670:	27 70       	andi	r18, 0x07	; 7
    1672:	bc 01       	movw	r22, r24
    1674:	02 c0       	rjmp	.+4      	; 0x167a <__stack+0xd7b>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	2a 95       	dec	r18
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <__stack+0xd77>
    167e:	26 2f       	mov	r18, r22
    1680:	20 95       	com	r18
    1682:	23 23       	and	r18, r19
    1684:	2b b9       	out	0x0b, r18	; 11
    1686:	0c c0       	rjmp	.+24     	; 0x16a0 <__stack+0xda1>
    1688:	35 b1       	in	r19, 0x05	; 5
    168a:	27 70       	andi	r18, 0x07	; 7
    168c:	bc 01       	movw	r22, r24
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <__stack+0xd95>
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	2a 95       	dec	r18
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <__stack+0xd91>
    1698:	26 2f       	mov	r18, r22
    169a:	20 95       	com	r18
    169c:	23 23       	and	r18, r19
    169e:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
    16a0:	d8 01       	movw	r26, r16
    16a2:	14 96       	adiw	r26, 0x04	; 4
    16a4:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    16a6:	28 30       	cpi	r18, 0x08	; 8
    16a8:	60 f4       	brcc	.+24     	; 0x16c2 <__stack+0xdc3>
    16aa:	6b b1       	in	r22, 0x0b	; 11
    16ac:	27 70       	andi	r18, 0x07	; 7
    16ae:	dc 01       	movw	r26, r24
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <__stack+0xdb7>
    16b2:	aa 0f       	add	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	2a 95       	dec	r18
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <__stack+0xdb3>
    16ba:	9d 01       	movw	r18, r26
    16bc:	26 2b       	or	r18, r22
    16be:	2b b9       	out	0x0b, r18	; 11
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <__stack+0xdd9>
    16c2:	65 b1       	in	r22, 0x05	; 5
    16c4:	27 70       	andi	r18, 0x07	; 7
    16c6:	dc 01       	movw	r26, r24
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <__stack+0xdcf>
    16ca:	aa 0f       	add	r26, r26
    16cc:	bb 1f       	adc	r27, r27
    16ce:	2a 95       	dec	r18
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <__stack+0xdcb>
    16d2:	9d 01       	movw	r18, r26
    16d4:	26 2b       	or	r18, r22
    16d6:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
    16d8:	d8 01       	movw	r26, r16
    16da:	15 96       	adiw	r26, 0x05	; 5
    16dc:	2c 91       	ld	r18, X
    16de:	28 30       	cpi	r18, 0x08	; 8
    16e0:	60 f4       	brcc	.+24     	; 0x16fa <__stack+0xdfb>
    16e2:	6b b1       	in	r22, 0x0b	; 11
    16e4:	27 70       	andi	r18, 0x07	; 7
    16e6:	dc 01       	movw	r26, r24
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <__stack+0xdef>
    16ea:	aa 0f       	add	r26, r26
    16ec:	bb 1f       	adc	r27, r27
    16ee:	2a 95       	dec	r18
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <__stack+0xdeb>
    16f2:	9d 01       	movw	r18, r26
    16f4:	26 2b       	or	r18, r22
    16f6:	2b b9       	out	0x0b, r18	; 11
    16f8:	0b c0       	rjmp	.+22     	; 0x1710 <__stack+0xe11>
    16fa:	65 b1       	in	r22, 0x05	; 5
    16fc:	27 70       	andi	r18, 0x07	; 7
    16fe:	dc 01       	movw	r26, r24
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <__stack+0xe07>
    1702:	aa 0f       	add	r26, r26
    1704:	bb 1f       	adc	r27, r27
    1706:	2a 95       	dec	r18
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <__stack+0xe03>
    170a:	9d 01       	movw	r18, r26
    170c:	26 2b       	or	r18, r22
    170e:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    1710:	d8 01       	movw	r26, r16
    1712:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1714:	28 30       	cpi	r18, 0x08	; 8
    1716:	68 f4       	brcc	.+26     	; 0x1732 <__stack+0xe33>
    1718:	3b b1       	in	r19, 0x0b	; 11
    171a:	27 70       	andi	r18, 0x07	; 7
    171c:	bc 01       	movw	r22, r24
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <__stack+0xe25>
    1720:	66 0f       	add	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	2a 95       	dec	r18
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <__stack+0xe21>
    1728:	26 2f       	mov	r18, r22
    172a:	20 95       	com	r18
    172c:	23 23       	and	r18, r19
    172e:	2b b9       	out	0x0b, r18	; 11
    1730:	0c c0       	rjmp	.+24     	; 0x174a <__stack+0xe4b>
    1732:	35 b1       	in	r19, 0x05	; 5
    1734:	27 70       	andi	r18, 0x07	; 7
    1736:	bc 01       	movw	r22, r24
    1738:	02 c0       	rjmp	.+4      	; 0x173e <__stack+0xe3f>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	2a 95       	dec	r18
    1740:	e2 f7       	brpl	.-8      	; 0x173a <__stack+0xe3b>
    1742:	26 2f       	mov	r18, r22
    1744:	20 95       	com	r18
    1746:	23 23       	and	r18, r19
    1748:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    174a:	d8 01       	movw	r26, r16
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1750:	28 30       	cpi	r18, 0x08	; 8
    1752:	60 f4       	brcc	.+24     	; 0x176c <__stack+0xe6d>
    1754:	6b b1       	in	r22, 0x0b	; 11
    1756:	27 70       	andi	r18, 0x07	; 7
    1758:	dc 01       	movw	r26, r24
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <__stack+0xe61>
    175c:	aa 0f       	add	r26, r26
    175e:	bb 1f       	adc	r27, r27
    1760:	2a 95       	dec	r18
    1762:	e2 f7       	brpl	.-8      	; 0x175c <__stack+0xe5d>
    1764:	9d 01       	movw	r18, r26
    1766:	26 2b       	or	r18, r22
    1768:	2b b9       	out	0x0b, r18	; 11
    176a:	0b c0       	rjmp	.+22     	; 0x1782 <__stack+0xe83>
    176c:	65 b1       	in	r22, 0x05	; 5
    176e:	27 70       	andi	r18, 0x07	; 7
    1770:	dc 01       	movw	r26, r24
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <__stack+0xe79>
    1774:	aa 0f       	add	r26, r26
    1776:	bb 1f       	adc	r27, r27
    1778:	2a 95       	dec	r18
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <__stack+0xe75>
    177c:	9d 01       	movw	r18, r26
    177e:	26 2b       	or	r18, r22
    1780:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1782:	b5 e0       	ldi	r27, 0x05	; 5
    1784:	ba 95       	dec	r27
    1786:	f1 f7       	brne	.-4      	; 0x1784 <__stack+0xe85>
    1788:	00 00       	nop
    178a:	d8 01       	movw	r26, r16
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1790:	28 30       	cpi	r18, 0x08	; 8
    1792:	68 f4       	brcc	.+26     	; 0x17ae <__stack+0xeaf>
    1794:	3b b1       	in	r19, 0x0b	; 11
    1796:	27 70       	andi	r18, 0x07	; 7
    1798:	bc 01       	movw	r22, r24
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <__stack+0xea1>
    179c:	66 0f       	add	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <__stack+0xe9d>
    17a4:	26 2f       	mov	r18, r22
    17a6:	20 95       	com	r18
    17a8:	23 23       	and	r18, r19
    17aa:	2b b9       	out	0x0b, r18	; 11
    17ac:	0c c0       	rjmp	.+24     	; 0x17c6 <__stack+0xec7>
    17ae:	35 b1       	in	r19, 0x05	; 5
    17b0:	27 70       	andi	r18, 0x07	; 7
    17b2:	bc 01       	movw	r22, r24
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <__stack+0xebb>
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	2a 95       	dec	r18
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <__stack+0xeb7>
    17be:	26 2f       	mov	r18, r22
    17c0:	20 95       	com	r18
    17c2:	23 23       	and	r18, r19
    17c4:	25 b9       	out	0x05, r18	; 5
    17c6:	af e1       	ldi	r26, 0x1F	; 31
    17c8:	b3 e0       	ldi	r27, 0x03	; 3
    17ca:	11 97       	sbiw	r26, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <__stack+0xecb>
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <__stack+0xed1>
    17d0:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    17d2:	d8 01       	movw	r26, r16
    17d4:	12 96       	adiw	r26, 0x02	; 2
    17d6:	2c 91       	ld	r18, X
    17d8:	28 30       	cpi	r18, 0x08	; 8
    17da:	68 f4       	brcc	.+26     	; 0x17f6 <__stack+0xef7>
    17dc:	3b b1       	in	r19, 0x0b	; 11
    17de:	27 70       	andi	r18, 0x07	; 7
    17e0:	bc 01       	movw	r22, r24
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <__stack+0xee9>
    17e4:	66 0f       	add	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	2a 95       	dec	r18
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <__stack+0xee5>
    17ec:	26 2f       	mov	r18, r22
    17ee:	20 95       	com	r18
    17f0:	23 23       	and	r18, r19
    17f2:	2b b9       	out	0x0b, r18	; 11
    17f4:	0c c0       	rjmp	.+24     	; 0x180e <__stack+0xf0f>
    17f6:	35 b1       	in	r19, 0x05	; 5
    17f8:	27 70       	andi	r18, 0x07	; 7
    17fa:	bc 01       	movw	r22, r24
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <__stack+0xf03>
    17fe:	66 0f       	add	r22, r22
    1800:	77 1f       	adc	r23, r23
    1802:	2a 95       	dec	r18
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <__stack+0xeff>
    1806:	26 2f       	mov	r18, r22
    1808:	20 95       	com	r18
    180a:	23 23       	and	r18, r19
    180c:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    180e:	d8 01       	movw	r26, r16
    1810:	13 96       	adiw	r26, 0x03	; 3
    1812:	2c 91       	ld	r18, X
    1814:	28 30       	cpi	r18, 0x08	; 8
    1816:	68 f4       	brcc	.+26     	; 0x1832 <__stack+0xf33>
    1818:	3b b1       	in	r19, 0x0b	; 11
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	bc 01       	movw	r22, r24
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <__stack+0xf25>
    1820:	66 0f       	add	r22, r22
    1822:	77 1f       	adc	r23, r23
    1824:	2a 95       	dec	r18
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <__stack+0xf21>
    1828:	26 2f       	mov	r18, r22
    182a:	20 95       	com	r18
    182c:	23 23       	and	r18, r19
    182e:	2b b9       	out	0x0b, r18	; 11
    1830:	0c c0       	rjmp	.+24     	; 0x184a <__stack+0xf4b>
    1832:	35 b1       	in	r19, 0x05	; 5
    1834:	27 70       	andi	r18, 0x07	; 7
    1836:	bc 01       	movw	r22, r24
    1838:	02 c0       	rjmp	.+4      	; 0x183e <__stack+0xf3f>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	2a 95       	dec	r18
    1840:	e2 f7       	brpl	.-8      	; 0x183a <__stack+0xf3b>
    1842:	26 2f       	mov	r18, r22
    1844:	20 95       	com	r18
    1846:	23 23       	and	r18, r19
    1848:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    184a:	d8 01       	movw	r26, r16
    184c:	14 96       	adiw	r26, 0x04	; 4
    184e:	2c 91       	ld	r18, X
    1850:	28 30       	cpi	r18, 0x08	; 8
    1852:	68 f4       	brcc	.+26     	; 0x186e <__stack+0xf6f>
    1854:	3b b1       	in	r19, 0x0b	; 11
    1856:	27 70       	andi	r18, 0x07	; 7
    1858:	bc 01       	movw	r22, r24
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <__stack+0xf61>
    185c:	66 0f       	add	r22, r22
    185e:	77 1f       	adc	r23, r23
    1860:	2a 95       	dec	r18
    1862:	e2 f7       	brpl	.-8      	; 0x185c <__stack+0xf5d>
    1864:	26 2f       	mov	r18, r22
    1866:	20 95       	com	r18
    1868:	23 23       	and	r18, r19
    186a:	2b b9       	out	0x0b, r18	; 11
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <__stack+0xf87>
    186e:	35 b1       	in	r19, 0x05	; 5
    1870:	27 70       	andi	r18, 0x07	; 7
    1872:	bc 01       	movw	r22, r24
    1874:	02 c0       	rjmp	.+4      	; 0x187a <__stack+0xf7b>
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	2a 95       	dec	r18
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <__stack+0xf77>
    187e:	26 2f       	mov	r18, r22
    1880:	20 95       	com	r18
    1882:	23 23       	and	r18, r19
    1884:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1886:	d8 01       	movw	r26, r16
    1888:	15 96       	adiw	r26, 0x05	; 5
    188a:	2c 91       	ld	r18, X
    188c:	28 30       	cpi	r18, 0x08	; 8
    188e:	68 f4       	brcc	.+26     	; 0x18aa <__stack+0xfab>
    1890:	3b b1       	in	r19, 0x0b	; 11
    1892:	27 70       	andi	r18, 0x07	; 7
    1894:	bc 01       	movw	r22, r24
    1896:	02 c0       	rjmp	.+4      	; 0x189c <__stack+0xf9d>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	2a 95       	dec	r18
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <__stack+0xf99>
    18a0:	26 2f       	mov	r18, r22
    18a2:	20 95       	com	r18
    18a4:	23 23       	and	r18, r19
    18a6:	2b b9       	out	0x0b, r18	; 11
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <__stack+0xfc3>
    18aa:	35 b1       	in	r19, 0x05	; 5
    18ac:	27 70       	andi	r18, 0x07	; 7
    18ae:	bc 01       	movw	r22, r24
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <__stack+0xfb7>
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	2a 95       	dec	r18
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <__stack+0xfb3>
    18ba:	26 2f       	mov	r18, r22
    18bc:	20 95       	com	r18
    18be:	23 23       	and	r18, r19
    18c0:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    18c2:	d8 01       	movw	r26, r16
    18c4:	11 96       	adiw	r26, 0x01	; 1
    18c6:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    18c8:	28 30       	cpi	r18, 0x08	; 8
    18ca:	60 f4       	brcc	.+24     	; 0x18e4 <__stack+0xfe5>
    18cc:	6b b1       	in	r22, 0x0b	; 11
    18ce:	27 70       	andi	r18, 0x07	; 7
    18d0:	dc 01       	movw	r26, r24
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <__stack+0xfd9>
    18d4:	aa 0f       	add	r26, r26
    18d6:	bb 1f       	adc	r27, r27
    18d8:	2a 95       	dec	r18
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <__stack+0xfd5>
    18dc:	9d 01       	movw	r18, r26
    18de:	26 2b       	or	r18, r22
    18e0:	2b b9       	out	0x0b, r18	; 11
    18e2:	0b c0       	rjmp	.+22     	; 0x18fa <__stack+0xffb>
    18e4:	65 b1       	in	r22, 0x05	; 5
    18e6:	27 70       	andi	r18, 0x07	; 7
    18e8:	dc 01       	movw	r26, r24
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <__stack+0xff1>
    18ec:	aa 0f       	add	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	2a 95       	dec	r18
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <__stack+0xfed>
    18f4:	9d 01       	movw	r18, r26
    18f6:	26 2b       	or	r18, r22
    18f8:	25 b9       	out	0x05, r18	; 5
    18fa:	b5 e0       	ldi	r27, 0x05	; 5
    18fc:	ba 95       	dec	r27
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <__stack+0xffd>
    1900:	00 00       	nop
    1902:	d8 01       	movw	r26, r16
    1904:	11 96       	adiw	r26, 0x01	; 1
    1906:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1908:	28 30       	cpi	r18, 0x08	; 8
    190a:	68 f4       	brcc	.+26     	; 0x1926 <__stack+0x1027>
    190c:	3b b1       	in	r19, 0x0b	; 11
    190e:	27 70       	andi	r18, 0x07	; 7
    1910:	bc 01       	movw	r22, r24
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <__stack+0x1019>
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	2a 95       	dec	r18
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <__stack+0x1015>
    191c:	26 2f       	mov	r18, r22
    191e:	20 95       	com	r18
    1920:	23 23       	and	r18, r19
    1922:	2b b9       	out	0x0b, r18	; 11
    1924:	0c c0       	rjmp	.+24     	; 0x193e <__stack+0x103f>
    1926:	35 b1       	in	r19, 0x05	; 5
    1928:	27 70       	andi	r18, 0x07	; 7
    192a:	bc 01       	movw	r22, r24
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <__stack+0x1033>
    192e:	66 0f       	add	r22, r22
    1930:	77 1f       	adc	r23, r23
    1932:	2a 95       	dec	r18
    1934:	e2 f7       	brpl	.-8      	; 0x192e <__stack+0x102f>
    1936:	26 2f       	mov	r18, r22
    1938:	20 95       	com	r18
    193a:	23 23       	and	r18, r19
    193c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    193e:	af e3       	ldi	r26, 0x3F	; 63
    1940:	bf e1       	ldi	r27, 0x1F	; 31
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <__stack+0x1043>
    1946:	00 c0       	rjmp	.+0      	; 0x1948 <__stack+0x1049>
    1948:	00 00       	nop
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    194a:	21 91       	ld	r18, Z+
namespace zeduino {
	
	namespace util {
		
		inline uint8 get_bit(byte w, uint8 pos) {
			return _GET_BIT(w, pos);
    194c:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    194e:	d8 01       	movw	r26, r16
    1950:	12 96       	adiw	r26, 0x02	; 2
    1952:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1954:	24 ff       	sbrs	r18, 4
    1956:	18 c0       	rjmp	.+48     	; 0x1988 <__stack+0x1089>
    1958:	38 30       	cpi	r19, 0x08	; 8
    195a:	58 f4       	brcc	.+22     	; 0x1972 <__stack+0x1073>
    195c:	7b b1       	in	r23, 0x0b	; 11
    195e:	37 70       	andi	r19, 0x07	; 7
    1960:	dc 01       	movw	r26, r24
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <__stack+0x1069>
    1964:	aa 0f       	add	r26, r26
    1966:	bb 1f       	adc	r27, r27
    1968:	3a 95       	dec	r19
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <__stack+0x1065>
    196c:	a7 2b       	or	r26, r23
    196e:	ab b9       	out	0x0b, r26	; 11
    1970:	26 c0       	rjmp	.+76     	; 0x19be <__stack+0x10bf>
    1972:	75 b1       	in	r23, 0x05	; 5
    1974:	37 70       	andi	r19, 0x07	; 7
    1976:	dc 01       	movw	r26, r24
    1978:	02 c0       	rjmp	.+4      	; 0x197e <__stack+0x107f>
    197a:	aa 0f       	add	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	3a 95       	dec	r19
    1980:	e2 f7       	brpl	.-8      	; 0x197a <__stack+0x107b>
    1982:	a7 2b       	or	r26, r23
    1984:	a5 b9       	out	0x05, r26	; 5
    1986:	1b c0       	rjmp	.+54     	; 0x19be <__stack+0x10bf>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1988:	38 30       	cpi	r19, 0x08	; 8
    198a:	68 f4       	brcc	.+26     	; 0x19a6 <__stack+0x10a7>
    198c:	7b b1       	in	r23, 0x0b	; 11
    198e:	37 70       	andi	r19, 0x07	; 7
    1990:	dc 01       	movw	r26, r24
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <__stack+0x1099>
    1994:	aa 0f       	add	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	3a 95       	dec	r19
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <__stack+0x1095>
    199c:	3a 2f       	mov	r19, r26
    199e:	30 95       	com	r19
    19a0:	37 23       	and	r19, r23
    19a2:	3b b9       	out	0x0b, r19	; 11
    19a4:	0c c0       	rjmp	.+24     	; 0x19be <__stack+0x10bf>
    19a6:	75 b1       	in	r23, 0x05	; 5
    19a8:	37 70       	andi	r19, 0x07	; 7
    19aa:	dc 01       	movw	r26, r24
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <__stack+0x10b3>
    19ae:	aa 0f       	add	r26, r26
    19b0:	bb 1f       	adc	r27, r27
    19b2:	3a 95       	dec	r19
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <__stack+0x10af>
    19b6:	3a 2f       	mov	r19, r26
    19b8:	30 95       	com	r19
    19ba:	37 23       	and	r19, r23
    19bc:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    19be:	d8 01       	movw	r26, r16
    19c0:	13 96       	adiw	r26, 0x03	; 3
    19c2:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    19c4:	25 ff       	sbrs	r18, 5
    19c6:	18 c0       	rjmp	.+48     	; 0x19f8 <__stack+0x10f9>
    19c8:	38 30       	cpi	r19, 0x08	; 8
    19ca:	58 f4       	brcc	.+22     	; 0x19e2 <__stack+0x10e3>
    19cc:	7b b1       	in	r23, 0x0b	; 11
    19ce:	37 70       	andi	r19, 0x07	; 7
    19d0:	dc 01       	movw	r26, r24
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <__stack+0x10d9>
    19d4:	aa 0f       	add	r26, r26
    19d6:	bb 1f       	adc	r27, r27
    19d8:	3a 95       	dec	r19
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <__stack+0x10d5>
    19dc:	a7 2b       	or	r26, r23
    19de:	ab b9       	out	0x0b, r26	; 11
    19e0:	26 c0       	rjmp	.+76     	; 0x1a2e <__stack+0x112f>
    19e2:	75 b1       	in	r23, 0x05	; 5
    19e4:	37 70       	andi	r19, 0x07	; 7
    19e6:	dc 01       	movw	r26, r24
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <__stack+0x10ef>
    19ea:	aa 0f       	add	r26, r26
    19ec:	bb 1f       	adc	r27, r27
    19ee:	3a 95       	dec	r19
    19f0:	e2 f7       	brpl	.-8      	; 0x19ea <__stack+0x10eb>
    19f2:	a7 2b       	or	r26, r23
    19f4:	a5 b9       	out	0x05, r26	; 5
    19f6:	1b c0       	rjmp	.+54     	; 0x1a2e <__stack+0x112f>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    19f8:	38 30       	cpi	r19, 0x08	; 8
    19fa:	68 f4       	brcc	.+26     	; 0x1a16 <__stack+0x1117>
    19fc:	7b b1       	in	r23, 0x0b	; 11
    19fe:	37 70       	andi	r19, 0x07	; 7
    1a00:	dc 01       	movw	r26, r24
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <__stack+0x1109>
    1a04:	aa 0f       	add	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	3a 95       	dec	r19
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <__stack+0x1105>
    1a0c:	3a 2f       	mov	r19, r26
    1a0e:	30 95       	com	r19
    1a10:	37 23       	and	r19, r23
    1a12:	3b b9       	out	0x0b, r19	; 11
    1a14:	0c c0       	rjmp	.+24     	; 0x1a2e <__stack+0x112f>
    1a16:	75 b1       	in	r23, 0x05	; 5
    1a18:	37 70       	andi	r19, 0x07	; 7
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <__stack+0x1123>
    1a1e:	aa 0f       	add	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	3a 95       	dec	r19
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <__stack+0x111f>
    1a26:	3a 2f       	mov	r19, r26
    1a28:	30 95       	com	r19
    1a2a:	37 23       	and	r19, r23
    1a2c:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    1a2e:	d8 01       	movw	r26, r16
    1a30:	14 96       	adiw	r26, 0x04	; 4
    1a32:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1a34:	26 ff       	sbrs	r18, 6
    1a36:	18 c0       	rjmp	.+48     	; 0x1a68 <__stack+0x1169>
    1a38:	38 30       	cpi	r19, 0x08	; 8
    1a3a:	58 f4       	brcc	.+22     	; 0x1a52 <__stack+0x1153>
    1a3c:	7b b1       	in	r23, 0x0b	; 11
    1a3e:	37 70       	andi	r19, 0x07	; 7
    1a40:	dc 01       	movw	r26, r24
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <__stack+0x1149>
    1a44:	aa 0f       	add	r26, r26
    1a46:	bb 1f       	adc	r27, r27
    1a48:	3a 95       	dec	r19
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <__stack+0x1145>
    1a4c:	a7 2b       	or	r26, r23
    1a4e:	ab b9       	out	0x0b, r26	; 11
    1a50:	26 c0       	rjmp	.+76     	; 0x1a9e <__stack+0x119f>
    1a52:	75 b1       	in	r23, 0x05	; 5
    1a54:	37 70       	andi	r19, 0x07	; 7
    1a56:	dc 01       	movw	r26, r24
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <__stack+0x115f>
    1a5a:	aa 0f       	add	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	3a 95       	dec	r19
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <__stack+0x115b>
    1a62:	a7 2b       	or	r26, r23
    1a64:	a5 b9       	out	0x05, r26	; 5
    1a66:	1b c0       	rjmp	.+54     	; 0x1a9e <__stack+0x119f>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1a68:	38 30       	cpi	r19, 0x08	; 8
    1a6a:	68 f4       	brcc	.+26     	; 0x1a86 <__stack+0x1187>
    1a6c:	7b b1       	in	r23, 0x0b	; 11
    1a6e:	37 70       	andi	r19, 0x07	; 7
    1a70:	dc 01       	movw	r26, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <__stack+0x1179>
    1a74:	aa 0f       	add	r26, r26
    1a76:	bb 1f       	adc	r27, r27
    1a78:	3a 95       	dec	r19
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <__stack+0x1175>
    1a7c:	3a 2f       	mov	r19, r26
    1a7e:	30 95       	com	r19
    1a80:	37 23       	and	r19, r23
    1a82:	3b b9       	out	0x0b, r19	; 11
    1a84:	0c c0       	rjmp	.+24     	; 0x1a9e <__stack+0x119f>
    1a86:	75 b1       	in	r23, 0x05	; 5
    1a88:	37 70       	andi	r19, 0x07	; 7
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <__stack+0x1193>
    1a8e:	aa 0f       	add	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	3a 95       	dec	r19
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <__stack+0x118f>
    1a96:	3a 2f       	mov	r19, r26
    1a98:	30 95       	com	r19
    1a9a:	37 23       	and	r19, r23
    1a9c:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    1a9e:	d8 01       	movw	r26, r16
    1aa0:	15 96       	adiw	r26, 0x05	; 5
    1aa2:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1aa4:	66 23       	and	r22, r22
    1aa6:	c4 f4       	brge	.+48     	; 0x1ad8 <__stack+0x11d9>
    1aa8:	38 30       	cpi	r19, 0x08	; 8
    1aaa:	58 f4       	brcc	.+22     	; 0x1ac2 <__stack+0x11c3>
    1aac:	ab b1       	in	r26, 0x0b	; 11
    1aae:	37 70       	andi	r19, 0x07	; 7
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <__stack+0x11b9>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	3a 95       	dec	r19
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <__stack+0x11b5>
    1abc:	6a 2b       	or	r22, r26
    1abe:	6b b9       	out	0x0b, r22	; 11
    1ac0:	26 c0       	rjmp	.+76     	; 0x1b0e <__stack+0x120f>
    1ac2:	a5 b1       	in	r26, 0x05	; 5
    1ac4:	37 70       	andi	r19, 0x07	; 7
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <__stack+0x11cf>
    1aca:	66 0f       	add	r22, r22
    1acc:	77 1f       	adc	r23, r23
    1ace:	3a 95       	dec	r19
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <__stack+0x11cb>
    1ad2:	6a 2b       	or	r22, r26
    1ad4:	65 b9       	out	0x05, r22	; 5
    1ad6:	1b c0       	rjmp	.+54     	; 0x1b0e <__stack+0x120f>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1ad8:	38 30       	cpi	r19, 0x08	; 8
    1ada:	68 f4       	brcc	.+26     	; 0x1af6 <__stack+0x11f7>
    1adc:	6b b1       	in	r22, 0x0b	; 11
    1ade:	37 70       	andi	r19, 0x07	; 7
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <__stack+0x11e9>
    1ae4:	aa 0f       	add	r26, r26
    1ae6:	bb 1f       	adc	r27, r27
    1ae8:	3a 95       	dec	r19
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <__stack+0x11e5>
    1aec:	3a 2f       	mov	r19, r26
    1aee:	30 95       	com	r19
    1af0:	36 23       	and	r19, r22
    1af2:	3b b9       	out	0x0b, r19	; 11
    1af4:	0c c0       	rjmp	.+24     	; 0x1b0e <__stack+0x120f>
    1af6:	65 b1       	in	r22, 0x05	; 5
    1af8:	37 70       	andi	r19, 0x07	; 7
    1afa:	dc 01       	movw	r26, r24
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <__stack+0x1203>
    1afe:	aa 0f       	add	r26, r26
    1b00:	bb 1f       	adc	r27, r27
    1b02:	3a 95       	dec	r19
    1b04:	e2 f7       	brpl	.-8      	; 0x1afe <__stack+0x11ff>
    1b06:	3a 2f       	mov	r19, r26
    1b08:	30 95       	com	r19
    1b0a:	36 23       	and	r19, r22
    1b0c:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    1b0e:	d8 01       	movw	r26, r16
    1b10:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1b12:	38 30       	cpi	r19, 0x08	; 8
    1b14:	58 f4       	brcc	.+22     	; 0x1b2c <__stack+0x122d>
    1b16:	ab b1       	in	r26, 0x0b	; 11
    1b18:	37 70       	andi	r19, 0x07	; 7
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <__stack+0x1223>
    1b1e:	66 0f       	add	r22, r22
    1b20:	77 1f       	adc	r23, r23
    1b22:	3a 95       	dec	r19
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <__stack+0x121f>
    1b26:	6a 2b       	or	r22, r26
    1b28:	6b b9       	out	0x0b, r22	; 11
    1b2a:	0a c0       	rjmp	.+20     	; 0x1b40 <__stack+0x1241>
    1b2c:	a5 b1       	in	r26, 0x05	; 5
    1b2e:	37 70       	andi	r19, 0x07	; 7
    1b30:	bc 01       	movw	r22, r24
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <__stack+0x1239>
    1b34:	66 0f       	add	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	3a 95       	dec	r19
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <__stack+0x1235>
    1b3c:	6a 2b       	or	r22, r26
    1b3e:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1b40:	d8 01       	movw	r26, r16
    1b42:	11 96       	adiw	r26, 0x01	; 1
    1b44:	3c 91       	ld	r19, X
    1b46:	38 30       	cpi	r19, 0x08	; 8
    1b48:	58 f4       	brcc	.+22     	; 0x1b60 <__stack+0x1261>
    1b4a:	ab b1       	in	r26, 0x0b	; 11
    1b4c:	37 70       	andi	r19, 0x07	; 7
    1b4e:	bc 01       	movw	r22, r24
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <__stack+0x1257>
    1b52:	66 0f       	add	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	3a 95       	dec	r19
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <__stack+0x1253>
    1b5a:	6a 2b       	or	r22, r26
    1b5c:	6b b9       	out	0x0b, r22	; 11
    1b5e:	0a c0       	rjmp	.+20     	; 0x1b74 <__stack+0x1275>
    1b60:	a5 b1       	in	r26, 0x05	; 5
    1b62:	37 70       	andi	r19, 0x07	; 7
    1b64:	bc 01       	movw	r22, r24
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <__stack+0x126d>
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	3a 95       	dec	r19
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <__stack+0x1269>
    1b70:	6a 2b       	or	r22, r26
    1b72:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b74:	b5 e0       	ldi	r27, 0x05	; 5
    1b76:	ba 95       	dec	r27
    1b78:	f1 f7       	brne	.-4      	; 0x1b76 <__stack+0x1277>
    1b7a:	00 00       	nop
    1b7c:	d8 01       	movw	r26, r16
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	3c 91       	ld	r19, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1b82:	38 30       	cpi	r19, 0x08	; 8
    1b84:	68 f4       	brcc	.+26     	; 0x1ba0 <__stack+0x12a1>
    1b86:	6b b1       	in	r22, 0x0b	; 11
    1b88:	37 70       	andi	r19, 0x07	; 7
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <__stack+0x1293>
    1b8e:	aa 0f       	add	r26, r26
    1b90:	bb 1f       	adc	r27, r27
    1b92:	3a 95       	dec	r19
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <__stack+0x128f>
    1b96:	3a 2f       	mov	r19, r26
    1b98:	30 95       	com	r19
    1b9a:	36 23       	and	r19, r22
    1b9c:	3b b9       	out	0x0b, r19	; 11
    1b9e:	0c c0       	rjmp	.+24     	; 0x1bb8 <__stack+0x12b9>
    1ba0:	65 b1       	in	r22, 0x05	; 5
    1ba2:	37 70       	andi	r19, 0x07	; 7
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <__stack+0x12ad>
    1ba8:	aa 0f       	add	r26, r26
    1baa:	bb 1f       	adc	r27, r27
    1bac:	3a 95       	dec	r19
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <__stack+0x12a9>
    1bb0:	3a 2f       	mov	r19, r26
    1bb2:	30 95       	com	r19
    1bb4:	36 23       	and	r19, r22
    1bb6:	35 b9       	out	0x05, r19	; 5
    1bb8:	af e1       	ldi	r26, 0x1F	; 31
    1bba:	b3 e0       	ldi	r27, 0x03	; 3
    1bbc:	11 97       	sbiw	r26, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <__stack+0x12bd>
    1bc0:	00 c0       	rjmp	.+0      	; 0x1bc2 <__stack+0x12c3>
    1bc2:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	12 96       	adiw	r26, 0x02	; 2
    1bc8:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1bca:	20 ff       	sbrs	r18, 0
    1bcc:	18 c0       	rjmp	.+48     	; 0x1bfe <__stack+0x12ff>
    1bce:	38 30       	cpi	r19, 0x08	; 8
    1bd0:	58 f4       	brcc	.+22     	; 0x1be8 <__stack+0x12e9>
    1bd2:	ab b1       	in	r26, 0x0b	; 11
    1bd4:	37 70       	andi	r19, 0x07	; 7
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <__stack+0x12df>
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	3a 95       	dec	r19
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <__stack+0x12db>
    1be2:	6a 2b       	or	r22, r26
    1be4:	6b b9       	out	0x0b, r22	; 11
    1be6:	26 c0       	rjmp	.+76     	; 0x1c34 <__stack+0x1335>
    1be8:	a5 b1       	in	r26, 0x05	; 5
    1bea:	37 70       	andi	r19, 0x07	; 7
    1bec:	bc 01       	movw	r22, r24
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <__stack+0x12f5>
    1bf0:	66 0f       	add	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	3a 95       	dec	r19
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <__stack+0x12f1>
    1bf8:	6a 2b       	or	r22, r26
    1bfa:	65 b9       	out	0x05, r22	; 5
    1bfc:	1b c0       	rjmp	.+54     	; 0x1c34 <__stack+0x1335>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1bfe:	38 30       	cpi	r19, 0x08	; 8
    1c00:	68 f4       	brcc	.+26     	; 0x1c1c <__stack+0x131d>
    1c02:	6b b1       	in	r22, 0x0b	; 11
    1c04:	37 70       	andi	r19, 0x07	; 7
    1c06:	dc 01       	movw	r26, r24
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <__stack+0x130f>
    1c0a:	aa 0f       	add	r26, r26
    1c0c:	bb 1f       	adc	r27, r27
    1c0e:	3a 95       	dec	r19
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <__stack+0x130b>
    1c12:	3a 2f       	mov	r19, r26
    1c14:	30 95       	com	r19
    1c16:	36 23       	and	r19, r22
    1c18:	3b b9       	out	0x0b, r19	; 11
    1c1a:	0c c0       	rjmp	.+24     	; 0x1c34 <__stack+0x1335>
    1c1c:	65 b1       	in	r22, 0x05	; 5
    1c1e:	37 70       	andi	r19, 0x07	; 7
    1c20:	dc 01       	movw	r26, r24
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <__stack+0x1329>
    1c24:	aa 0f       	add	r26, r26
    1c26:	bb 1f       	adc	r27, r27
    1c28:	3a 95       	dec	r19
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <__stack+0x1325>
    1c2c:	3a 2f       	mov	r19, r26
    1c2e:	30 95       	com	r19
    1c30:	36 23       	and	r19, r22
    1c32:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1c34:	d8 01       	movw	r26, r16
    1c36:	13 96       	adiw	r26, 0x03	; 3
    1c38:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1c3a:	21 ff       	sbrs	r18, 1
    1c3c:	18 c0       	rjmp	.+48     	; 0x1c6e <__stack+0x136f>
    1c3e:	38 30       	cpi	r19, 0x08	; 8
    1c40:	58 f4       	brcc	.+22     	; 0x1c58 <__stack+0x1359>
    1c42:	ab b1       	in	r26, 0x0b	; 11
    1c44:	37 70       	andi	r19, 0x07	; 7
    1c46:	bc 01       	movw	r22, r24
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <__stack+0x134f>
    1c4a:	66 0f       	add	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	3a 95       	dec	r19
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <__stack+0x134b>
    1c52:	6a 2b       	or	r22, r26
    1c54:	6b b9       	out	0x0b, r22	; 11
    1c56:	26 c0       	rjmp	.+76     	; 0x1ca4 <__stack+0x13a5>
    1c58:	a5 b1       	in	r26, 0x05	; 5
    1c5a:	37 70       	andi	r19, 0x07	; 7
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <__stack+0x1365>
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	3a 95       	dec	r19
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <__stack+0x1361>
    1c68:	6a 2b       	or	r22, r26
    1c6a:	65 b9       	out	0x05, r22	; 5
    1c6c:	1b c0       	rjmp	.+54     	; 0x1ca4 <__stack+0x13a5>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1c6e:	38 30       	cpi	r19, 0x08	; 8
    1c70:	68 f4       	brcc	.+26     	; 0x1c8c <__stack+0x138d>
    1c72:	6b b1       	in	r22, 0x0b	; 11
    1c74:	37 70       	andi	r19, 0x07	; 7
    1c76:	dc 01       	movw	r26, r24
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <__stack+0x137f>
    1c7a:	aa 0f       	add	r26, r26
    1c7c:	bb 1f       	adc	r27, r27
    1c7e:	3a 95       	dec	r19
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <__stack+0x137b>
    1c82:	3a 2f       	mov	r19, r26
    1c84:	30 95       	com	r19
    1c86:	36 23       	and	r19, r22
    1c88:	3b b9       	out	0x0b, r19	; 11
    1c8a:	0c c0       	rjmp	.+24     	; 0x1ca4 <__stack+0x13a5>
    1c8c:	65 b1       	in	r22, 0x05	; 5
    1c8e:	37 70       	andi	r19, 0x07	; 7
    1c90:	dc 01       	movw	r26, r24
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <__stack+0x1399>
    1c94:	aa 0f       	add	r26, r26
    1c96:	bb 1f       	adc	r27, r27
    1c98:	3a 95       	dec	r19
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <__stack+0x1395>
    1c9c:	3a 2f       	mov	r19, r26
    1c9e:	30 95       	com	r19
    1ca0:	36 23       	and	r19, r22
    1ca2:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    1ca4:	d8 01       	movw	r26, r16
    1ca6:	14 96       	adiw	r26, 0x04	; 4
    1ca8:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1caa:	22 ff       	sbrs	r18, 2
    1cac:	18 c0       	rjmp	.+48     	; 0x1cde <__stack+0x13df>
    1cae:	38 30       	cpi	r19, 0x08	; 8
    1cb0:	58 f4       	brcc	.+22     	; 0x1cc8 <__stack+0x13c9>
    1cb2:	ab b1       	in	r26, 0x0b	; 11
    1cb4:	37 70       	andi	r19, 0x07	; 7
    1cb6:	bc 01       	movw	r22, r24
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <__stack+0x13bf>
    1cba:	66 0f       	add	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	3a 95       	dec	r19
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <__stack+0x13bb>
    1cc2:	6a 2b       	or	r22, r26
    1cc4:	6b b9       	out	0x0b, r22	; 11
    1cc6:	26 c0       	rjmp	.+76     	; 0x1d14 <__stack+0x1415>
    1cc8:	a5 b1       	in	r26, 0x05	; 5
    1cca:	37 70       	andi	r19, 0x07	; 7
    1ccc:	bc 01       	movw	r22, r24
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <__stack+0x13d5>
    1cd0:	66 0f       	add	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	3a 95       	dec	r19
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <__stack+0x13d1>
    1cd8:	6a 2b       	or	r22, r26
    1cda:	65 b9       	out	0x05, r22	; 5
    1cdc:	1b c0       	rjmp	.+54     	; 0x1d14 <__stack+0x1415>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1cde:	38 30       	cpi	r19, 0x08	; 8
    1ce0:	68 f4       	brcc	.+26     	; 0x1cfc <__stack+0x13fd>
    1ce2:	6b b1       	in	r22, 0x0b	; 11
    1ce4:	37 70       	andi	r19, 0x07	; 7
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <__stack+0x13ef>
    1cea:	aa 0f       	add	r26, r26
    1cec:	bb 1f       	adc	r27, r27
    1cee:	3a 95       	dec	r19
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <__stack+0x13eb>
    1cf2:	3a 2f       	mov	r19, r26
    1cf4:	30 95       	com	r19
    1cf6:	36 23       	and	r19, r22
    1cf8:	3b b9       	out	0x0b, r19	; 11
    1cfa:	0c c0       	rjmp	.+24     	; 0x1d14 <__stack+0x1415>
    1cfc:	65 b1       	in	r22, 0x05	; 5
    1cfe:	37 70       	andi	r19, 0x07	; 7
    1d00:	dc 01       	movw	r26, r24
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <__stack+0x1409>
    1d04:	aa 0f       	add	r26, r26
    1d06:	bb 1f       	adc	r27, r27
    1d08:	3a 95       	dec	r19
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <__stack+0x1405>
    1d0c:	3a 2f       	mov	r19, r26
    1d0e:	30 95       	com	r19
    1d10:	36 23       	and	r19, r22
    1d12:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1d14:	d8 01       	movw	r26, r16
    1d16:	15 96       	adiw	r26, 0x05	; 5
    1d18:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1d1a:	23 ff       	sbrs	r18, 3
    1d1c:	1a c0       	rjmp	.+52     	; 0x1d52 <__stack+0x1453>
    1d1e:	38 30       	cpi	r19, 0x08	; 8
    1d20:	60 f4       	brcc	.+24     	; 0x1d3a <__stack+0x143b>
    1d22:	6b b1       	in	r22, 0x0b	; 11
    1d24:	37 70       	andi	r19, 0x07	; 7
    1d26:	dc 01       	movw	r26, r24
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <__stack+0x142f>
    1d2a:	aa 0f       	add	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	3a 95       	dec	r19
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <__stack+0x142b>
    1d32:	9d 01       	movw	r18, r26
    1d34:	26 2b       	or	r18, r22
    1d36:	2b b9       	out	0x0b, r18	; 11
    1d38:	27 c0       	rjmp	.+78     	; 0x1d88 <__stack+0x1489>
    1d3a:	65 b1       	in	r22, 0x05	; 5
    1d3c:	37 70       	andi	r19, 0x07	; 7
    1d3e:	dc 01       	movw	r26, r24
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <__stack+0x1447>
    1d42:	aa 0f       	add	r26, r26
    1d44:	bb 1f       	adc	r27, r27
    1d46:	3a 95       	dec	r19
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <__stack+0x1443>
    1d4a:	9d 01       	movw	r18, r26
    1d4c:	26 2b       	or	r18, r22
    1d4e:	25 b9       	out	0x05, r18	; 5
    1d50:	1b c0       	rjmp	.+54     	; 0x1d88 <__stack+0x1489>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1d52:	38 30       	cpi	r19, 0x08	; 8
    1d54:	68 f4       	brcc	.+26     	; 0x1d70 <__stack+0x1471>
    1d56:	6b b1       	in	r22, 0x0b	; 11
    1d58:	37 70       	andi	r19, 0x07	; 7
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <__stack+0x1463>
    1d5e:	aa 0f       	add	r26, r26
    1d60:	bb 1f       	adc	r27, r27
    1d62:	3a 95       	dec	r19
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <__stack+0x145f>
    1d66:	9d 01       	movw	r18, r26
    1d68:	20 95       	com	r18
    1d6a:	26 23       	and	r18, r22
    1d6c:	2b b9       	out	0x0b, r18	; 11
    1d6e:	0c c0       	rjmp	.+24     	; 0x1d88 <__stack+0x1489>
    1d70:	65 b1       	in	r22, 0x05	; 5
    1d72:	37 70       	andi	r19, 0x07	; 7
    1d74:	dc 01       	movw	r26, r24
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <__stack+0x147d>
    1d78:	aa 0f       	add	r26, r26
    1d7a:	bb 1f       	adc	r27, r27
    1d7c:	3a 95       	dec	r19
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <__stack+0x1479>
    1d80:	9d 01       	movw	r18, r26
    1d82:	20 95       	com	r18
    1d84:	26 23       	and	r18, r22
    1d86:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1d88:	d8 01       	movw	r26, r16
    1d8a:	11 96       	adiw	r26, 0x01	; 1
    1d8c:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1d8e:	28 30       	cpi	r18, 0x08	; 8
    1d90:	60 f4       	brcc	.+24     	; 0x1daa <__stack+0x14ab>
    1d92:	6b b1       	in	r22, 0x0b	; 11
    1d94:	27 70       	andi	r18, 0x07	; 7
    1d96:	dc 01       	movw	r26, r24
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <__stack+0x149f>
    1d9a:	aa 0f       	add	r26, r26
    1d9c:	bb 1f       	adc	r27, r27
    1d9e:	2a 95       	dec	r18
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <__stack+0x149b>
    1da2:	9d 01       	movw	r18, r26
    1da4:	26 2b       	or	r18, r22
    1da6:	2b b9       	out	0x0b, r18	; 11
    1da8:	0b c0       	rjmp	.+22     	; 0x1dc0 <__stack+0x14c1>
    1daa:	65 b1       	in	r22, 0x05	; 5
    1dac:	27 70       	andi	r18, 0x07	; 7
    1dae:	dc 01       	movw	r26, r24
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <__stack+0x14b7>
    1db2:	aa 0f       	add	r26, r26
    1db4:	bb 1f       	adc	r27, r27
    1db6:	2a 95       	dec	r18
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <__stack+0x14b3>
    1dba:	9d 01       	movw	r18, r26
    1dbc:	26 2b       	or	r18, r22
    1dbe:	25 b9       	out	0x05, r18	; 5
    1dc0:	b5 e0       	ldi	r27, 0x05	; 5
    1dc2:	ba 95       	dec	r27
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <__stack+0x14c3>
    1dc6:	00 00       	nop
    1dc8:	d8 01       	movw	r26, r16
    1dca:	11 96       	adiw	r26, 0x01	; 1
    1dcc:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1dce:	28 30       	cpi	r18, 0x08	; 8
    1dd0:	68 f4       	brcc	.+26     	; 0x1dec <__stack+0x14ed>
    1dd2:	3b b1       	in	r19, 0x0b	; 11
    1dd4:	27 70       	andi	r18, 0x07	; 7
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <__stack+0x14df>
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	2a 95       	dec	r18
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <__stack+0x14db>
    1de2:	26 2f       	mov	r18, r22
    1de4:	20 95       	com	r18
    1de6:	23 23       	and	r18, r19
    1de8:	2b b9       	out	0x0b, r18	; 11
    1dea:	0c c0       	rjmp	.+24     	; 0x1e04 <__stack+0x1505>
    1dec:	35 b1       	in	r19, 0x05	; 5
    1dee:	27 70       	andi	r18, 0x07	; 7
    1df0:	bc 01       	movw	r22, r24
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <__stack+0x14f9>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	2a 95       	dec	r18
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <__stack+0x14f5>
    1dfc:	26 2f       	mov	r18, r22
    1dfe:	20 95       	com	r18
    1e00:	23 23       	and	r18, r19
    1e02:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e04:	af e3       	ldi	r26, 0x3F	; 63
    1e06:	bf e1       	ldi	r27, 0x1F	; 31
    1e08:	11 97       	sbiw	r26, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <__stack+0x1509>
    1e0c:	00 c0       	rjmp	.+0      	; 0x1e0e <__stack+0x150f>
    1e0e:	00 00       	nop
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    1e10:	4f 5f       	subi	r20, 0xFF	; 255
    1e12:	5f 4f       	sbci	r21, 0xFF	; 255
    1e14:	40 32       	cpi	r20, 0x20	; 32
    1e16:	51 05       	cpc	r21, r1
    1e18:	09 f0       	breq	.+2      	; 0x1e1c <__stack+0x151d>
    1e1a:	fc cb       	rjmp	.-2056   	; 0x1614 <__stack+0xd15>
    1e1c:	42 e0       	ldi	r20, 0x02	; 2
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <__stack+0x1527>
    1e22:	42 e0       	ldi	r20, 0x02	; 2
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	21 e0       	ldi	r18, 0x01	; 1
    1e28:	30 e0       	ldi	r19, 0x00	; 0
	lcd->Write("Zeduino    DHT11Iniciando  ");
	
	for (int i = 0; i < 2; i++) {
		lcd->Write('.');
    1e2a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <lcd>
    1e2e:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	88 30       	cpi	r24, 0x08	; 8
    1e36:	68 f4       	brcc	.+26     	; 0x1e52 <__stack+0x1553>
    1e38:	9b b1       	in	r25, 0x0b	; 11
    1e3a:	87 70       	andi	r24, 0x07	; 7
    1e3c:	b9 01       	movw	r22, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <__stack+0x1545>
    1e40:	66 0f       	add	r22, r22
    1e42:	77 1f       	adc	r23, r23
    1e44:	8a 95       	dec	r24
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <__stack+0x1541>
    1e48:	86 2f       	mov	r24, r22
    1e4a:	80 95       	com	r24
    1e4c:	89 23       	and	r24, r25
    1e4e:	8b b9       	out	0x0b, r24	; 11
    1e50:	0c c0       	rjmp	.+24     	; 0x1e6a <__stack+0x156b>
    1e52:	95 b1       	in	r25, 0x05	; 5
    1e54:	87 70       	andi	r24, 0x07	; 7
    1e56:	b9 01       	movw	r22, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <__stack+0x155f>
    1e5a:	66 0f       	add	r22, r22
    1e5c:	77 1f       	adc	r23, r23
    1e5e:	8a 95       	dec	r24
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <__stack+0x155b>
    1e62:	86 2f       	mov	r24, r22
    1e64:	80 95       	com	r24
    1e66:	89 23       	and	r24, r25
    1e68:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    1e6a:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1e6c:	88 30       	cpi	r24, 0x08	; 8
    1e6e:	60 f4       	brcc	.+24     	; 0x1e88 <__stack+0x1589>
    1e70:	6b b1       	in	r22, 0x0b	; 11
    1e72:	87 70       	andi	r24, 0x07	; 7
    1e74:	d9 01       	movw	r26, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <__stack+0x157d>
    1e78:	aa 0f       	add	r26, r26
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	8a 95       	dec	r24
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <__stack+0x1579>
    1e80:	cd 01       	movw	r24, r26
    1e82:	86 2b       	or	r24, r22
    1e84:	8b b9       	out	0x0b, r24	; 11
    1e86:	0b c0       	rjmp	.+22     	; 0x1e9e <__stack+0x159f>
    1e88:	65 b1       	in	r22, 0x05	; 5
    1e8a:	87 70       	andi	r24, 0x07	; 7
    1e8c:	d9 01       	movw	r26, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <__stack+0x1595>
    1e90:	aa 0f       	add	r26, r26
    1e92:	bb 1f       	adc	r27, r27
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <__stack+0x1591>
    1e98:	cd 01       	movw	r24, r26
    1e9a:	86 2b       	or	r24, r22
    1e9c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    1e9e:	84 81       	ldd	r24, Z+4	; 0x04
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1ea0:	88 30       	cpi	r24, 0x08	; 8
    1ea2:	68 f4       	brcc	.+26     	; 0x1ebe <__stack+0x15bf>
    1ea4:	9b b1       	in	r25, 0x0b	; 11
    1ea6:	87 70       	andi	r24, 0x07	; 7
    1ea8:	b9 01       	movw	r22, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <__stack+0x15b1>
    1eac:	66 0f       	add	r22, r22
    1eae:	77 1f       	adc	r23, r23
    1eb0:	8a 95       	dec	r24
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <__stack+0x15ad>
    1eb4:	86 2f       	mov	r24, r22
    1eb6:	80 95       	com	r24
    1eb8:	89 23       	and	r24, r25
    1eba:	8b b9       	out	0x0b, r24	; 11
    1ebc:	0c c0       	rjmp	.+24     	; 0x1ed6 <__stack+0x15d7>
    1ebe:	95 b1       	in	r25, 0x05	; 5
    1ec0:	87 70       	andi	r24, 0x07	; 7
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <__stack+0x15cb>
    1ec6:	66 0f       	add	r22, r22
    1ec8:	77 1f       	adc	r23, r23
    1eca:	8a 95       	dec	r24
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <__stack+0x15c7>
    1ece:	86 2f       	mov	r24, r22
    1ed0:	80 95       	com	r24
    1ed2:	89 23       	and	r24, r25
    1ed4:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    1ed6:	85 81       	ldd	r24, Z+5	; 0x05
    1ed8:	88 30       	cpi	r24, 0x08	; 8
    1eda:	68 f4       	brcc	.+26     	; 0x1ef6 <__stack+0x15f7>
    1edc:	9b b1       	in	r25, 0x0b	; 11
    1ede:	87 70       	andi	r24, 0x07	; 7
    1ee0:	b9 01       	movw	r22, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <__stack+0x15e9>
    1ee4:	66 0f       	add	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	8a 95       	dec	r24
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <__stack+0x15e5>
    1eec:	86 2f       	mov	r24, r22
    1eee:	80 95       	com	r24
    1ef0:	89 23       	and	r24, r25
    1ef2:	8b b9       	out	0x0b, r24	; 11
    1ef4:	0c c0       	rjmp	.+24     	; 0x1f0e <__stack+0x160f>
    1ef6:	95 b1       	in	r25, 0x05	; 5
    1ef8:	87 70       	andi	r24, 0x07	; 7
    1efa:	b9 01       	movw	r22, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <__stack+0x1603>
    1efe:	66 0f       	add	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	8a 95       	dec	r24
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <__stack+0x15ff>
    1f06:	86 2f       	mov	r24, r22
    1f08:	80 95       	com	r24
    1f0a:	89 23       	and	r24, r25
    1f0c:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    1f0e:	80 81       	ld	r24, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1f10:	88 30       	cpi	r24, 0x08	; 8
    1f12:	60 f4       	brcc	.+24     	; 0x1f2c <__stack+0x162d>
    1f14:	6b b1       	in	r22, 0x0b	; 11
    1f16:	87 70       	andi	r24, 0x07	; 7
    1f18:	d9 01       	movw	r26, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <__stack+0x1621>
    1f1c:	aa 0f       	add	r26, r26
    1f1e:	bb 1f       	adc	r27, r27
    1f20:	8a 95       	dec	r24
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <__stack+0x161d>
    1f24:	cd 01       	movw	r24, r26
    1f26:	86 2b       	or	r24, r22
    1f28:	8b b9       	out	0x0b, r24	; 11
    1f2a:	0b c0       	rjmp	.+22     	; 0x1f42 <__stack+0x1643>
    1f2c:	65 b1       	in	r22, 0x05	; 5
    1f2e:	87 70       	andi	r24, 0x07	; 7
    1f30:	d9 01       	movw	r26, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <__stack+0x1639>
    1f34:	aa 0f       	add	r26, r26
    1f36:	bb 1f       	adc	r27, r27
    1f38:	8a 95       	dec	r24
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <__stack+0x1635>
    1f3c:	cd 01       	movw	r24, r26
    1f3e:	86 2b       	or	r24, r22
    1f40:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1f42:	81 81       	ldd	r24, Z+1	; 0x01
    1f44:	88 30       	cpi	r24, 0x08	; 8
    1f46:	60 f4       	brcc	.+24     	; 0x1f60 <__stack+0x1661>
    1f48:	6b b1       	in	r22, 0x0b	; 11
    1f4a:	87 70       	andi	r24, 0x07	; 7
    1f4c:	d9 01       	movw	r26, r18
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <__stack+0x1655>
    1f50:	aa 0f       	add	r26, r26
    1f52:	bb 1f       	adc	r27, r27
    1f54:	8a 95       	dec	r24
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <__stack+0x1651>
    1f58:	cd 01       	movw	r24, r26
    1f5a:	86 2b       	or	r24, r22
    1f5c:	8b b9       	out	0x0b, r24	; 11
    1f5e:	0b c0       	rjmp	.+22     	; 0x1f76 <__stack+0x1677>
    1f60:	65 b1       	in	r22, 0x05	; 5
    1f62:	87 70       	andi	r24, 0x07	; 7
    1f64:	d9 01       	movw	r26, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <__stack+0x166d>
    1f68:	aa 0f       	add	r26, r26
    1f6a:	bb 1f       	adc	r27, r27
    1f6c:	8a 95       	dec	r24
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <__stack+0x1669>
    1f70:	cd 01       	movw	r24, r26
    1f72:	86 2b       	or	r24, r22
    1f74:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f76:	b5 e0       	ldi	r27, 0x05	; 5
    1f78:	ba 95       	dec	r27
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <__stack+0x1679>
    1f7c:	00 00       	nop
    1f7e:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1f80:	88 30       	cpi	r24, 0x08	; 8
    1f82:	68 f4       	brcc	.+26     	; 0x1f9e <__stack+0x169f>
    1f84:	9b b1       	in	r25, 0x0b	; 11
    1f86:	87 70       	andi	r24, 0x07	; 7
    1f88:	b9 01       	movw	r22, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <__stack+0x1691>
    1f8c:	66 0f       	add	r22, r22
    1f8e:	77 1f       	adc	r23, r23
    1f90:	8a 95       	dec	r24
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <__stack+0x168d>
    1f94:	86 2f       	mov	r24, r22
    1f96:	80 95       	com	r24
    1f98:	89 23       	and	r24, r25
    1f9a:	8b b9       	out	0x0b, r24	; 11
    1f9c:	0c c0       	rjmp	.+24     	; 0x1fb6 <__stack+0x16b7>
    1f9e:	95 b1       	in	r25, 0x05	; 5
    1fa0:	87 70       	andi	r24, 0x07	; 7
    1fa2:	b9 01       	movw	r22, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <__stack+0x16ab>
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	8a 95       	dec	r24
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <__stack+0x16a7>
    1fae:	86 2f       	mov	r24, r22
    1fb0:	80 95       	com	r24
    1fb2:	89 23       	and	r24, r25
    1fb4:	85 b9       	out	0x05, r24	; 5
    1fb6:	8f e1       	ldi	r24, 0x1F	; 31
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <__stack+0x16bb>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <__stack+0x16c1>
    1fc0:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    1fc2:	82 81       	ldd	r24, Z+2	; 0x02
    1fc4:	88 30       	cpi	r24, 0x08	; 8
    1fc6:	68 f4       	brcc	.+26     	; 0x1fe2 <__stack+0x16e3>
    1fc8:	9b b1       	in	r25, 0x0b	; 11
    1fca:	87 70       	andi	r24, 0x07	; 7
    1fcc:	b9 01       	movw	r22, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <__stack+0x16d5>
    1fd0:	66 0f       	add	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	8a 95       	dec	r24
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <__stack+0x16d1>
    1fd8:	86 2f       	mov	r24, r22
    1fda:	80 95       	com	r24
    1fdc:	89 23       	and	r24, r25
    1fde:	8b b9       	out	0x0b, r24	; 11
    1fe0:	0c c0       	rjmp	.+24     	; 0x1ffa <__stack+0x16fb>
    1fe2:	95 b1       	in	r25, 0x05	; 5
    1fe4:	87 70       	andi	r24, 0x07	; 7
    1fe6:	b9 01       	movw	r22, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <__stack+0x16ef>
    1fea:	66 0f       	add	r22, r22
    1fec:	77 1f       	adc	r23, r23
    1fee:	8a 95       	dec	r24
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <__stack+0x16eb>
    1ff2:	86 2f       	mov	r24, r22
    1ff4:	80 95       	com	r24
    1ff6:	89 23       	and	r24, r25
    1ff8:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1ffa:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1ffc:	88 30       	cpi	r24, 0x08	; 8
    1ffe:	60 f4       	brcc	.+24     	; 0x2018 <__stack+0x1719>
    2000:	6b b1       	in	r22, 0x0b	; 11
    2002:	87 70       	andi	r24, 0x07	; 7
    2004:	d9 01       	movw	r26, r18
    2006:	02 c0       	rjmp	.+4      	; 0x200c <__stack+0x170d>
    2008:	aa 0f       	add	r26, r26
    200a:	bb 1f       	adc	r27, r27
    200c:	8a 95       	dec	r24
    200e:	e2 f7       	brpl	.-8      	; 0x2008 <__stack+0x1709>
    2010:	cd 01       	movw	r24, r26
    2012:	86 2b       	or	r24, r22
    2014:	8b b9       	out	0x0b, r24	; 11
    2016:	0b c0       	rjmp	.+22     	; 0x202e <__stack+0x172f>
    2018:	65 b1       	in	r22, 0x05	; 5
    201a:	87 70       	andi	r24, 0x07	; 7
    201c:	d9 01       	movw	r26, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <__stack+0x1725>
    2020:	aa 0f       	add	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	8a 95       	dec	r24
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <__stack+0x1721>
    2028:	cd 01       	movw	r24, r26
    202a:	86 2b       	or	r24, r22
    202c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    202e:	84 81       	ldd	r24, Z+4	; 0x04
    2030:	88 30       	cpi	r24, 0x08	; 8
    2032:	60 f4       	brcc	.+24     	; 0x204c <__stack+0x174d>
    2034:	6b b1       	in	r22, 0x0b	; 11
    2036:	87 70       	andi	r24, 0x07	; 7
    2038:	d9 01       	movw	r26, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <__stack+0x1741>
    203c:	aa 0f       	add	r26, r26
    203e:	bb 1f       	adc	r27, r27
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <__stack+0x173d>
    2044:	cd 01       	movw	r24, r26
    2046:	86 2b       	or	r24, r22
    2048:	8b b9       	out	0x0b, r24	; 11
    204a:	0b c0       	rjmp	.+22     	; 0x2062 <__stack+0x1763>
    204c:	65 b1       	in	r22, 0x05	; 5
    204e:	87 70       	andi	r24, 0x07	; 7
    2050:	d9 01       	movw	r26, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <__stack+0x1759>
    2054:	aa 0f       	add	r26, r26
    2056:	bb 1f       	adc	r27, r27
    2058:	8a 95       	dec	r24
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <__stack+0x1755>
    205c:	cd 01       	movw	r24, r26
    205e:	86 2b       	or	r24, r22
    2060:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    2062:	85 81       	ldd	r24, Z+5	; 0x05
    2064:	88 30       	cpi	r24, 0x08	; 8
    2066:	60 f4       	brcc	.+24     	; 0x2080 <__stack+0x1781>
    2068:	6b b1       	in	r22, 0x0b	; 11
    206a:	87 70       	andi	r24, 0x07	; 7
    206c:	d9 01       	movw	r26, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <__stack+0x1775>
    2070:	aa 0f       	add	r26, r26
    2072:	bb 1f       	adc	r27, r27
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <__stack+0x1771>
    2078:	cd 01       	movw	r24, r26
    207a:	86 2b       	or	r24, r22
    207c:	8b b9       	out	0x0b, r24	; 11
    207e:	0b c0       	rjmp	.+22     	; 0x2096 <__stack+0x1797>
    2080:	65 b1       	in	r22, 0x05	; 5
    2082:	87 70       	andi	r24, 0x07	; 7
    2084:	d9 01       	movw	r26, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <__stack+0x178d>
    2088:	aa 0f       	add	r26, r26
    208a:	bb 1f       	adc	r27, r27
    208c:	8a 95       	dec	r24
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <__stack+0x1789>
    2090:	cd 01       	movw	r24, r26
    2092:	86 2b       	or	r24, r22
    2094:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2096:	81 81       	ldd	r24, Z+1	; 0x01
    2098:	88 30       	cpi	r24, 0x08	; 8
    209a:	60 f4       	brcc	.+24     	; 0x20b4 <__stack+0x17b5>
    209c:	6b b1       	in	r22, 0x0b	; 11
    209e:	87 70       	andi	r24, 0x07	; 7
    20a0:	d9 01       	movw	r26, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <__stack+0x17a9>
    20a4:	aa 0f       	add	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	8a 95       	dec	r24
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <__stack+0x17a5>
    20ac:	cd 01       	movw	r24, r26
    20ae:	86 2b       	or	r24, r22
    20b0:	8b b9       	out	0x0b, r24	; 11
    20b2:	0b c0       	rjmp	.+22     	; 0x20ca <__stack+0x17cb>
    20b4:	65 b1       	in	r22, 0x05	; 5
    20b6:	87 70       	andi	r24, 0x07	; 7
    20b8:	d9 01       	movw	r26, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <__stack+0x17c1>
    20bc:	aa 0f       	add	r26, r26
    20be:	bb 1f       	adc	r27, r27
    20c0:	8a 95       	dec	r24
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <__stack+0x17bd>
    20c4:	cd 01       	movw	r24, r26
    20c6:	86 2b       	or	r24, r22
    20c8:	85 b9       	out	0x05, r24	; 5
    20ca:	b5 e0       	ldi	r27, 0x05	; 5
    20cc:	ba 95       	dec	r27
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <__stack+0x17cd>
    20d0:	00 00       	nop
    20d2:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    20d4:	88 30       	cpi	r24, 0x08	; 8
    20d6:	68 f4       	brcc	.+26     	; 0x20f2 <__stack+0x17f3>
    20d8:	9b b1       	in	r25, 0x0b	; 11
    20da:	87 70       	andi	r24, 0x07	; 7
    20dc:	b9 01       	movw	r22, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <__stack+0x17e5>
    20e0:	66 0f       	add	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	8a 95       	dec	r24
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <__stack+0x17e1>
    20e8:	86 2f       	mov	r24, r22
    20ea:	80 95       	com	r24
    20ec:	89 23       	and	r24, r25
    20ee:	8b b9       	out	0x0b, r24	; 11
    20f0:	0c c0       	rjmp	.+24     	; 0x210a <__stack+0x180b>
    20f2:	95 b1       	in	r25, 0x05	; 5
    20f4:	87 70       	andi	r24, 0x07	; 7
    20f6:	b9 01       	movw	r22, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <__stack+0x17ff>
    20fa:	66 0f       	add	r22, r22
    20fc:	77 1f       	adc	r23, r23
    20fe:	8a 95       	dec	r24
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <__stack+0x17fb>
    2102:	86 2f       	mov	r24, r22
    2104:	80 95       	com	r24
    2106:	89 23       	and	r24, r25
    2108:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    210a:	ef e3       	ldi	r30, 0x3F	; 63
    210c:	ff e1       	ldi	r31, 0x1F	; 31
    210e:	31 97       	sbiw	r30, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <__stack+0x180f>
    2112:	00 c0       	rjmp	.+0      	; 0x2114 <__stack+0x1815>
    2114:	00 00       	nop
    2116:	84 ef       	ldi	r24, 0xF4	; 244
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	af e9       	ldi	r26, 0x9F	; 159
    211c:	bf e0       	ldi	r27, 0x0F	; 15
    211e:	11 97       	sbiw	r26, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <__stack+0x181f>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <__stack+0x1825>
    2124:	00 00       	nop
    2126:	01 97       	sbiw	r24, 0x01	; 1
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			// TODO: Implementar em assembly
			while (time > 0) {
    2128:	c1 f7       	brne	.-16     	; 0x211a <__stack+0x181b>
    212a:	41 50       	subi	r20, 0x01	; 1
    212c:	51 09       	sbc	r21, r1
void setup() {
	EPort ports[] = {P5, P4, P3, P2};
	lcd = new component::DisplayLCD(P12, P11, ports);
	lcd->Write("Zeduino    DHT11Iniciando  ");
	
	for (int i = 0; i < 2; i++) {
    212e:	09 f0       	breq	.+2      	; 0x2132 <__stack+0x1833>
    2130:	7c ce       	rjmp	.-776    	; 0x1e2a <__stack+0x152b>
typedef int16_t int16;
typedef uint8_t uint8;
typedef uint16_t uint16;

void * operator new(size_t size) {
	return malloc(size);	
    2132:	86 e0       	ldi	r24, 0x06	; 6
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 c5 1c 	call	0x398a	; 0x398a <malloc>
		class DHT11 : public Component {
			
			private: EPort _port;
			private: uint8 _cache[5] = {0};
		
			public: DHT11(EPort port) : _port(port) {
    213a:	e8 2f       	mov	r30, r24
    213c:	f9 2f       	mov	r31, r25
    213e:	2d e0       	ldi	r18, 0x0D	; 13
    2140:	21 93       	st	Z+, r18
    2142:	25 e0       	ldi	r18, 0x05	; 5
    2144:	df 01       	movw	r26, r30
    2146:	1d 92       	st	X+, r1
    2148:	2a 95       	dec	r18
    214a:	e9 f7       	brne	.-6      	; 0x2146 <__stack+0x1847>
    214c:	bf ef       	ldi	r27, 0xFF	; 255
    214e:	e3 ed       	ldi	r30, 0xD3	; 211
    2150:	f0 e3       	ldi	r31, 0x30	; 48
    2152:	b1 50       	subi	r27, 0x01	; 1
    2154:	e0 40       	sbci	r30, 0x00	; 0
    2156:	f0 40       	sbci	r31, 0x00	; 0
    2158:	e1 f7       	brne	.-8      	; 0x2152 <__stack+0x1853>
    215a:	00 c0       	rjmp	.+0      	; 0x215c <__stack+0x185d>
    215c:	00 00       	nop
		lcd->Write('.');
		util::delay_ms(500);
	}
	
	dht11 = new component::DHT11(P13);
    215e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <dht11>
    2162:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <dht11+0x1>
    2166:	43 e0       	ldi	r20, 0x03	; 3
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	21 e0       	ldi	r18, 0x01	; 1
    216c:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < 3; i++) {
		lcd->Write('.');
    216e:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <lcd>
    2172:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2176:	82 81       	ldd	r24, Z+2	; 0x02
    2178:	88 30       	cpi	r24, 0x08	; 8
    217a:	68 f4       	brcc	.+26     	; 0x2196 <__stack+0x1897>
    217c:	9b b1       	in	r25, 0x0b	; 11
    217e:	87 70       	andi	r24, 0x07	; 7
    2180:	b9 01       	movw	r22, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <__stack+0x1889>
    2184:	66 0f       	add	r22, r22
    2186:	77 1f       	adc	r23, r23
    2188:	8a 95       	dec	r24
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <__stack+0x1885>
    218c:	86 2f       	mov	r24, r22
    218e:	80 95       	com	r24
    2190:	89 23       	and	r24, r25
    2192:	8b b9       	out	0x0b, r24	; 11
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <__stack+0x18af>
    2196:	95 b1       	in	r25, 0x05	; 5
    2198:	87 70       	andi	r24, 0x07	; 7
    219a:	b9 01       	movw	r22, r18
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <__stack+0x18a3>
    219e:	66 0f       	add	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	8a 95       	dec	r24
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <__stack+0x189f>
    21a6:	86 2f       	mov	r24, r22
    21a8:	80 95       	com	r24
    21aa:	89 23       	and	r24, r25
    21ac:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    21ae:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    21b0:	88 30       	cpi	r24, 0x08	; 8
    21b2:	60 f4       	brcc	.+24     	; 0x21cc <__stack+0x18cd>
    21b4:	6b b1       	in	r22, 0x0b	; 11
    21b6:	87 70       	andi	r24, 0x07	; 7
    21b8:	d9 01       	movw	r26, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <__stack+0x18c1>
    21bc:	aa 0f       	add	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <__stack+0x18bd>
    21c4:	cd 01       	movw	r24, r26
    21c6:	86 2b       	or	r24, r22
    21c8:	8b b9       	out	0x0b, r24	; 11
    21ca:	0b c0       	rjmp	.+22     	; 0x21e2 <__stack+0x18e3>
    21cc:	65 b1       	in	r22, 0x05	; 5
    21ce:	87 70       	andi	r24, 0x07	; 7
    21d0:	d9 01       	movw	r26, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <__stack+0x18d9>
    21d4:	aa 0f       	add	r26, r26
    21d6:	bb 1f       	adc	r27, r27
    21d8:	8a 95       	dec	r24
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <__stack+0x18d5>
    21dc:	cd 01       	movw	r24, r26
    21de:	86 2b       	or	r24, r22
    21e0:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    21e2:	84 81       	ldd	r24, Z+4	; 0x04
			else _CLEAR_BIT(fcrof(port), nmr(port));
    21e4:	88 30       	cpi	r24, 0x08	; 8
    21e6:	68 f4       	brcc	.+26     	; 0x2202 <__stack+0x1903>
    21e8:	9b b1       	in	r25, 0x0b	; 11
    21ea:	87 70       	andi	r24, 0x07	; 7
    21ec:	b9 01       	movw	r22, r18
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <__stack+0x18f5>
    21f0:	66 0f       	add	r22, r22
    21f2:	77 1f       	adc	r23, r23
    21f4:	8a 95       	dec	r24
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <__stack+0x18f1>
    21f8:	86 2f       	mov	r24, r22
    21fa:	80 95       	com	r24
    21fc:	89 23       	and	r24, r25
    21fe:	8b b9       	out	0x0b, r24	; 11
    2200:	0c c0       	rjmp	.+24     	; 0x221a <__stack+0x191b>
    2202:	95 b1       	in	r25, 0x05	; 5
    2204:	87 70       	andi	r24, 0x07	; 7
    2206:	b9 01       	movw	r22, r18
    2208:	02 c0       	rjmp	.+4      	; 0x220e <__stack+0x190f>
    220a:	66 0f       	add	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	8a 95       	dec	r24
    2210:	e2 f7       	brpl	.-8      	; 0x220a <__stack+0x190b>
    2212:	86 2f       	mov	r24, r22
    2214:	80 95       	com	r24
    2216:	89 23       	and	r24, r25
    2218:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    221a:	85 81       	ldd	r24, Z+5	; 0x05
    221c:	88 30       	cpi	r24, 0x08	; 8
    221e:	68 f4       	brcc	.+26     	; 0x223a <__stack+0x193b>
    2220:	9b b1       	in	r25, 0x0b	; 11
    2222:	87 70       	andi	r24, 0x07	; 7
    2224:	b9 01       	movw	r22, r18
    2226:	02 c0       	rjmp	.+4      	; 0x222c <__stack+0x192d>
    2228:	66 0f       	add	r22, r22
    222a:	77 1f       	adc	r23, r23
    222c:	8a 95       	dec	r24
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <__stack+0x1929>
    2230:	86 2f       	mov	r24, r22
    2232:	80 95       	com	r24
    2234:	89 23       	and	r24, r25
    2236:	8b b9       	out	0x0b, r24	; 11
    2238:	0c c0       	rjmp	.+24     	; 0x2252 <__stack+0x1953>
    223a:	95 b1       	in	r25, 0x05	; 5
    223c:	87 70       	andi	r24, 0x07	; 7
    223e:	b9 01       	movw	r22, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <__stack+0x1947>
    2242:	66 0f       	add	r22, r22
    2244:	77 1f       	adc	r23, r23
    2246:	8a 95       	dec	r24
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <__stack+0x1943>
    224a:	86 2f       	mov	r24, r22
    224c:	80 95       	com	r24
    224e:	89 23       	and	r24, r25
    2250:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2252:	80 81       	ld	r24, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2254:	88 30       	cpi	r24, 0x08	; 8
    2256:	60 f4       	brcc	.+24     	; 0x2270 <__stack+0x1971>
    2258:	6b b1       	in	r22, 0x0b	; 11
    225a:	87 70       	andi	r24, 0x07	; 7
    225c:	d9 01       	movw	r26, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <__stack+0x1965>
    2260:	aa 0f       	add	r26, r26
    2262:	bb 1f       	adc	r27, r27
    2264:	8a 95       	dec	r24
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <__stack+0x1961>
    2268:	cd 01       	movw	r24, r26
    226a:	86 2b       	or	r24, r22
    226c:	8b b9       	out	0x0b, r24	; 11
    226e:	0b c0       	rjmp	.+22     	; 0x2286 <__stack+0x1987>
    2270:	65 b1       	in	r22, 0x05	; 5
    2272:	87 70       	andi	r24, 0x07	; 7
    2274:	d9 01       	movw	r26, r18
    2276:	02 c0       	rjmp	.+4      	; 0x227c <__stack+0x197d>
    2278:	aa 0f       	add	r26, r26
    227a:	bb 1f       	adc	r27, r27
    227c:	8a 95       	dec	r24
    227e:	e2 f7       	brpl	.-8      	; 0x2278 <__stack+0x1979>
    2280:	cd 01       	movw	r24, r26
    2282:	86 2b       	or	r24, r22
    2284:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2286:	81 81       	ldd	r24, Z+1	; 0x01
    2288:	88 30       	cpi	r24, 0x08	; 8
    228a:	60 f4       	brcc	.+24     	; 0x22a4 <__stack+0x19a5>
    228c:	6b b1       	in	r22, 0x0b	; 11
    228e:	87 70       	andi	r24, 0x07	; 7
    2290:	d9 01       	movw	r26, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <__stack+0x1999>
    2294:	aa 0f       	add	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	8a 95       	dec	r24
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <__stack+0x1995>
    229c:	cd 01       	movw	r24, r26
    229e:	86 2b       	or	r24, r22
    22a0:	8b b9       	out	0x0b, r24	; 11
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <__stack+0x19bb>
    22a4:	65 b1       	in	r22, 0x05	; 5
    22a6:	87 70       	andi	r24, 0x07	; 7
    22a8:	d9 01       	movw	r26, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <__stack+0x19b1>
    22ac:	aa 0f       	add	r26, r26
    22ae:	bb 1f       	adc	r27, r27
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <__stack+0x19ad>
    22b4:	cd 01       	movw	r24, r26
    22b6:	86 2b       	or	r24, r22
    22b8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    22ba:	b5 e0       	ldi	r27, 0x05	; 5
    22bc:	ba 95       	dec	r27
    22be:	f1 f7       	brne	.-4      	; 0x22bc <__stack+0x19bd>
    22c0:	00 00       	nop
    22c2:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    22c4:	88 30       	cpi	r24, 0x08	; 8
    22c6:	68 f4       	brcc	.+26     	; 0x22e2 <__stack+0x19e3>
    22c8:	9b b1       	in	r25, 0x0b	; 11
    22ca:	87 70       	andi	r24, 0x07	; 7
    22cc:	b9 01       	movw	r22, r18
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__stack+0x19d5>
    22d0:	66 0f       	add	r22, r22
    22d2:	77 1f       	adc	r23, r23
    22d4:	8a 95       	dec	r24
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <__stack+0x19d1>
    22d8:	86 2f       	mov	r24, r22
    22da:	80 95       	com	r24
    22dc:	89 23       	and	r24, r25
    22de:	8b b9       	out	0x0b, r24	; 11
    22e0:	0c c0       	rjmp	.+24     	; 0x22fa <__stack+0x19fb>
    22e2:	95 b1       	in	r25, 0x05	; 5
    22e4:	87 70       	andi	r24, 0x07	; 7
    22e6:	b9 01       	movw	r22, r18
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <__stack+0x19ef>
    22ea:	66 0f       	add	r22, r22
    22ec:	77 1f       	adc	r23, r23
    22ee:	8a 95       	dec	r24
    22f0:	e2 f7       	brpl	.-8      	; 0x22ea <__stack+0x19eb>
    22f2:	86 2f       	mov	r24, r22
    22f4:	80 95       	com	r24
    22f6:	89 23       	and	r24, r25
    22f8:	85 b9       	out	0x05, r24	; 5
    22fa:	8f e1       	ldi	r24, 0x1F	; 31
    22fc:	93 e0       	ldi	r25, 0x03	; 3
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <__stack+0x19ff>
    2302:	00 c0       	rjmp	.+0      	; 0x2304 <__stack+0x1a05>
    2304:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2306:	82 81       	ldd	r24, Z+2	; 0x02
    2308:	88 30       	cpi	r24, 0x08	; 8
    230a:	68 f4       	brcc	.+26     	; 0x2326 <__stack+0x1a27>
    230c:	9b b1       	in	r25, 0x0b	; 11
    230e:	87 70       	andi	r24, 0x07	; 7
    2310:	b9 01       	movw	r22, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <__stack+0x1a19>
    2314:	66 0f       	add	r22, r22
    2316:	77 1f       	adc	r23, r23
    2318:	8a 95       	dec	r24
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <__stack+0x1a15>
    231c:	86 2f       	mov	r24, r22
    231e:	80 95       	com	r24
    2320:	89 23       	and	r24, r25
    2322:	8b b9       	out	0x0b, r24	; 11
    2324:	0c c0       	rjmp	.+24     	; 0x233e <__stack+0x1a3f>
    2326:	95 b1       	in	r25, 0x05	; 5
    2328:	87 70       	andi	r24, 0x07	; 7
    232a:	b9 01       	movw	r22, r18
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <__stack+0x1a33>
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	8a 95       	dec	r24
    2334:	e2 f7       	brpl	.-8      	; 0x232e <__stack+0x1a2f>
    2336:	86 2f       	mov	r24, r22
    2338:	80 95       	com	r24
    233a:	89 23       	and	r24, r25
    233c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    233e:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2340:	88 30       	cpi	r24, 0x08	; 8
    2342:	60 f4       	brcc	.+24     	; 0x235c <__stack+0x1a5d>
    2344:	6b b1       	in	r22, 0x0b	; 11
    2346:	87 70       	andi	r24, 0x07	; 7
    2348:	d9 01       	movw	r26, r18
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <__stack+0x1a51>
    234c:	aa 0f       	add	r26, r26
    234e:	bb 1f       	adc	r27, r27
    2350:	8a 95       	dec	r24
    2352:	e2 f7       	brpl	.-8      	; 0x234c <__stack+0x1a4d>
    2354:	cd 01       	movw	r24, r26
    2356:	86 2b       	or	r24, r22
    2358:	8b b9       	out	0x0b, r24	; 11
    235a:	0b c0       	rjmp	.+22     	; 0x2372 <__stack+0x1a73>
    235c:	65 b1       	in	r22, 0x05	; 5
    235e:	87 70       	andi	r24, 0x07	; 7
    2360:	d9 01       	movw	r26, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <__stack+0x1a69>
    2364:	aa 0f       	add	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	8a 95       	dec	r24
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <__stack+0x1a65>
    236c:	cd 01       	movw	r24, r26
    236e:	86 2b       	or	r24, r22
    2370:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    2372:	84 81       	ldd	r24, Z+4	; 0x04
    2374:	88 30       	cpi	r24, 0x08	; 8
    2376:	60 f4       	brcc	.+24     	; 0x2390 <__stack+0x1a91>
    2378:	6b b1       	in	r22, 0x0b	; 11
    237a:	87 70       	andi	r24, 0x07	; 7
    237c:	d9 01       	movw	r26, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <__stack+0x1a85>
    2380:	aa 0f       	add	r26, r26
    2382:	bb 1f       	adc	r27, r27
    2384:	8a 95       	dec	r24
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <__stack+0x1a81>
    2388:	cd 01       	movw	r24, r26
    238a:	86 2b       	or	r24, r22
    238c:	8b b9       	out	0x0b, r24	; 11
    238e:	0b c0       	rjmp	.+22     	; 0x23a6 <__stack+0x1aa7>
    2390:	65 b1       	in	r22, 0x05	; 5
    2392:	87 70       	andi	r24, 0x07	; 7
    2394:	d9 01       	movw	r26, r18
    2396:	02 c0       	rjmp	.+4      	; 0x239c <__stack+0x1a9d>
    2398:	aa 0f       	add	r26, r26
    239a:	bb 1f       	adc	r27, r27
    239c:	8a 95       	dec	r24
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <__stack+0x1a99>
    23a0:	cd 01       	movw	r24, r26
    23a2:	86 2b       	or	r24, r22
    23a4:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    23a6:	85 81       	ldd	r24, Z+5	; 0x05
    23a8:	88 30       	cpi	r24, 0x08	; 8
    23aa:	60 f4       	brcc	.+24     	; 0x23c4 <__stack+0x1ac5>
    23ac:	6b b1       	in	r22, 0x0b	; 11
    23ae:	87 70       	andi	r24, 0x07	; 7
    23b0:	d9 01       	movw	r26, r18
    23b2:	02 c0       	rjmp	.+4      	; 0x23b8 <__stack+0x1ab9>
    23b4:	aa 0f       	add	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	8a 95       	dec	r24
    23ba:	e2 f7       	brpl	.-8      	; 0x23b4 <__stack+0x1ab5>
    23bc:	cd 01       	movw	r24, r26
    23be:	86 2b       	or	r24, r22
    23c0:	8b b9       	out	0x0b, r24	; 11
    23c2:	0b c0       	rjmp	.+22     	; 0x23da <__stack+0x1adb>
    23c4:	65 b1       	in	r22, 0x05	; 5
    23c6:	87 70       	andi	r24, 0x07	; 7
    23c8:	d9 01       	movw	r26, r18
    23ca:	02 c0       	rjmp	.+4      	; 0x23d0 <__stack+0x1ad1>
    23cc:	aa 0f       	add	r26, r26
    23ce:	bb 1f       	adc	r27, r27
    23d0:	8a 95       	dec	r24
    23d2:	e2 f7       	brpl	.-8      	; 0x23cc <__stack+0x1acd>
    23d4:	cd 01       	movw	r24, r26
    23d6:	86 2b       	or	r24, r22
    23d8:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    23da:	81 81       	ldd	r24, Z+1	; 0x01
    23dc:	88 30       	cpi	r24, 0x08	; 8
    23de:	60 f4       	brcc	.+24     	; 0x23f8 <__stack+0x1af9>
    23e0:	6b b1       	in	r22, 0x0b	; 11
    23e2:	87 70       	andi	r24, 0x07	; 7
    23e4:	d9 01       	movw	r26, r18
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <__stack+0x1aed>
    23e8:	aa 0f       	add	r26, r26
    23ea:	bb 1f       	adc	r27, r27
    23ec:	8a 95       	dec	r24
    23ee:	e2 f7       	brpl	.-8      	; 0x23e8 <__stack+0x1ae9>
    23f0:	cd 01       	movw	r24, r26
    23f2:	86 2b       	or	r24, r22
    23f4:	8b b9       	out	0x0b, r24	; 11
    23f6:	0b c0       	rjmp	.+22     	; 0x240e <__stack+0x1b0f>
    23f8:	65 b1       	in	r22, 0x05	; 5
    23fa:	87 70       	andi	r24, 0x07	; 7
    23fc:	d9 01       	movw	r26, r18
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <__stack+0x1b05>
    2400:	aa 0f       	add	r26, r26
    2402:	bb 1f       	adc	r27, r27
    2404:	8a 95       	dec	r24
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <__stack+0x1b01>
    2408:	cd 01       	movw	r24, r26
    240a:	86 2b       	or	r24, r22
    240c:	85 b9       	out	0x05, r24	; 5
    240e:	b5 e0       	ldi	r27, 0x05	; 5
    2410:	ba 95       	dec	r27
    2412:	f1 f7       	brne	.-4      	; 0x2410 <__stack+0x1b11>
    2414:	00 00       	nop
    2416:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2418:	88 30       	cpi	r24, 0x08	; 8
    241a:	68 f4       	brcc	.+26     	; 0x2436 <__stack+0x1b37>
    241c:	9b b1       	in	r25, 0x0b	; 11
    241e:	87 70       	andi	r24, 0x07	; 7
    2420:	b9 01       	movw	r22, r18
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <__stack+0x1b29>
    2424:	66 0f       	add	r22, r22
    2426:	77 1f       	adc	r23, r23
    2428:	8a 95       	dec	r24
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <__stack+0x1b25>
    242c:	86 2f       	mov	r24, r22
    242e:	80 95       	com	r24
    2430:	89 23       	and	r24, r25
    2432:	8b b9       	out	0x0b, r24	; 11
    2434:	0c c0       	rjmp	.+24     	; 0x244e <__stack+0x1b4f>
    2436:	95 b1       	in	r25, 0x05	; 5
    2438:	87 70       	andi	r24, 0x07	; 7
    243a:	b9 01       	movw	r22, r18
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <__stack+0x1b43>
    243e:	66 0f       	add	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	8a 95       	dec	r24
    2444:	e2 f7       	brpl	.-8      	; 0x243e <__stack+0x1b3f>
    2446:	86 2f       	mov	r24, r22
    2448:	80 95       	com	r24
    244a:	89 23       	and	r24, r25
    244c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    244e:	ef e3       	ldi	r30, 0x3F	; 63
    2450:	ff e1       	ldi	r31, 0x1F	; 31
    2452:	31 97       	sbiw	r30, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <__stack+0x1b53>
    2456:	00 c0       	rjmp	.+0      	; 0x2458 <__stack+0x1b59>
    2458:	00 00       	nop
    245a:	84 ef       	ldi	r24, 0xF4	; 244
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	af e9       	ldi	r26, 0x9F	; 159
    2460:	bf e0       	ldi	r27, 0x0F	; 15
    2462:	11 97       	sbiw	r26, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <__stack+0x1b63>
    2466:	00 c0       	rjmp	.+0      	; 0x2468 <__stack+0x1b69>
    2468:	00 00       	nop
    246a:	01 97       	sbiw	r24, 0x01	; 1
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			// TODO: Implementar em assembly
			while (time > 0) {
    246c:	c1 f7       	brne	.-16     	; 0x245e <__stack+0x1b5f>
    246e:	41 50       	subi	r20, 0x01	; 1
    2470:	51 09       	sbc	r21, r1
		util::delay_ms(500);
	}
	
	dht11 = new component::DHT11(P13);
	
	for (int i = 0; i < 3; i++) {
    2472:	09 f0       	breq	.+2      	; 0x2476 <__stack+0x1b77>
    2474:	7c ce       	rjmp	.-776    	; 0x216e <__stack+0x186f>
		lcd->Write('.');
		util::delay_ms(500);
	}
}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	df 91       	pop	r29
    2480:	cf 91       	pop	r28
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	ff 90       	pop	r15
    2488:	ef 90       	pop	r14
    248a:	df 90       	pop	r13
    248c:	cf 90       	pop	r12
    248e:	bf 90       	pop	r11
    2490:	af 90       	pop	r10
    2492:	08 95       	ret

00002494 <_Z4loopv>:

void loop() {
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	a0 97       	sbiw	r28, 0x20	; 32
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
	
	static int8 temp = 0, hum = 0;
	dht11->Update();
    24b8:	00 91 62 01 	lds	r16, 0x0162	; 0x800162 <dht11>
    24bc:	10 91 63 01 	lds	r17, 0x0163	; 0x800163 <dht11+0x1>
					_cache[i] = 0;
			}
			
			private: inline void RequestUpdate() {
				
				mode(_port, OUTPUT);
    24c0:	61 e0       	ldi	r22, 0x01	; 1
    24c2:	d8 01       	movw	r26, r16
    24c4:	8c 91       	ld	r24, X
    24c6:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				enable(_port);
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 81       	ld	r24, Z
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
    24ce:	88 30       	cpi	r24, 0x08	; 8
    24d0:	70 f4       	brcc	.+28     	; 0x24ee <_Z4loopv+0x5a>
    24d2:	4b b1       	in	r20, 0x0b	; 11
    24d4:	87 70       	andi	r24, 0x07	; 7
    24d6:	21 e0       	ldi	r18, 0x01	; 1
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	b9 01       	movw	r22, r18
    24dc:	02 c0       	rjmp	.+4      	; 0x24e2 <_Z4loopv+0x4e>
    24de:	66 0f       	add	r22, r22
    24e0:	77 1f       	adc	r23, r23
    24e2:	8a 95       	dec	r24
    24e4:	e2 f7       	brpl	.-8      	; 0x24de <_Z4loopv+0x4a>
    24e6:	cb 01       	movw	r24, r22
    24e8:	84 2b       	or	r24, r20
    24ea:	8b b9       	out	0x0b, r24	; 11
    24ec:	0d c0       	rjmp	.+26     	; 0x2508 <_Z4loopv+0x74>
    24ee:	45 b1       	in	r20, 0x05	; 5
    24f0:	87 70       	andi	r24, 0x07	; 7
    24f2:	21 e0       	ldi	r18, 0x01	; 1
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	d9 01       	movw	r26, r18
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <_Z4loopv+0x6a>
    24fa:	aa 0f       	add	r26, r26
    24fc:	bb 1f       	adc	r27, r27
    24fe:	8a 95       	dec	r24
    2500:	e2 f7       	brpl	.-8      	; 0x24fa <_Z4loopv+0x66>
    2502:	cd 01       	movw	r24, r26
    2504:	84 2b       	or	r24, r20
    2506:	85 b9       	out	0x05, r24	; 5
				disable(_port);
    2508:	f8 01       	movw	r30, r16
    250a:	80 81       	ld	r24, Z
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
    250c:	88 30       	cpi	r24, 0x08	; 8
    250e:	78 f4       	brcc	.+30     	; 0x252e <_Z4loopv+0x9a>
    2510:	4b b1       	in	r20, 0x0b	; 11
    2512:	87 70       	andi	r24, 0x07	; 7
    2514:	21 e0       	ldi	r18, 0x01	; 1
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	b9 01       	movw	r22, r18
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <_Z4loopv+0x8c>
    251c:	66 0f       	add	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	8a 95       	dec	r24
    2522:	e2 f7       	brpl	.-8      	; 0x251c <_Z4loopv+0x88>
    2524:	cb 01       	movw	r24, r22
    2526:	80 95       	com	r24
    2528:	84 23       	and	r24, r20
    252a:	8b b9       	out	0x0b, r24	; 11
    252c:	0e c0       	rjmp	.+28     	; 0x254a <_Z4loopv+0xb6>
    252e:	45 b1       	in	r20, 0x05	; 5
    2530:	87 70       	andi	r24, 0x07	; 7
    2532:	21 e0       	ldi	r18, 0x01	; 1
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	d9 01       	movw	r26, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <_Z4loopv+0xaa>
    253a:	aa 0f       	add	r26, r26
    253c:	bb 1f       	adc	r27, r27
    253e:	8a 95       	dec	r24
    2540:	e2 f7       	brpl	.-8      	; 0x253a <_Z4loopv+0xa6>
    2542:	cd 01       	movw	r24, r26
    2544:	80 95       	com	r24
    2546:	84 23       	and	r24, r20
    2548:	85 b9       	out	0x05, r24	; 5
    254a:	bf ef       	ldi	r27, 0xFF	; 255
    254c:	e9 ef       	ldi	r30, 0xF9	; 249
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	b1 50       	subi	r27, 0x01	; 1
    2552:	e0 40       	sbci	r30, 0x00	; 0
    2554:	f0 40       	sbci	r31, 0x00	; 0
    2556:	e1 f7       	brne	.-8      	; 0x2550 <_Z4loopv+0xbc>
    2558:	00 c0       	rjmp	.+0      	; 0x255a <_Z4loopv+0xc6>
    255a:	00 00       	nop
				util::delay_ms_static(20);
				enable(_port);
    255c:	d8 01       	movw	r26, r16
    255e:	8c 91       	ld	r24, X
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
    2560:	88 30       	cpi	r24, 0x08	; 8
    2562:	70 f4       	brcc	.+28     	; 0x2580 <_Z4loopv+0xec>
    2564:	4b b1       	in	r20, 0x0b	; 11
    2566:	87 70       	andi	r24, 0x07	; 7
    2568:	21 e0       	ldi	r18, 0x01	; 1
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	f9 01       	movw	r30, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <_Z4loopv+0xe0>
    2570:	ee 0f       	add	r30, r30
    2572:	ff 1f       	adc	r31, r31
    2574:	8a 95       	dec	r24
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <_Z4loopv+0xdc>
    2578:	cf 01       	movw	r24, r30
    257a:	84 2b       	or	r24, r20
    257c:	8b b9       	out	0x0b, r24	; 11
    257e:	0d c0       	rjmp	.+26     	; 0x259a <_Z4loopv+0x106>
    2580:	45 b1       	in	r20, 0x05	; 5
    2582:	87 70       	andi	r24, 0x07	; 7
    2584:	21 e0       	ldi	r18, 0x01	; 1
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	b9 01       	movw	r22, r18
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <_Z4loopv+0xfc>
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	8a 95       	dec	r24
    2592:	e2 f7       	brpl	.-8      	; 0x258c <_Z4loopv+0xf8>
    2594:	cb 01       	movw	r24, r22
    2596:	84 2b       	or	r24, r20
    2598:	85 b9       	out	0x05, r24	; 5
				mode(_port, INPUT);
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	d8 01       	movw	r26, r16
    259e:	8c 91       	ld	r24, X
    25a0:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				
				while (read(_port));
    25a4:	f8 01       	movw	r30, r16
    25a6:	40 81       	ld	r20, Z
    25a8:	84 2f       	mov	r24, r20
    25aa:	87 70       	andi	r24, 0x07	; 7
    25ac:	21 e0       	ldi	r18, 0x01	; 1
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <_Z4loopv+0x122>
    25b2:	22 0f       	add	r18, r18
    25b4:	33 1f       	adc	r19, r19
    25b6:	8a 95       	dec	r24
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <_Z4loopv+0x11e>
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
		}
		
		inline bool read(EPort port) {
			return _GET_BIT(fcrin(port), nmr(port));
    25ba:	48 30       	cpi	r20, 0x08	; 8
    25bc:	10 f4       	brcc	.+4      	; 0x25c2 <_Z4loopv+0x12e>
    25be:	89 b1       	in	r24, 0x09	; 9
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <_Z4loopv+0x130>
    25c2:	83 b1       	in	r24, 0x03	; 3
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	82 23       	and	r24, r18
    25c8:	93 23       	and	r25, r19
    25ca:	89 2b       	or	r24, r25
    25cc:	b1 f7       	brne	.-20     	; 0x25ba <_Z4loopv+0x126>
    25ce:	48 30       	cpi	r20, 0x08	; 8
    25d0:	10 f4       	brcc	.+4      	; 0x25d6 <_Z4loopv+0x142>
    25d2:	89 b1       	in	r24, 0x09	; 9
    25d4:	01 c0       	rjmp	.+2      	; 0x25d8 <_Z4loopv+0x144>
    25d6:	83 b1       	in	r24, 0x03	; 3
				while (!read(_port));
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	82 23       	and	r24, r18
    25dc:	93 23       	and	r25, r19
    25de:	89 2b       	or	r24, r25
    25e0:	b1 f3       	breq	.-20     	; 0x25ce <_Z4loopv+0x13a>
    25e2:	48 30       	cpi	r20, 0x08	; 8
    25e4:	10 f4       	brcc	.+4      	; 0x25ea <_Z4loopv+0x156>
    25e6:	89 b1       	in	r24, 0x09	; 9
    25e8:	01 c0       	rjmp	.+2      	; 0x25ec <_Z4loopv+0x158>
    25ea:	83 b1       	in	r24, 0x03	; 3
				while (read(_port));
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	82 23       	and	r24, r18
    25f0:	93 23       	and	r25, r19
    25f2:	89 2b       	or	r24, r25
    25f4:	b1 f7       	brne	.-20     	; 0x25e2 <_Z4loopv+0x14e>
				
			}
			
			private: inline void ClearCache() {
				for (int i = 0; i < 5; i++)
					_cache[i] = 0;
    25f6:	d8 01       	movw	r26, r16
    25f8:	11 96       	adiw	r26, 0x01	; 1
    25fa:	1c 92       	st	X, r1
    25fc:	11 97       	sbiw	r26, 0x01	; 1
    25fe:	12 96       	adiw	r26, 0x02	; 2
    2600:	1c 92       	st	X, r1
    2602:	12 97       	sbiw	r26, 0x02	; 2
    2604:	13 96       	adiw	r26, 0x03	; 3
    2606:	1c 92       	st	X, r1
    2608:	13 97       	sbiw	r26, 0x03	; 3
    260a:	14 96       	adiw	r26, 0x04	; 4
    260c:	1c 92       	st	X, r1
    260e:	14 97       	sbiw	r26, 0x04	; 4
    2610:	15 96       	adiw	r26, 0x05	; 5
    2612:	1c 92       	st	X, r1
    2614:	a1 2c       	mov	r10, r1
    2616:	b1 2c       	mov	r11, r1
    2618:	cc 24       	eor	r12, r12
    261a:	c3 94       	inc	r12
    261c:	d1 2c       	mov	r13, r1
						count++;
					}
					
					if (count >= 14) {						
						_cache[reg] = util::set_bit(_cache[reg], i % 8);
						printf("_cache[%d] = %d\n", reg, _cache[reg]);
    261e:	0f 2e       	mov	r0, r31
    2620:	f2 e2       	ldi	r31, 0x22	; 34
    2622:	ef 2e       	mov	r14, r31
    2624:	f1 e0       	ldi	r31, 0x01	; 1
    2626:	ff 2e       	mov	r15, r31
    2628:	f0 2d       	mov	r31, r0
				ClearCache();
				
				uint8 reg = 0;
				for (uint8 i = 0; i < 40; i++) {
					
					while (!read(_port));
    262a:	f8 01       	movw	r30, r16
    262c:	20 81       	ld	r18, Z
    262e:	82 2f       	mov	r24, r18
    2630:	87 70       	andi	r24, 0x07	; 7
    2632:	a6 01       	movw	r20, r12
    2634:	02 c0       	rjmp	.+4      	; 0x263a <_Z4loopv+0x1a6>
    2636:	44 0f       	add	r20, r20
    2638:	55 1f       	adc	r21, r21
    263a:	8a 95       	dec	r24
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <_Z4loopv+0x1a2>
    263e:	28 30       	cpi	r18, 0x08	; 8
    2640:	10 f4       	brcc	.+4      	; 0x2646 <_Z4loopv+0x1b2>
    2642:	89 b1       	in	r24, 0x09	; 9
    2644:	01 c0       	rjmp	.+2      	; 0x2648 <_Z4loopv+0x1b4>
    2646:	83 b1       	in	r24, 0x03	; 3
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	84 23       	and	r24, r20
    264c:	95 23       	and	r25, r21
    264e:	89 2b       	or	r24, r25
    2650:	b1 f3       	breq	.-20     	; 0x263e <_Z4loopv+0x1aa>
    2652:	30 e0       	ldi	r19, 0x00	; 0
					
					uint8 count = 0;
					while(read(_port) && count <= 35) {
    2654:	d8 01       	movw	r26, r16
    2656:	2c 91       	ld	r18, X
    2658:	28 30       	cpi	r18, 0x08	; 8
    265a:	10 f4       	brcc	.+4      	; 0x2660 <_Z4loopv+0x1cc>
    265c:	89 b1       	in	r24, 0x09	; 9
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <_Z4loopv+0x1ce>
    2660:	83 b1       	in	r24, 0x03	; 3
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	27 70       	andi	r18, 0x07	; 7
    2666:	02 c0       	rjmp	.+4      	; 0x266c <_Z4loopv+0x1d8>
    2668:	95 95       	asr	r25
    266a:	87 95       	ror	r24
    266c:	2a 95       	dec	r18
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <_Z4loopv+0x1d4>
    2670:	80 fd       	sbrc	r24, 0
    2672:	02 c0       	rjmp	.+4      	; 0x2678 <_Z4loopv+0x1e4>
    2674:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <_Z4loopv+0x14a6>
    2678:	34 32       	cpi	r19, 0x24	; 36
    267a:	11 f0       	breq	.+4      	; 0x2680 <_Z4loopv+0x1ec>
    267c:	0c 94 96 1c 	jmp	0x392c	; 0x392c <_Z4loopv+0x1498>
		inline uint8 get_bit(byte w, uint8 pos) {
			return _GET_BIT(w, pos);
		}
		
		inline uint8 set_bit(byte w, uint8 pos) {
			return _SET_BIT(w, pos);
    2680:	8b 2d       	mov	r24, r11
    2682:	87 70       	andi	r24, 0x07	; 7
    2684:	f6 01       	movw	r30, r12
    2686:	02 c0       	rjmp	.+4      	; 0x268c <_Z4loopv+0x1f8>
    2688:	ee 0f       	add	r30, r30
    268a:	ff 1f       	adc	r31, r31
    268c:	8a 95       	dec	r24
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <_Z4loopv+0x1f4>
    2690:	cf 01       	movw	r24, r30
						util::delay_us_static(2);
						count++;
					}
					
					if (count >= 14) {						
						_cache[reg] = util::set_bit(_cache[reg], i % 8);
    2692:	f8 01       	movw	r30, r16
    2694:	ea 0d       	add	r30, r10
    2696:	f1 1d       	adc	r31, r1
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	89 2b       	or	r24, r25
    269c:	81 83       	std	Z+1, r24	; 0x01
						printf("_cache[%d] = %d\n", reg, _cache[reg]);
    269e:	1f 92       	push	r1
    26a0:	8f 93       	push	r24
    26a2:	1f 92       	push	r1
    26a4:	af 92       	push	r10
    26a6:	ff 92       	push	r15
    26a8:	ef 92       	push	r14
    26aa:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <printf>
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
					}
					if (i % 8 == 0) reg++;
    26ba:	8b 2d       	mov	r24, r11
    26bc:	87 70       	andi	r24, 0x07	; 7
    26be:	09 f4       	brne	.+2      	; 0x26c2 <_Z4loopv+0x22e>
    26c0:	a3 94       	inc	r10
				
				RequestUpdate();
				ClearCache();
				
				uint8 reg = 0;
				for (uint8 i = 0; i < 40; i++) {
    26c2:	b3 94       	inc	r11
    26c4:	f8 e2       	ldi	r31, 0x28	; 40
    26c6:	bf 12       	cpse	r11, r31
    26c8:	b0 cf       	rjmp	.-160    	; 0x262a <_Z4loopv+0x196>
	temp = dht11->ReadTemperature();
    26ca:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <dht11>
    26ce:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <dht11+0x1>
			public: DHT11(EPort port) : _port(port) {
				util::delay_ms_static(1000);
			}
			
			public: int8 ReadTemperature() {
				return _cache[2];
    26d2:	83 81       	ldd	r24, Z+3	; 0x03
    26d4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <_ZZ4loopvE4temp>
			}
			
			public: int8 ReadHumidity() {
				return _cache[0];
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
	hum = dht11->ReadHumidity();
    26da:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <__data_end>
	
	printf("\n%2d, %2d\n\n", temp, hum);
    26de:	29 2f       	mov	r18, r25
    26e0:	09 2e       	mov	r0, r25
    26e2:	00 0c       	add	r0, r0
    26e4:	33 0b       	sbc	r19, r19
    26e6:	3f 93       	push	r19
    26e8:	9f 93       	push	r25
    26ea:	28 2f       	mov	r18, r24
    26ec:	08 2e       	mov	r0, r24
    26ee:	00 0c       	add	r0, r0
    26f0:	33 0b       	sbc	r19, r19
    26f2:	3f 93       	push	r19
    26f4:	8f 93       	push	r24
    26f6:	83 e3       	ldi	r24, 0x33	; 51
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	9f 93       	push	r25
    26fc:	8f 93       	push	r24
    26fe:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <printf>
	
	char str[32];
	sprintf(str, "Temp.     %4d CHumidade  %4d %%", temp, hum);
    2702:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
    2706:	28 2f       	mov	r18, r24
    2708:	08 2e       	mov	r0, r24
    270a:	00 0c       	add	r0, r0
    270c:	33 0b       	sbc	r19, r19
    270e:	3f 93       	push	r19
    2710:	8f 93       	push	r24
    2712:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <_ZZ4loopvE4temp>
    2716:	28 2f       	mov	r18, r24
    2718:	08 2e       	mov	r0, r24
    271a:	00 0c       	add	r0, r0
    271c:	33 0b       	sbc	r19, r19
    271e:	3f 93       	push	r19
    2720:	8f 93       	push	r24
    2722:	8f e3       	ldi	r24, 0x3F	; 63
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	9f 93       	push	r25
    2728:	8f 93       	push	r24
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	9f 93       	push	r25
    2730:	8f 93       	push	r24
    2732:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <sprintf>
	lcd->Write(str);
    2736:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <lcd>
    273a:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    273e:	82 81       	ldd	r24, Z+2	; 0x02
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	88 30       	cpi	r24, 0x08	; 8
    274c:	78 f4       	brcc	.+30     	; 0x276c <_Z4loopv+0x2d8>
    274e:	4b b1       	in	r20, 0x0b	; 11
    2750:	87 70       	andi	r24, 0x07	; 7
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	b9 01       	movw	r22, r18
    2758:	02 c0       	rjmp	.+4      	; 0x275e <_Z4loopv+0x2ca>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	8a 95       	dec	r24
    2760:	e2 f7       	brpl	.-8      	; 0x275a <_Z4loopv+0x2c6>
    2762:	cb 01       	movw	r24, r22
    2764:	80 95       	com	r24
    2766:	84 23       	and	r24, r20
    2768:	8b b9       	out	0x0b, r24	; 11
    276a:	0e c0       	rjmp	.+28     	; 0x2788 <_Z4loopv+0x2f4>
    276c:	45 b1       	in	r20, 0x05	; 5
    276e:	87 70       	andi	r24, 0x07	; 7
    2770:	21 e0       	ldi	r18, 0x01	; 1
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	d9 01       	movw	r26, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <_Z4loopv+0x2e8>
    2778:	aa 0f       	add	r26, r26
    277a:	bb 1f       	adc	r27, r27
    277c:	8a 95       	dec	r24
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <_Z4loopv+0x2e4>
    2780:	cd 01       	movw	r24, r26
    2782:	80 95       	com	r24
    2784:	84 23       	and	r24, r20
    2786:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2788:	83 81       	ldd	r24, Z+3	; 0x03
    278a:	88 30       	cpi	r24, 0x08	; 8
    278c:	78 f4       	brcc	.+30     	; 0x27ac <_Z4loopv+0x318>
    278e:	4b b1       	in	r20, 0x0b	; 11
    2790:	87 70       	andi	r24, 0x07	; 7
    2792:	21 e0       	ldi	r18, 0x01	; 1
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	89 01       	movw	r16, r18
    2798:	02 c0       	rjmp	.+4      	; 0x279e <_Z4loopv+0x30a>
    279a:	00 0f       	add	r16, r16
    279c:	11 1f       	adc	r17, r17
    279e:	8a 95       	dec	r24
    27a0:	e2 f7       	brpl	.-8      	; 0x279a <_Z4loopv+0x306>
    27a2:	c8 01       	movw	r24, r16
    27a4:	80 95       	com	r24
    27a6:	84 23       	and	r24, r20
    27a8:	8b b9       	out	0x0b, r24	; 11
    27aa:	0e c0       	rjmp	.+28     	; 0x27c8 <_Z4loopv+0x334>
    27ac:	45 b1       	in	r20, 0x05	; 5
    27ae:	87 70       	andi	r24, 0x07	; 7
    27b0:	21 e0       	ldi	r18, 0x01	; 1
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	b9 01       	movw	r22, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <_Z4loopv+0x328>
    27b8:	66 0f       	add	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	8a 95       	dec	r24
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <_Z4loopv+0x324>
    27c0:	cb 01       	movw	r24, r22
    27c2:	80 95       	com	r24
    27c4:	84 23       	and	r24, r20
    27c6:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    27c8:	84 81       	ldd	r24, Z+4	; 0x04
    27ca:	88 30       	cpi	r24, 0x08	; 8
    27cc:	78 f4       	brcc	.+30     	; 0x27ec <_Z4loopv+0x358>
    27ce:	4b b1       	in	r20, 0x0b	; 11
    27d0:	87 70       	andi	r24, 0x07	; 7
    27d2:	21 e0       	ldi	r18, 0x01	; 1
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	d9 01       	movw	r26, r18
    27d8:	02 c0       	rjmp	.+4      	; 0x27de <_Z4loopv+0x34a>
    27da:	aa 0f       	add	r26, r26
    27dc:	bb 1f       	adc	r27, r27
    27de:	8a 95       	dec	r24
    27e0:	e2 f7       	brpl	.-8      	; 0x27da <_Z4loopv+0x346>
    27e2:	cd 01       	movw	r24, r26
    27e4:	80 95       	com	r24
    27e6:	84 23       	and	r24, r20
    27e8:	8b b9       	out	0x0b, r24	; 11
    27ea:	0e c0       	rjmp	.+28     	; 0x2808 <_Z4loopv+0x374>
    27ec:	45 b1       	in	r20, 0x05	; 5
    27ee:	87 70       	andi	r24, 0x07	; 7
    27f0:	21 e0       	ldi	r18, 0x01	; 1
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	89 01       	movw	r16, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <_Z4loopv+0x368>
    27f8:	00 0f       	add	r16, r16
    27fa:	11 1f       	adc	r17, r17
    27fc:	8a 95       	dec	r24
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <_Z4loopv+0x364>
    2800:	c8 01       	movw	r24, r16
    2802:	80 95       	com	r24
    2804:	84 23       	and	r24, r20
    2806:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2808:	85 81       	ldd	r24, Z+5	; 0x05
    280a:	88 30       	cpi	r24, 0x08	; 8
    280c:	78 f4       	brcc	.+30     	; 0x282c <_Z4loopv+0x398>
    280e:	4b b1       	in	r20, 0x0b	; 11
    2810:	87 70       	andi	r24, 0x07	; 7
    2812:	21 e0       	ldi	r18, 0x01	; 1
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	b9 01       	movw	r22, r18
    2818:	02 c0       	rjmp	.+4      	; 0x281e <_Z4loopv+0x38a>
    281a:	66 0f       	add	r22, r22
    281c:	77 1f       	adc	r23, r23
    281e:	8a 95       	dec	r24
    2820:	e2 f7       	brpl	.-8      	; 0x281a <_Z4loopv+0x386>
    2822:	cb 01       	movw	r24, r22
    2824:	80 95       	com	r24
    2826:	84 23       	and	r24, r20
    2828:	8b b9       	out	0x0b, r24	; 11
    282a:	0e c0       	rjmp	.+28     	; 0x2848 <_Z4loopv+0x3b4>
    282c:	45 b1       	in	r20, 0x05	; 5
    282e:	87 70       	andi	r24, 0x07	; 7
    2830:	21 e0       	ldi	r18, 0x01	; 1
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	d9 01       	movw	r26, r18
    2836:	02 c0       	rjmp	.+4      	; 0x283c <_Z4loopv+0x3a8>
    2838:	aa 0f       	add	r26, r26
    283a:	bb 1f       	adc	r27, r27
    283c:	8a 95       	dec	r24
    283e:	e2 f7       	brpl	.-8      	; 0x2838 <_Z4loopv+0x3a4>
    2840:	cd 01       	movw	r24, r26
    2842:	80 95       	com	r24
    2844:	84 23       	and	r24, r20
    2846:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2848:	80 81       	ld	r24, Z
    284a:	88 30       	cpi	r24, 0x08	; 8
    284c:	78 f4       	brcc	.+30     	; 0x286c <_Z4loopv+0x3d8>
    284e:	4b b1       	in	r20, 0x0b	; 11
    2850:	87 70       	andi	r24, 0x07	; 7
    2852:	21 e0       	ldi	r18, 0x01	; 1
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	89 01       	movw	r16, r18
    2858:	02 c0       	rjmp	.+4      	; 0x285e <_Z4loopv+0x3ca>
    285a:	00 0f       	add	r16, r16
    285c:	11 1f       	adc	r17, r17
    285e:	8a 95       	dec	r24
    2860:	e2 f7       	brpl	.-8      	; 0x285a <_Z4loopv+0x3c6>
    2862:	c8 01       	movw	r24, r16
    2864:	80 95       	com	r24
    2866:	84 23       	and	r24, r20
    2868:	8b b9       	out	0x0b, r24	; 11
    286a:	0e c0       	rjmp	.+28     	; 0x2888 <_Z4loopv+0x3f4>
    286c:	45 b1       	in	r20, 0x05	; 5
    286e:	87 70       	andi	r24, 0x07	; 7
    2870:	21 e0       	ldi	r18, 0x01	; 1
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	b9 01       	movw	r22, r18
    2876:	02 c0       	rjmp	.+4      	; 0x287c <_Z4loopv+0x3e8>
    2878:	66 0f       	add	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	8a 95       	dec	r24
    287e:	e2 f7       	brpl	.-8      	; 0x2878 <_Z4loopv+0x3e4>
    2880:	cb 01       	movw	r24, r22
    2882:	80 95       	com	r24
    2884:	84 23       	and	r24, r20
    2886:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2888:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    288a:	88 30       	cpi	r24, 0x08	; 8
    288c:	70 f4       	brcc	.+28     	; 0x28aa <_Z4loopv+0x416>
    288e:	4b b1       	in	r20, 0x0b	; 11
    2890:	87 70       	andi	r24, 0x07	; 7
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	d9 01       	movw	r26, r18
    2898:	02 c0       	rjmp	.+4      	; 0x289e <_Z4loopv+0x40a>
    289a:	aa 0f       	add	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	8a 95       	dec	r24
    28a0:	e2 f7       	brpl	.-8      	; 0x289a <_Z4loopv+0x406>
    28a2:	cd 01       	movw	r24, r26
    28a4:	84 2b       	or	r24, r20
    28a6:	8b b9       	out	0x0b, r24	; 11
    28a8:	0d c0       	rjmp	.+26     	; 0x28c4 <_Z4loopv+0x430>
    28aa:	45 b1       	in	r20, 0x05	; 5
    28ac:	87 70       	andi	r24, 0x07	; 7
    28ae:	21 e0       	ldi	r18, 0x01	; 1
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	89 01       	movw	r16, r18
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <_Z4loopv+0x426>
    28b6:	00 0f       	add	r16, r16
    28b8:	11 1f       	adc	r17, r17
    28ba:	8a 95       	dec	r24
    28bc:	e2 f7       	brpl	.-8      	; 0x28b6 <_Z4loopv+0x422>
    28be:	c8 01       	movw	r24, r16
    28c0:	84 2b       	or	r24, r20
    28c2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28c4:	15 e0       	ldi	r17, 0x05	; 5
    28c6:	1a 95       	dec	r17
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <_Z4loopv+0x432>
    28ca:	00 00       	nop
    28cc:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    28ce:	88 30       	cpi	r24, 0x08	; 8
    28d0:	78 f4       	brcc	.+30     	; 0x28f0 <_Z4loopv+0x45c>
    28d2:	4b b1       	in	r20, 0x0b	; 11
    28d4:	87 70       	andi	r24, 0x07	; 7
    28d6:	21 e0       	ldi	r18, 0x01	; 1
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	b9 01       	movw	r22, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <_Z4loopv+0x44e>
    28de:	66 0f       	add	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	8a 95       	dec	r24
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <_Z4loopv+0x44a>
    28e6:	cb 01       	movw	r24, r22
    28e8:	80 95       	com	r24
    28ea:	84 23       	and	r24, r20
    28ec:	8b b9       	out	0x0b, r24	; 11
    28ee:	0e c0       	rjmp	.+28     	; 0x290c <_Z4loopv+0x478>
    28f0:	45 b1       	in	r20, 0x05	; 5
    28f2:	87 70       	andi	r24, 0x07	; 7
    28f4:	21 e0       	ldi	r18, 0x01	; 1
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	d9 01       	movw	r26, r18
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <_Z4loopv+0x46c>
    28fc:	aa 0f       	add	r26, r26
    28fe:	bb 1f       	adc	r27, r27
    2900:	8a 95       	dec	r24
    2902:	e2 f7       	brpl	.-8      	; 0x28fc <_Z4loopv+0x468>
    2904:	cd 01       	movw	r24, r26
    2906:	80 95       	com	r24
    2908:	84 23       	and	r24, r20
    290a:	85 b9       	out	0x05, r24	; 5
    290c:	8f e1       	ldi	r24, 0x1F	; 31
    290e:	93 e0       	ldi	r25, 0x03	; 3
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <_Z4loopv+0x47c>
    2914:	00 c0       	rjmp	.+0      	; 0x2916 <_Z4loopv+0x482>
    2916:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2918:	82 81       	ldd	r24, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    291a:	88 30       	cpi	r24, 0x08	; 8
    291c:	70 f4       	brcc	.+28     	; 0x293a <_Z4loopv+0x4a6>
    291e:	4b b1       	in	r20, 0x0b	; 11
    2920:	87 70       	andi	r24, 0x07	; 7
    2922:	21 e0       	ldi	r18, 0x01	; 1
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	d9 01       	movw	r26, r18
    2928:	02 c0       	rjmp	.+4      	; 0x292e <_Z4loopv+0x49a>
    292a:	aa 0f       	add	r26, r26
    292c:	bb 1f       	adc	r27, r27
    292e:	8a 95       	dec	r24
    2930:	e2 f7       	brpl	.-8      	; 0x292a <_Z4loopv+0x496>
    2932:	cd 01       	movw	r24, r26
    2934:	84 2b       	or	r24, r20
    2936:	8b b9       	out	0x0b, r24	; 11
    2938:	0d c0       	rjmp	.+26     	; 0x2954 <_Z4loopv+0x4c0>
    293a:	45 b1       	in	r20, 0x05	; 5
    293c:	87 70       	andi	r24, 0x07	; 7
    293e:	21 e0       	ldi	r18, 0x01	; 1
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	89 01       	movw	r16, r18
    2944:	02 c0       	rjmp	.+4      	; 0x294a <_Z4loopv+0x4b6>
    2946:	00 0f       	add	r16, r16
    2948:	11 1f       	adc	r17, r17
    294a:	8a 95       	dec	r24
    294c:	e2 f7       	brpl	.-8      	; 0x2946 <_Z4loopv+0x4b2>
    294e:	c8 01       	movw	r24, r16
    2950:	84 2b       	or	r24, r20
    2952:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    2954:	83 81       	ldd	r24, Z+3	; 0x03
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2956:	88 30       	cpi	r24, 0x08	; 8
    2958:	78 f4       	brcc	.+30     	; 0x2978 <_Z4loopv+0x4e4>
    295a:	4b b1       	in	r20, 0x0b	; 11
    295c:	87 70       	andi	r24, 0x07	; 7
    295e:	21 e0       	ldi	r18, 0x01	; 1
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	b9 01       	movw	r22, r18
    2964:	02 c0       	rjmp	.+4      	; 0x296a <_Z4loopv+0x4d6>
    2966:	66 0f       	add	r22, r22
    2968:	77 1f       	adc	r23, r23
    296a:	8a 95       	dec	r24
    296c:	e2 f7       	brpl	.-8      	; 0x2966 <_Z4loopv+0x4d2>
    296e:	cb 01       	movw	r24, r22
    2970:	80 95       	com	r24
    2972:	84 23       	and	r24, r20
    2974:	8b b9       	out	0x0b, r24	; 11
    2976:	0e c0       	rjmp	.+28     	; 0x2994 <_Z4loopv+0x500>
    2978:	45 b1       	in	r20, 0x05	; 5
    297a:	87 70       	andi	r24, 0x07	; 7
    297c:	21 e0       	ldi	r18, 0x01	; 1
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	d9 01       	movw	r26, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <_Z4loopv+0x4f4>
    2984:	aa 0f       	add	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	8a 95       	dec	r24
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <_Z4loopv+0x4f0>
    298c:	cd 01       	movw	r24, r26
    298e:	80 95       	com	r24
    2990:	84 23       	and	r24, r20
    2992:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    2994:	84 81       	ldd	r24, Z+4	; 0x04
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	78 f4       	brcc	.+30     	; 0x29b8 <_Z4loopv+0x524>
    299a:	4b b1       	in	r20, 0x0b	; 11
    299c:	87 70       	andi	r24, 0x07	; 7
    299e:	21 e0       	ldi	r18, 0x01	; 1
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	89 01       	movw	r16, r18
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <_Z4loopv+0x516>
    29a6:	00 0f       	add	r16, r16
    29a8:	11 1f       	adc	r17, r17
    29aa:	8a 95       	dec	r24
    29ac:	e2 f7       	brpl	.-8      	; 0x29a6 <_Z4loopv+0x512>
    29ae:	c8 01       	movw	r24, r16
    29b0:	80 95       	com	r24
    29b2:	84 23       	and	r24, r20
    29b4:	8b b9       	out	0x0b, r24	; 11
    29b6:	0e c0       	rjmp	.+28     	; 0x29d4 <_Z4loopv+0x540>
    29b8:	45 b1       	in	r20, 0x05	; 5
    29ba:	87 70       	andi	r24, 0x07	; 7
    29bc:	21 e0       	ldi	r18, 0x01	; 1
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	b9 01       	movw	r22, r18
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <_Z4loopv+0x534>
    29c4:	66 0f       	add	r22, r22
    29c6:	77 1f       	adc	r23, r23
    29c8:	8a 95       	dec	r24
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <_Z4loopv+0x530>
    29cc:	cb 01       	movw	r24, r22
    29ce:	80 95       	com	r24
    29d0:	84 23       	and	r24, r20
    29d2:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    29d4:	85 81       	ldd	r24, Z+5	; 0x05
    29d6:	88 30       	cpi	r24, 0x08	; 8
    29d8:	78 f4       	brcc	.+30     	; 0x29f8 <_Z4loopv+0x564>
    29da:	4b b1       	in	r20, 0x0b	; 11
    29dc:	87 70       	andi	r24, 0x07	; 7
    29de:	21 e0       	ldi	r18, 0x01	; 1
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	d9 01       	movw	r26, r18
    29e4:	02 c0       	rjmp	.+4      	; 0x29ea <_Z4loopv+0x556>
    29e6:	aa 0f       	add	r26, r26
    29e8:	bb 1f       	adc	r27, r27
    29ea:	8a 95       	dec	r24
    29ec:	e2 f7       	brpl	.-8      	; 0x29e6 <_Z4loopv+0x552>
    29ee:	cd 01       	movw	r24, r26
    29f0:	80 95       	com	r24
    29f2:	84 23       	and	r24, r20
    29f4:	8b b9       	out	0x0b, r24	; 11
    29f6:	0e c0       	rjmp	.+28     	; 0x2a14 <_Z4loopv+0x580>
    29f8:	45 b1       	in	r20, 0x05	; 5
    29fa:	87 70       	andi	r24, 0x07	; 7
    29fc:	21 e0       	ldi	r18, 0x01	; 1
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	89 01       	movw	r16, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <_Z4loopv+0x574>
    2a04:	00 0f       	add	r16, r16
    2a06:	11 1f       	adc	r17, r17
    2a08:	8a 95       	dec	r24
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <_Z4loopv+0x570>
    2a0c:	c8 01       	movw	r24, r16
    2a0e:	80 95       	com	r24
    2a10:	84 23       	and	r24, r20
    2a12:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2a14:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2a16:	88 30       	cpi	r24, 0x08	; 8
    2a18:	70 f4       	brcc	.+28     	; 0x2a36 <_Z4loopv+0x5a2>
    2a1a:	4b b1       	in	r20, 0x0b	; 11
    2a1c:	87 70       	andi	r24, 0x07	; 7
    2a1e:	21 e0       	ldi	r18, 0x01	; 1
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	b9 01       	movw	r22, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <_Z4loopv+0x596>
    2a26:	66 0f       	add	r22, r22
    2a28:	77 1f       	adc	r23, r23
    2a2a:	8a 95       	dec	r24
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <_Z4loopv+0x592>
    2a2e:	cb 01       	movw	r24, r22
    2a30:	84 2b       	or	r24, r20
    2a32:	8b b9       	out	0x0b, r24	; 11
    2a34:	0d c0       	rjmp	.+26     	; 0x2a50 <_Z4loopv+0x5bc>
    2a36:	45 b1       	in	r20, 0x05	; 5
    2a38:	87 70       	andi	r24, 0x07	; 7
    2a3a:	21 e0       	ldi	r18, 0x01	; 1
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	d9 01       	movw	r26, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <_Z4loopv+0x5b2>
    2a42:	aa 0f       	add	r26, r26
    2a44:	bb 1f       	adc	r27, r27
    2a46:	8a 95       	dec	r24
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <_Z4loopv+0x5ae>
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	84 2b       	or	r24, r20
    2a4e:	85 b9       	out	0x05, r24	; 5
    2a50:	b5 e0       	ldi	r27, 0x05	; 5
    2a52:	ba 95       	dec	r27
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <_Z4loopv+0x5be>
    2a56:	00 00       	nop
    2a58:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2a5a:	88 30       	cpi	r24, 0x08	; 8
    2a5c:	78 f4       	brcc	.+30     	; 0x2a7c <_Z4loopv+0x5e8>
    2a5e:	4b b1       	in	r20, 0x0b	; 11
    2a60:	87 70       	andi	r24, 0x07	; 7
    2a62:	21 e0       	ldi	r18, 0x01	; 1
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	89 01       	movw	r16, r18
    2a68:	02 c0       	rjmp	.+4      	; 0x2a6e <_Z4loopv+0x5da>
    2a6a:	00 0f       	add	r16, r16
    2a6c:	11 1f       	adc	r17, r17
    2a6e:	8a 95       	dec	r24
    2a70:	e2 f7       	brpl	.-8      	; 0x2a6a <_Z4loopv+0x5d6>
    2a72:	c8 01       	movw	r24, r16
    2a74:	80 95       	com	r24
    2a76:	84 23       	and	r24, r20
    2a78:	8b b9       	out	0x0b, r24	; 11
    2a7a:	0e c0       	rjmp	.+28     	; 0x2a98 <_Z4loopv+0x604>
    2a7c:	45 b1       	in	r20, 0x05	; 5
    2a7e:	87 70       	andi	r24, 0x07	; 7
    2a80:	21 e0       	ldi	r18, 0x01	; 1
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	b9 01       	movw	r22, r18
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <_Z4loopv+0x5f8>
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	8a 95       	dec	r24
    2a8e:	e2 f7       	brpl	.-8      	; 0x2a88 <_Z4loopv+0x5f4>
    2a90:	cb 01       	movw	r24, r22
    2a92:	80 95       	com	r24
    2a94:	84 23       	and	r24, r20
    2a96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a98:	8f e3       	ldi	r24, 0x3F	; 63
    2a9a:	9f e1       	ldi	r25, 0x1F	; 31
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <_Z4loopv+0x608>
    2aa0:	00 c0       	rjmp	.+0      	; 0x2aa2 <_Z4loopv+0x60e>
    2aa2:	00 00       	nop
    2aa4:	af e3       	ldi	r26, 0x3F	; 63
    2aa6:	bf e1       	ldi	r27, 0x1F	; 31
    2aa8:	11 97       	sbiw	r26, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <_Z4loopv+0x614>
    2aac:	00 c0       	rjmp	.+0      	; 0x2aae <_Z4loopv+0x61a>
    2aae:	00 00       	nop
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	88 30       	cpi	r24, 0x08	; 8
    2ab4:	78 f4       	brcc	.+30     	; 0x2ad4 <_Z4loopv+0x640>
    2ab6:	4b b1       	in	r20, 0x0b	; 11
    2ab8:	87 70       	andi	r24, 0x07	; 7
    2aba:	21 e0       	ldi	r18, 0x01	; 1
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	89 01       	movw	r16, r18
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <_Z4loopv+0x632>
    2ac2:	00 0f       	add	r16, r16
    2ac4:	11 1f       	adc	r17, r17
    2ac6:	8a 95       	dec	r24
    2ac8:	e2 f7       	brpl	.-8      	; 0x2ac2 <_Z4loopv+0x62e>
    2aca:	c8 01       	movw	r24, r16
    2acc:	80 95       	com	r24
    2ace:	84 23       	and	r24, r20
    2ad0:	8b b9       	out	0x0b, r24	; 11
    2ad2:	0e c0       	rjmp	.+28     	; 0x2af0 <_Z4loopv+0x65c>
    2ad4:	45 b1       	in	r20, 0x05	; 5
    2ad6:	87 70       	andi	r24, 0x07	; 7
    2ad8:	21 e0       	ldi	r18, 0x01	; 1
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	b9 01       	movw	r22, r18
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <_Z4loopv+0x650>
    2ae0:	66 0f       	add	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	8a 95       	dec	r24
    2ae6:	e2 f7       	brpl	.-8      	; 0x2ae0 <_Z4loopv+0x64c>
    2ae8:	cb 01       	movw	r24, r22
    2aea:	80 95       	com	r24
    2aec:	84 23       	and	r24, r20
    2aee:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2af0:	83 81       	ldd	r24, Z+3	; 0x03
    2af2:	88 30       	cpi	r24, 0x08	; 8
    2af4:	78 f4       	brcc	.+30     	; 0x2b14 <_Z4loopv+0x680>
    2af6:	4b b1       	in	r20, 0x0b	; 11
    2af8:	87 70       	andi	r24, 0x07	; 7
    2afa:	21 e0       	ldi	r18, 0x01	; 1
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	d9 01       	movw	r26, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <_Z4loopv+0x672>
    2b02:	aa 0f       	add	r26, r26
    2b04:	bb 1f       	adc	r27, r27
    2b06:	8a 95       	dec	r24
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <_Z4loopv+0x66e>
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	80 95       	com	r24
    2b0e:	84 23       	and	r24, r20
    2b10:	8b b9       	out	0x0b, r24	; 11
    2b12:	0e c0       	rjmp	.+28     	; 0x2b30 <_Z4loopv+0x69c>
    2b14:	45 b1       	in	r20, 0x05	; 5
    2b16:	87 70       	andi	r24, 0x07	; 7
    2b18:	21 e0       	ldi	r18, 0x01	; 1
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	89 01       	movw	r16, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <_Z4loopv+0x690>
    2b20:	00 0f       	add	r16, r16
    2b22:	11 1f       	adc	r17, r17
    2b24:	8a 95       	dec	r24
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <_Z4loopv+0x68c>
    2b28:	c8 01       	movw	r24, r16
    2b2a:	80 95       	com	r24
    2b2c:	84 23       	and	r24, r20
    2b2e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    2b30:	84 81       	ldd	r24, Z+4	; 0x04
    2b32:	88 30       	cpi	r24, 0x08	; 8
    2b34:	78 f4       	brcc	.+30     	; 0x2b54 <_Z4loopv+0x6c0>
    2b36:	4b b1       	in	r20, 0x0b	; 11
    2b38:	87 70       	andi	r24, 0x07	; 7
    2b3a:	21 e0       	ldi	r18, 0x01	; 1
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	b9 01       	movw	r22, r18
    2b40:	02 c0       	rjmp	.+4      	; 0x2b46 <_Z4loopv+0x6b2>
    2b42:	66 0f       	add	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	8a 95       	dec	r24
    2b48:	e2 f7       	brpl	.-8      	; 0x2b42 <_Z4loopv+0x6ae>
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	80 95       	com	r24
    2b4e:	84 23       	and	r24, r20
    2b50:	8b b9       	out	0x0b, r24	; 11
    2b52:	0e c0       	rjmp	.+28     	; 0x2b70 <_Z4loopv+0x6dc>
    2b54:	45 b1       	in	r20, 0x05	; 5
    2b56:	87 70       	andi	r24, 0x07	; 7
    2b58:	21 e0       	ldi	r18, 0x01	; 1
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	d9 01       	movw	r26, r18
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <_Z4loopv+0x6d0>
    2b60:	aa 0f       	add	r26, r26
    2b62:	bb 1f       	adc	r27, r27
    2b64:	8a 95       	dec	r24
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <_Z4loopv+0x6cc>
    2b68:	cd 01       	movw	r24, r26
    2b6a:	80 95       	com	r24
    2b6c:	84 23       	and	r24, r20
    2b6e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2b70:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2b72:	88 30       	cpi	r24, 0x08	; 8
    2b74:	70 f4       	brcc	.+28     	; 0x2b92 <_Z4loopv+0x6fe>
    2b76:	4b b1       	in	r20, 0x0b	; 11
    2b78:	87 70       	andi	r24, 0x07	; 7
    2b7a:	21 e0       	ldi	r18, 0x01	; 1
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	89 01       	movw	r16, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <_Z4loopv+0x6f2>
    2b82:	00 0f       	add	r16, r16
    2b84:	11 1f       	adc	r17, r17
    2b86:	8a 95       	dec	r24
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <_Z4loopv+0x6ee>
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	84 2b       	or	r24, r20
    2b8e:	8b b9       	out	0x0b, r24	; 11
    2b90:	0d c0       	rjmp	.+26     	; 0x2bac <_Z4loopv+0x718>
    2b92:	45 b1       	in	r20, 0x05	; 5
    2b94:	87 70       	andi	r24, 0x07	; 7
    2b96:	21 e0       	ldi	r18, 0x01	; 1
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	b9 01       	movw	r22, r18
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <_Z4loopv+0x70e>
    2b9e:	66 0f       	add	r22, r22
    2ba0:	77 1f       	adc	r23, r23
    2ba2:	8a 95       	dec	r24
    2ba4:	e2 f7       	brpl	.-8      	; 0x2b9e <_Z4loopv+0x70a>
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	84 2b       	or	r24, r20
    2baa:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2bac:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2bae:	88 30       	cpi	r24, 0x08	; 8
    2bb0:	78 f4       	brcc	.+30     	; 0x2bd0 <_Z4loopv+0x73c>
    2bb2:	4b b1       	in	r20, 0x0b	; 11
    2bb4:	87 70       	andi	r24, 0x07	; 7
    2bb6:	21 e0       	ldi	r18, 0x01	; 1
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	d9 01       	movw	r26, r18
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <_Z4loopv+0x72e>
    2bbe:	aa 0f       	add	r26, r26
    2bc0:	bb 1f       	adc	r27, r27
    2bc2:	8a 95       	dec	r24
    2bc4:	e2 f7       	brpl	.-8      	; 0x2bbe <_Z4loopv+0x72a>
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	80 95       	com	r24
    2bca:	84 23       	and	r24, r20
    2bcc:	8b b9       	out	0x0b, r24	; 11
    2bce:	0e c0       	rjmp	.+28     	; 0x2bec <_Z4loopv+0x758>
    2bd0:	45 b1       	in	r20, 0x05	; 5
    2bd2:	87 70       	andi	r24, 0x07	; 7
    2bd4:	21 e0       	ldi	r18, 0x01	; 1
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	89 01       	movw	r16, r18
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <_Z4loopv+0x74c>
    2bdc:	00 0f       	add	r16, r16
    2bde:	11 1f       	adc	r17, r17
    2be0:	8a 95       	dec	r24
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <_Z4loopv+0x748>
    2be4:	c8 01       	movw	r24, r16
    2be6:	80 95       	com	r24
    2be8:	84 23       	and	r24, r20
    2bea:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2bec:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2bee:	88 30       	cpi	r24, 0x08	; 8
    2bf0:	70 f4       	brcc	.+28     	; 0x2c0e <_Z4loopv+0x77a>
    2bf2:	4b b1       	in	r20, 0x0b	; 11
    2bf4:	87 70       	andi	r24, 0x07	; 7
    2bf6:	21 e0       	ldi	r18, 0x01	; 1
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	b9 01       	movw	r22, r18
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <_Z4loopv+0x76e>
    2bfe:	66 0f       	add	r22, r22
    2c00:	77 1f       	adc	r23, r23
    2c02:	8a 95       	dec	r24
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <_Z4loopv+0x76a>
    2c06:	cb 01       	movw	r24, r22
    2c08:	84 2b       	or	r24, r20
    2c0a:	8b b9       	out	0x0b, r24	; 11
    2c0c:	0d c0       	rjmp	.+26     	; 0x2c28 <_Z4loopv+0x794>
    2c0e:	45 b1       	in	r20, 0x05	; 5
    2c10:	87 70       	andi	r24, 0x07	; 7
    2c12:	21 e0       	ldi	r18, 0x01	; 1
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	d9 01       	movw	r26, r18
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <_Z4loopv+0x78a>
    2c1a:	aa 0f       	add	r26, r26
    2c1c:	bb 1f       	adc	r27, r27
    2c1e:	8a 95       	dec	r24
    2c20:	e2 f7       	brpl	.-8      	; 0x2c1a <_Z4loopv+0x786>
    2c22:	cd 01       	movw	r24, r26
    2c24:	84 2b       	or	r24, r20
    2c26:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c28:	b5 e0       	ldi	r27, 0x05	; 5
    2c2a:	ba 95       	dec	r27
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <_Z4loopv+0x796>
    2c2e:	00 00       	nop
    2c30:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2c32:	88 30       	cpi	r24, 0x08	; 8
    2c34:	78 f4       	brcc	.+30     	; 0x2c54 <_Z4loopv+0x7c0>
    2c36:	4b b1       	in	r20, 0x0b	; 11
    2c38:	87 70       	andi	r24, 0x07	; 7
    2c3a:	21 e0       	ldi	r18, 0x01	; 1
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	89 01       	movw	r16, r18
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <_Z4loopv+0x7b2>
    2c42:	00 0f       	add	r16, r16
    2c44:	11 1f       	adc	r17, r17
    2c46:	8a 95       	dec	r24
    2c48:	e2 f7       	brpl	.-8      	; 0x2c42 <_Z4loopv+0x7ae>
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	80 95       	com	r24
    2c4e:	84 23       	and	r24, r20
    2c50:	8b b9       	out	0x0b, r24	; 11
    2c52:	0e c0       	rjmp	.+28     	; 0x2c70 <_Z4loopv+0x7dc>
    2c54:	45 b1       	in	r20, 0x05	; 5
    2c56:	87 70       	andi	r24, 0x07	; 7
    2c58:	21 e0       	ldi	r18, 0x01	; 1
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	b9 01       	movw	r22, r18
    2c5e:	02 c0       	rjmp	.+4      	; 0x2c64 <_Z4loopv+0x7d0>
    2c60:	66 0f       	add	r22, r22
    2c62:	77 1f       	adc	r23, r23
    2c64:	8a 95       	dec	r24
    2c66:	e2 f7       	brpl	.-8      	; 0x2c60 <_Z4loopv+0x7cc>
    2c68:	cb 01       	movw	r24, r22
    2c6a:	80 95       	com	r24
    2c6c:	84 23       	and	r24, r20
    2c6e:	85 b9       	out	0x05, r24	; 5
    2c70:	8f e1       	ldi	r24, 0x1F	; 31
    2c72:	93 e0       	ldi	r25, 0x03	; 3
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <_Z4loopv+0x7e0>
    2c78:	00 c0       	rjmp	.+0      	; 0x2c7a <_Z4loopv+0x7e6>
    2c7a:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	88 30       	cpi	r24, 0x08	; 8
    2c80:	78 f4       	brcc	.+30     	; 0x2ca0 <_Z4loopv+0x80c>
    2c82:	4b b1       	in	r20, 0x0b	; 11
    2c84:	87 70       	andi	r24, 0x07	; 7
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	d9 01       	movw	r26, r18
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <_Z4loopv+0x7fe>
    2c8e:	aa 0f       	add	r26, r26
    2c90:	bb 1f       	adc	r27, r27
    2c92:	8a 95       	dec	r24
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <_Z4loopv+0x7fa>
    2c96:	cd 01       	movw	r24, r26
    2c98:	80 95       	com	r24
    2c9a:	84 23       	and	r24, r20
    2c9c:	8b b9       	out	0x0b, r24	; 11
    2c9e:	0e c0       	rjmp	.+28     	; 0x2cbc <_Z4loopv+0x828>
    2ca0:	45 b1       	in	r20, 0x05	; 5
    2ca2:	87 70       	andi	r24, 0x07	; 7
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	89 01       	movw	r16, r18
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <_Z4loopv+0x81c>
    2cac:	00 0f       	add	r16, r16
    2cae:	11 1f       	adc	r17, r17
    2cb0:	8a 95       	dec	r24
    2cb2:	e2 f7       	brpl	.-8      	; 0x2cac <_Z4loopv+0x818>
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	80 95       	com	r24
    2cb8:	84 23       	and	r24, r20
    2cba:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    2cbc:	83 81       	ldd	r24, Z+3	; 0x03
    2cbe:	88 30       	cpi	r24, 0x08	; 8
    2cc0:	78 f4       	brcc	.+30     	; 0x2ce0 <_Z4loopv+0x84c>
    2cc2:	4b b1       	in	r20, 0x0b	; 11
    2cc4:	87 70       	andi	r24, 0x07	; 7
    2cc6:	21 e0       	ldi	r18, 0x01	; 1
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	b9 01       	movw	r22, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <_Z4loopv+0x83e>
    2cce:	66 0f       	add	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	8a 95       	dec	r24
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <_Z4loopv+0x83a>
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	80 95       	com	r24
    2cda:	84 23       	and	r24, r20
    2cdc:	8b b9       	out	0x0b, r24	; 11
    2cde:	0e c0       	rjmp	.+28     	; 0x2cfc <_Z4loopv+0x868>
    2ce0:	45 b1       	in	r20, 0x05	; 5
    2ce2:	87 70       	andi	r24, 0x07	; 7
    2ce4:	21 e0       	ldi	r18, 0x01	; 1
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	d9 01       	movw	r26, r18
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <_Z4loopv+0x85c>
    2cec:	aa 0f       	add	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	8a 95       	dec	r24
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <_Z4loopv+0x858>
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	80 95       	com	r24
    2cf8:	84 23       	and	r24, r20
    2cfa:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    2cfc:	84 81       	ldd	r24, Z+4	; 0x04
    2cfe:	88 30       	cpi	r24, 0x08	; 8
    2d00:	78 f4       	brcc	.+30     	; 0x2d20 <_Z4loopv+0x88c>
    2d02:	4b b1       	in	r20, 0x0b	; 11
    2d04:	87 70       	andi	r24, 0x07	; 7
    2d06:	21 e0       	ldi	r18, 0x01	; 1
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	89 01       	movw	r16, r18
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <_Z4loopv+0x87e>
    2d0e:	00 0f       	add	r16, r16
    2d10:	11 1f       	adc	r17, r17
    2d12:	8a 95       	dec	r24
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <_Z4loopv+0x87a>
    2d16:	c8 01       	movw	r24, r16
    2d18:	80 95       	com	r24
    2d1a:	84 23       	and	r24, r20
    2d1c:	8b b9       	out	0x0b, r24	; 11
    2d1e:	0e c0       	rjmp	.+28     	; 0x2d3c <_Z4loopv+0x8a8>
    2d20:	45 b1       	in	r20, 0x05	; 5
    2d22:	87 70       	andi	r24, 0x07	; 7
    2d24:	21 e0       	ldi	r18, 0x01	; 1
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	b9 01       	movw	r22, r18
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <_Z4loopv+0x89c>
    2d2c:	66 0f       	add	r22, r22
    2d2e:	77 1f       	adc	r23, r23
    2d30:	8a 95       	dec	r24
    2d32:	e2 f7       	brpl	.-8      	; 0x2d2c <_Z4loopv+0x898>
    2d34:	cb 01       	movw	r24, r22
    2d36:	80 95       	com	r24
    2d38:	84 23       	and	r24, r20
    2d3a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    2d3c:	85 81       	ldd	r24, Z+5	; 0x05
    2d3e:	88 30       	cpi	r24, 0x08	; 8
    2d40:	78 f4       	brcc	.+30     	; 0x2d60 <_Z4loopv+0x8cc>
    2d42:	4b b1       	in	r20, 0x0b	; 11
    2d44:	87 70       	andi	r24, 0x07	; 7
    2d46:	21 e0       	ldi	r18, 0x01	; 1
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	d9 01       	movw	r26, r18
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <_Z4loopv+0x8be>
    2d4e:	aa 0f       	add	r26, r26
    2d50:	bb 1f       	adc	r27, r27
    2d52:	8a 95       	dec	r24
    2d54:	e2 f7       	brpl	.-8      	; 0x2d4e <_Z4loopv+0x8ba>
    2d56:	cd 01       	movw	r24, r26
    2d58:	80 95       	com	r24
    2d5a:	84 23       	and	r24, r20
    2d5c:	8b b9       	out	0x0b, r24	; 11
    2d5e:	0e c0       	rjmp	.+28     	; 0x2d7c <_Z4loopv+0x8e8>
    2d60:	45 b1       	in	r20, 0x05	; 5
    2d62:	87 70       	andi	r24, 0x07	; 7
    2d64:	21 e0       	ldi	r18, 0x01	; 1
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	89 01       	movw	r16, r18
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <_Z4loopv+0x8dc>
    2d6c:	00 0f       	add	r16, r16
    2d6e:	11 1f       	adc	r17, r17
    2d70:	8a 95       	dec	r24
    2d72:	e2 f7       	brpl	.-8      	; 0x2d6c <_Z4loopv+0x8d8>
    2d74:	c8 01       	movw	r24, r16
    2d76:	80 95       	com	r24
    2d78:	84 23       	and	r24, r20
    2d7a:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2d7c:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2d7e:	88 30       	cpi	r24, 0x08	; 8
    2d80:	70 f4       	brcc	.+28     	; 0x2d9e <_Z4loopv+0x90a>
    2d82:	4b b1       	in	r20, 0x0b	; 11
    2d84:	87 70       	andi	r24, 0x07	; 7
    2d86:	21 e0       	ldi	r18, 0x01	; 1
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	b9 01       	movw	r22, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <_Z4loopv+0x8fe>
    2d8e:	66 0f       	add	r22, r22
    2d90:	77 1f       	adc	r23, r23
    2d92:	8a 95       	dec	r24
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <_Z4loopv+0x8fa>
    2d96:	cb 01       	movw	r24, r22
    2d98:	84 2b       	or	r24, r20
    2d9a:	8b b9       	out	0x0b, r24	; 11
    2d9c:	0d c0       	rjmp	.+26     	; 0x2db8 <_Z4loopv+0x924>
    2d9e:	45 b1       	in	r20, 0x05	; 5
    2da0:	87 70       	andi	r24, 0x07	; 7
    2da2:	21 e0       	ldi	r18, 0x01	; 1
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	d9 01       	movw	r26, r18
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <_Z4loopv+0x91a>
    2daa:	aa 0f       	add	r26, r26
    2dac:	bb 1f       	adc	r27, r27
    2dae:	8a 95       	dec	r24
    2db0:	e2 f7       	brpl	.-8      	; 0x2daa <_Z4loopv+0x916>
    2db2:	cd 01       	movw	r24, r26
    2db4:	84 2b       	or	r24, r20
    2db6:	85 b9       	out	0x05, r24	; 5
    2db8:	b5 e0       	ldi	r27, 0x05	; 5
    2dba:	ba 95       	dec	r27
    2dbc:	f1 f7       	brne	.-4      	; 0x2dba <_Z4loopv+0x926>
    2dbe:	00 00       	nop
    2dc0:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2dc2:	88 30       	cpi	r24, 0x08	; 8
    2dc4:	78 f4       	brcc	.+30     	; 0x2de4 <_Z4loopv+0x950>
    2dc6:	4b b1       	in	r20, 0x0b	; 11
    2dc8:	87 70       	andi	r24, 0x07	; 7
    2dca:	21 e0       	ldi	r18, 0x01	; 1
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	89 01       	movw	r16, r18
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <_Z4loopv+0x942>
    2dd2:	00 0f       	add	r16, r16
    2dd4:	11 1f       	adc	r17, r17
    2dd6:	8a 95       	dec	r24
    2dd8:	e2 f7       	brpl	.-8      	; 0x2dd2 <_Z4loopv+0x93e>
    2dda:	c8 01       	movw	r24, r16
    2ddc:	80 95       	com	r24
    2dde:	84 23       	and	r24, r20
    2de0:	8b b9       	out	0x0b, r24	; 11
    2de2:	0e c0       	rjmp	.+28     	; 0x2e00 <_Z4loopv+0x96c>
    2de4:	45 b1       	in	r20, 0x05	; 5
    2de6:	87 70       	andi	r24, 0x07	; 7
    2de8:	21 e0       	ldi	r18, 0x01	; 1
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	b9 01       	movw	r22, r18
    2dee:	02 c0       	rjmp	.+4      	; 0x2df4 <_Z4loopv+0x960>
    2df0:	66 0f       	add	r22, r22
    2df2:	77 1f       	adc	r23, r23
    2df4:	8a 95       	dec	r24
    2df6:	e2 f7       	brpl	.-8      	; 0x2df0 <_Z4loopv+0x95c>
    2df8:	cb 01       	movw	r24, r22
    2dfa:	80 95       	com	r24
    2dfc:	84 23       	and	r24, r20
    2dfe:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e00:	8f e3       	ldi	r24, 0x3F	; 63
    2e02:	9f e1       	ldi	r25, 0x1F	; 31
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <_Z4loopv+0x970>
    2e08:	00 c0       	rjmp	.+0      	; 0x2e0a <_Z4loopv+0x976>
    2e0a:	00 00       	nop
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	88 30       	cpi	r24, 0x08	; 8
    2e10:	78 f4       	brcc	.+30     	; 0x2e30 <_Z4loopv+0x99c>
    2e12:	4b b1       	in	r20, 0x0b	; 11
    2e14:	87 70       	andi	r24, 0x07	; 7
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	d9 01       	movw	r26, r18
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <_Z4loopv+0x98e>
    2e1e:	aa 0f       	add	r26, r26
    2e20:	bb 1f       	adc	r27, r27
    2e22:	8a 95       	dec	r24
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <_Z4loopv+0x98a>
    2e26:	cd 01       	movw	r24, r26
    2e28:	80 95       	com	r24
    2e2a:	84 23       	and	r24, r20
    2e2c:	8b b9       	out	0x0b, r24	; 11
    2e2e:	0e c0       	rjmp	.+28     	; 0x2e4c <_Z4loopv+0x9b8>
    2e30:	45 b1       	in	r20, 0x05	; 5
    2e32:	87 70       	andi	r24, 0x07	; 7
    2e34:	21 e0       	ldi	r18, 0x01	; 1
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	89 01       	movw	r16, r18
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <_Z4loopv+0x9ac>
    2e3c:	00 0f       	add	r16, r16
    2e3e:	11 1f       	adc	r17, r17
    2e40:	8a 95       	dec	r24
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <_Z4loopv+0x9a8>
    2e44:	c8 01       	movw	r24, r16
    2e46:	80 95       	com	r24
    2e48:	84 23       	and	r24, r20
    2e4a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2e4c:	83 81       	ldd	r24, Z+3	; 0x03
    2e4e:	88 30       	cpi	r24, 0x08	; 8
    2e50:	78 f4       	brcc	.+30     	; 0x2e70 <_Z4loopv+0x9dc>
    2e52:	4b b1       	in	r20, 0x0b	; 11
    2e54:	87 70       	andi	r24, 0x07	; 7
    2e56:	21 e0       	ldi	r18, 0x01	; 1
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	b9 01       	movw	r22, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <_Z4loopv+0x9ce>
    2e5e:	66 0f       	add	r22, r22
    2e60:	77 1f       	adc	r23, r23
    2e62:	8a 95       	dec	r24
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <_Z4loopv+0x9ca>
    2e66:	cb 01       	movw	r24, r22
    2e68:	80 95       	com	r24
    2e6a:	84 23       	and	r24, r20
    2e6c:	8b b9       	out	0x0b, r24	; 11
    2e6e:	0e c0       	rjmp	.+28     	; 0x2e8c <_Z4loopv+0x9f8>
    2e70:	45 b1       	in	r20, 0x05	; 5
    2e72:	87 70       	andi	r24, 0x07	; 7
    2e74:	21 e0       	ldi	r18, 0x01	; 1
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	d9 01       	movw	r26, r18
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <_Z4loopv+0x9ec>
    2e7c:	aa 0f       	add	r26, r26
    2e7e:	bb 1f       	adc	r27, r27
    2e80:	8a 95       	dec	r24
    2e82:	e2 f7       	brpl	.-8      	; 0x2e7c <_Z4loopv+0x9e8>
    2e84:	cd 01       	movw	r24, r26
    2e86:	80 95       	com	r24
    2e88:	84 23       	and	r24, r20
    2e8a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    2e8c:	84 81       	ldd	r24, Z+4	; 0x04
    2e8e:	88 30       	cpi	r24, 0x08	; 8
    2e90:	78 f4       	brcc	.+30     	; 0x2eb0 <_Z4loopv+0xa1c>
    2e92:	4b b1       	in	r20, 0x0b	; 11
    2e94:	87 70       	andi	r24, 0x07	; 7
    2e96:	21 e0       	ldi	r18, 0x01	; 1
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	89 01       	movw	r16, r18
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <_Z4loopv+0xa0e>
    2e9e:	00 0f       	add	r16, r16
    2ea0:	11 1f       	adc	r17, r17
    2ea2:	8a 95       	dec	r24
    2ea4:	e2 f7       	brpl	.-8      	; 0x2e9e <_Z4loopv+0xa0a>
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	80 95       	com	r24
    2eaa:	84 23       	and	r24, r20
    2eac:	8b b9       	out	0x0b, r24	; 11
    2eae:	0e c0       	rjmp	.+28     	; 0x2ecc <_Z4loopv+0xa38>
    2eb0:	45 b1       	in	r20, 0x05	; 5
    2eb2:	87 70       	andi	r24, 0x07	; 7
    2eb4:	21 e0       	ldi	r18, 0x01	; 1
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	b9 01       	movw	r22, r18
    2eba:	02 c0       	rjmp	.+4      	; 0x2ec0 <_Z4loopv+0xa2c>
    2ebc:	66 0f       	add	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	8a 95       	dec	r24
    2ec2:	e2 f7       	brpl	.-8      	; 0x2ebc <_Z4loopv+0xa28>
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	80 95       	com	r24
    2ec8:	84 23       	and	r24, r20
    2eca:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2ecc:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2ece:	88 30       	cpi	r24, 0x08	; 8
    2ed0:	70 f4       	brcc	.+28     	; 0x2eee <_Z4loopv+0xa5a>
    2ed2:	4b b1       	in	r20, 0x0b	; 11
    2ed4:	87 70       	andi	r24, 0x07	; 7
    2ed6:	21 e0       	ldi	r18, 0x01	; 1
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	d9 01       	movw	r26, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <_Z4loopv+0xa4e>
    2ede:	aa 0f       	add	r26, r26
    2ee0:	bb 1f       	adc	r27, r27
    2ee2:	8a 95       	dec	r24
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <_Z4loopv+0xa4a>
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	84 2b       	or	r24, r20
    2eea:	8b b9       	out	0x0b, r24	; 11
    2eec:	0d c0       	rjmp	.+26     	; 0x2f08 <_Z4loopv+0xa74>
    2eee:	45 b1       	in	r20, 0x05	; 5
    2ef0:	87 70       	andi	r24, 0x07	; 7
    2ef2:	21 e0       	ldi	r18, 0x01	; 1
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	89 01       	movw	r16, r18
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <_Z4loopv+0xa6a>
    2efa:	00 0f       	add	r16, r16
    2efc:	11 1f       	adc	r17, r17
    2efe:	8a 95       	dec	r24
    2f00:	e2 f7       	brpl	.-8      	; 0x2efa <_Z4loopv+0xa66>
    2f02:	c8 01       	movw	r24, r16
    2f04:	84 2b       	or	r24, r20
    2f06:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2f08:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2f0a:	88 30       	cpi	r24, 0x08	; 8
    2f0c:	78 f4       	brcc	.+30     	; 0x2f2c <_Z4loopv+0xa98>
    2f0e:	4b b1       	in	r20, 0x0b	; 11
    2f10:	87 70       	andi	r24, 0x07	; 7
    2f12:	21 e0       	ldi	r18, 0x01	; 1
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	b9 01       	movw	r22, r18
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <_Z4loopv+0xa8a>
    2f1a:	66 0f       	add	r22, r22
    2f1c:	77 1f       	adc	r23, r23
    2f1e:	8a 95       	dec	r24
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <_Z4loopv+0xa86>
    2f22:	cb 01       	movw	r24, r22
    2f24:	80 95       	com	r24
    2f26:	84 23       	and	r24, r20
    2f28:	8b b9       	out	0x0b, r24	; 11
    2f2a:	0e c0       	rjmp	.+28     	; 0x2f48 <_Z4loopv+0xab4>
    2f2c:	45 b1       	in	r20, 0x05	; 5
    2f2e:	87 70       	andi	r24, 0x07	; 7
    2f30:	21 e0       	ldi	r18, 0x01	; 1
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	d9 01       	movw	r26, r18
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <_Z4loopv+0xaa8>
    2f38:	aa 0f       	add	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	8a 95       	dec	r24
    2f3e:	e2 f7       	brpl	.-8      	; 0x2f38 <_Z4loopv+0xaa4>
    2f40:	cd 01       	movw	r24, r26
    2f42:	80 95       	com	r24
    2f44:	84 23       	and	r24, r20
    2f46:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2f48:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2f4a:	88 30       	cpi	r24, 0x08	; 8
    2f4c:	70 f4       	brcc	.+28     	; 0x2f6a <_Z4loopv+0xad6>
    2f4e:	4b b1       	in	r20, 0x0b	; 11
    2f50:	87 70       	andi	r24, 0x07	; 7
    2f52:	21 e0       	ldi	r18, 0x01	; 1
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	89 01       	movw	r16, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <_Z4loopv+0xaca>
    2f5a:	00 0f       	add	r16, r16
    2f5c:	11 1f       	adc	r17, r17
    2f5e:	8a 95       	dec	r24
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <_Z4loopv+0xac6>
    2f62:	c8 01       	movw	r24, r16
    2f64:	84 2b       	or	r24, r20
    2f66:	8b b9       	out	0x0b, r24	; 11
    2f68:	0d c0       	rjmp	.+26     	; 0x2f84 <_Z4loopv+0xaf0>
    2f6a:	45 b1       	in	r20, 0x05	; 5
    2f6c:	87 70       	andi	r24, 0x07	; 7
    2f6e:	21 e0       	ldi	r18, 0x01	; 1
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	b9 01       	movw	r22, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <_Z4loopv+0xae6>
    2f76:	66 0f       	add	r22, r22
    2f78:	77 1f       	adc	r23, r23
    2f7a:	8a 95       	dec	r24
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <_Z4loopv+0xae2>
    2f7e:	cb 01       	movw	r24, r22
    2f80:	84 2b       	or	r24, r20
    2f82:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f84:	75 e0       	ldi	r23, 0x05	; 5
    2f86:	7a 95       	dec	r23
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <_Z4loopv+0xaf2>
    2f8a:	00 00       	nop
    2f8c:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2f8e:	88 30       	cpi	r24, 0x08	; 8
    2f90:	78 f4       	brcc	.+30     	; 0x2fb0 <_Z4loopv+0xb1c>
    2f92:	4b b1       	in	r20, 0x0b	; 11
    2f94:	87 70       	andi	r24, 0x07	; 7
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	d9 01       	movw	r26, r18
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <_Z4loopv+0xb0e>
    2f9e:	aa 0f       	add	r26, r26
    2fa0:	bb 1f       	adc	r27, r27
    2fa2:	8a 95       	dec	r24
    2fa4:	e2 f7       	brpl	.-8      	; 0x2f9e <_Z4loopv+0xb0a>
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	80 95       	com	r24
    2faa:	84 23       	and	r24, r20
    2fac:	8b b9       	out	0x0b, r24	; 11
    2fae:	0e c0       	rjmp	.+28     	; 0x2fcc <_Z4loopv+0xb38>
    2fb0:	45 b1       	in	r20, 0x05	; 5
    2fb2:	87 70       	andi	r24, 0x07	; 7
    2fb4:	21 e0       	ldi	r18, 0x01	; 1
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	89 01       	movw	r16, r18
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <_Z4loopv+0xb2c>
    2fbc:	00 0f       	add	r16, r16
    2fbe:	11 1f       	adc	r17, r17
    2fc0:	8a 95       	dec	r24
    2fc2:	e2 f7       	brpl	.-8      	; 0x2fbc <_Z4loopv+0xb28>
    2fc4:	c8 01       	movw	r24, r16
    2fc6:	80 95       	com	r24
    2fc8:	84 23       	and	r24, r20
    2fca:	85 b9       	out	0x05, r24	; 5
    2fcc:	8f e1       	ldi	r24, 0x1F	; 31
    2fce:	93 e0       	ldi	r25, 0x03	; 3
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <_Z4loopv+0xb3c>
    2fd4:	00 c0       	rjmp	.+0      	; 0x2fd6 <_Z4loopv+0xb42>
    2fd6:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	88 30       	cpi	r24, 0x08	; 8
    2fdc:	78 f4       	brcc	.+30     	; 0x2ffc <_Z4loopv+0xb68>
    2fde:	4b b1       	in	r20, 0x0b	; 11
    2fe0:	87 70       	andi	r24, 0x07	; 7
    2fe2:	21 e0       	ldi	r18, 0x01	; 1
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	d9 01       	movw	r26, r18
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <_Z4loopv+0xb5a>
    2fea:	aa 0f       	add	r26, r26
    2fec:	bb 1f       	adc	r27, r27
    2fee:	8a 95       	dec	r24
    2ff0:	e2 f7       	brpl	.-8      	; 0x2fea <_Z4loopv+0xb56>
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	80 95       	com	r24
    2ff6:	84 23       	and	r24, r20
    2ff8:	8b b9       	out	0x0b, r24	; 11
    2ffa:	0e c0       	rjmp	.+28     	; 0x3018 <_Z4loopv+0xb84>
    2ffc:	45 b1       	in	r20, 0x05	; 5
    2ffe:	87 70       	andi	r24, 0x07	; 7
    3000:	21 e0       	ldi	r18, 0x01	; 1
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	89 01       	movw	r16, r18
    3006:	02 c0       	rjmp	.+4      	; 0x300c <_Z4loopv+0xb78>
    3008:	00 0f       	add	r16, r16
    300a:	11 1f       	adc	r17, r17
    300c:	8a 95       	dec	r24
    300e:	e2 f7       	brpl	.-8      	; 0x3008 <_Z4loopv+0xb74>
    3010:	c8 01       	movw	r24, r16
    3012:	80 95       	com	r24
    3014:	84 23       	and	r24, r20
    3016:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3018:	83 81       	ldd	r24, Z+3	; 0x03
    301a:	88 30       	cpi	r24, 0x08	; 8
    301c:	78 f4       	brcc	.+30     	; 0x303c <_Z4loopv+0xba8>
    301e:	4b b1       	in	r20, 0x0b	; 11
    3020:	87 70       	andi	r24, 0x07	; 7
    3022:	21 e0       	ldi	r18, 0x01	; 1
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	b9 01       	movw	r22, r18
    3028:	02 c0       	rjmp	.+4      	; 0x302e <_Z4loopv+0xb9a>
    302a:	66 0f       	add	r22, r22
    302c:	77 1f       	adc	r23, r23
    302e:	8a 95       	dec	r24
    3030:	e2 f7       	brpl	.-8      	; 0x302a <_Z4loopv+0xb96>
    3032:	cb 01       	movw	r24, r22
    3034:	80 95       	com	r24
    3036:	84 23       	and	r24, r20
    3038:	8b b9       	out	0x0b, r24	; 11
    303a:	0e c0       	rjmp	.+28     	; 0x3058 <_Z4loopv+0xbc4>
    303c:	45 b1       	in	r20, 0x05	; 5
    303e:	87 70       	andi	r24, 0x07	; 7
    3040:	21 e0       	ldi	r18, 0x01	; 1
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	d9 01       	movw	r26, r18
    3046:	02 c0       	rjmp	.+4      	; 0x304c <_Z4loopv+0xbb8>
    3048:	aa 0f       	add	r26, r26
    304a:	bb 1f       	adc	r27, r27
    304c:	8a 95       	dec	r24
    304e:	e2 f7       	brpl	.-8      	; 0x3048 <_Z4loopv+0xbb4>
    3050:	cd 01       	movw	r24, r26
    3052:	80 95       	com	r24
    3054:	84 23       	and	r24, r20
    3056:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    3058:	84 81       	ldd	r24, Z+4	; 0x04
    305a:	88 30       	cpi	r24, 0x08	; 8
    305c:	78 f4       	brcc	.+30     	; 0x307c <_Z4loopv+0xbe8>
    305e:	4b b1       	in	r20, 0x0b	; 11
    3060:	87 70       	andi	r24, 0x07	; 7
    3062:	21 e0       	ldi	r18, 0x01	; 1
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	89 01       	movw	r16, r18
    3068:	02 c0       	rjmp	.+4      	; 0x306e <_Z4loopv+0xbda>
    306a:	00 0f       	add	r16, r16
    306c:	11 1f       	adc	r17, r17
    306e:	8a 95       	dec	r24
    3070:	e2 f7       	brpl	.-8      	; 0x306a <_Z4loopv+0xbd6>
    3072:	c8 01       	movw	r24, r16
    3074:	80 95       	com	r24
    3076:	84 23       	and	r24, r20
    3078:	8b b9       	out	0x0b, r24	; 11
    307a:	0e c0       	rjmp	.+28     	; 0x3098 <_Z4loopv+0xc04>
    307c:	45 b1       	in	r20, 0x05	; 5
    307e:	87 70       	andi	r24, 0x07	; 7
    3080:	21 e0       	ldi	r18, 0x01	; 1
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	b9 01       	movw	r22, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <_Z4loopv+0xbf8>
    3088:	66 0f       	add	r22, r22
    308a:	77 1f       	adc	r23, r23
    308c:	8a 95       	dec	r24
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <_Z4loopv+0xbf4>
    3090:	cb 01       	movw	r24, r22
    3092:	80 95       	com	r24
    3094:	84 23       	and	r24, r20
    3096:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    3098:	85 81       	ldd	r24, Z+5	; 0x05
    309a:	88 30       	cpi	r24, 0x08	; 8
    309c:	78 f4       	brcc	.+30     	; 0x30bc <_Z4loopv+0xc28>
    309e:	4b b1       	in	r20, 0x0b	; 11
    30a0:	87 70       	andi	r24, 0x07	; 7
    30a2:	21 e0       	ldi	r18, 0x01	; 1
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	d9 01       	movw	r26, r18
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <_Z4loopv+0xc1a>
    30aa:	aa 0f       	add	r26, r26
    30ac:	bb 1f       	adc	r27, r27
    30ae:	8a 95       	dec	r24
    30b0:	e2 f7       	brpl	.-8      	; 0x30aa <_Z4loopv+0xc16>
    30b2:	cd 01       	movw	r24, r26
    30b4:	80 95       	com	r24
    30b6:	84 23       	and	r24, r20
    30b8:	8b b9       	out	0x0b, r24	; 11
    30ba:	0e c0       	rjmp	.+28     	; 0x30d8 <_Z4loopv+0xc44>
    30bc:	45 b1       	in	r20, 0x05	; 5
    30be:	87 70       	andi	r24, 0x07	; 7
    30c0:	21 e0       	ldi	r18, 0x01	; 1
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	89 01       	movw	r16, r18
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <_Z4loopv+0xc38>
    30c8:	00 0f       	add	r16, r16
    30ca:	11 1f       	adc	r17, r17
    30cc:	8a 95       	dec	r24
    30ce:	e2 f7       	brpl	.-8      	; 0x30c8 <_Z4loopv+0xc34>
    30d0:	c8 01       	movw	r24, r16
    30d2:	80 95       	com	r24
    30d4:	84 23       	and	r24, r20
    30d6:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    30d8:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    30da:	88 30       	cpi	r24, 0x08	; 8
    30dc:	70 f4       	brcc	.+28     	; 0x30fa <_Z4loopv+0xc66>
    30de:	4b b1       	in	r20, 0x0b	; 11
    30e0:	87 70       	andi	r24, 0x07	; 7
    30e2:	21 e0       	ldi	r18, 0x01	; 1
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	b9 01       	movw	r22, r18
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <_Z4loopv+0xc5a>
    30ea:	66 0f       	add	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	8a 95       	dec	r24
    30f0:	e2 f7       	brpl	.-8      	; 0x30ea <_Z4loopv+0xc56>
    30f2:	cb 01       	movw	r24, r22
    30f4:	84 2b       	or	r24, r20
    30f6:	8b b9       	out	0x0b, r24	; 11
    30f8:	0d c0       	rjmp	.+26     	; 0x3114 <_Z4loopv+0xc80>
    30fa:	45 b1       	in	r20, 0x05	; 5
    30fc:	87 70       	andi	r24, 0x07	; 7
    30fe:	21 e0       	ldi	r18, 0x01	; 1
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	d9 01       	movw	r26, r18
    3104:	02 c0       	rjmp	.+4      	; 0x310a <_Z4loopv+0xc76>
    3106:	aa 0f       	add	r26, r26
    3108:	bb 1f       	adc	r27, r27
    310a:	8a 95       	dec	r24
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <_Z4loopv+0xc72>
    310e:	cd 01       	movw	r24, r26
    3110:	84 2b       	or	r24, r20
    3112:	85 b9       	out	0x05, r24	; 5
    3114:	b5 e0       	ldi	r27, 0x05	; 5
    3116:	ba 95       	dec	r27
    3118:	f1 f7       	brne	.-4      	; 0x3116 <_Z4loopv+0xc82>
    311a:	00 00       	nop
    311c:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    311e:	88 30       	cpi	r24, 0x08	; 8
    3120:	78 f4       	brcc	.+30     	; 0x3140 <_Z4loopv+0xcac>
    3122:	4b b1       	in	r20, 0x0b	; 11
    3124:	87 70       	andi	r24, 0x07	; 7
    3126:	21 e0       	ldi	r18, 0x01	; 1
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	89 01       	movw	r16, r18
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <_Z4loopv+0xc9e>
    312e:	00 0f       	add	r16, r16
    3130:	11 1f       	adc	r17, r17
    3132:	8a 95       	dec	r24
    3134:	e2 f7       	brpl	.-8      	; 0x312e <_Z4loopv+0xc9a>
    3136:	c8 01       	movw	r24, r16
    3138:	80 95       	com	r24
    313a:	84 23       	and	r24, r20
    313c:	8b b9       	out	0x0b, r24	; 11
    313e:	0e c0       	rjmp	.+28     	; 0x315c <_Z4loopv+0xcc8>
    3140:	45 b1       	in	r20, 0x05	; 5
    3142:	87 70       	andi	r24, 0x07	; 7
    3144:	21 e0       	ldi	r18, 0x01	; 1
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	b9 01       	movw	r22, r18
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <_Z4loopv+0xcbc>
    314c:	66 0f       	add	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	8a 95       	dec	r24
    3152:	e2 f7       	brpl	.-8      	; 0x314c <_Z4loopv+0xcb8>
    3154:	cb 01       	movw	r24, r22
    3156:	80 95       	com	r24
    3158:	84 23       	and	r24, r20
    315a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    315c:	8f e3       	ldi	r24, 0x3F	; 63
    315e:	9f e1       	ldi	r25, 0x1F	; 31
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <_Z4loopv+0xccc>
    3164:	00 c0       	rjmp	.+0      	; 0x3166 <_Z4loopv+0xcd2>
    3166:	00 00       	nop
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    3168:	29 81       	ldd	r18, Y+1	; 0x01
    316a:	22 23       	and	r18, r18
    316c:	09 f4       	brne	.+2      	; 0x3170 <_Z4loopv+0xcdc>
    316e:	eb c3       	rjmp	.+2006   	; 0x3946 <_Z4loopv+0x14b2>
    3170:	de 01       	movw	r26, r28
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	7d 01       	movw	r14, r26
    3176:	40 e0       	ldi	r20, 0x00	; 0
    3178:	50 e0       	ldi	r21, 0x00	; 0
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	05 c0       	rjmp	.+10     	; 0x318a <_Z4loopv+0xcf6>
    3180:	d7 01       	movw	r26, r14
    3182:	2c 91       	ld	r18, X
    3184:	22 23       	and	r18, r18
    3186:	09 f4       	brne	.+2      	; 0x318a <_Z4loopv+0xcf6>
    3188:	de c3       	rjmp	.+1980   	; 0x3946 <_Z4loopv+0x14b2>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
    318a:	40 31       	cpi	r20, 0x10	; 16
    318c:	51 05       	cpc	r21, r1
    318e:	19 f0       	breq	.+6      	; 0x3196 <_Z4loopv+0xd02>
    3190:	2a 30       	cpi	r18, 0x0A	; 10
    3192:	09 f0       	breq	.+2      	; 0x3196 <_Z4loopv+0xd02>
    3194:	78 c1       	rjmp	.+752    	; 0x3486 <_Z4loopv+0xff2>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    3196:	22 81       	ldd	r18, Z+2	; 0x02
    3198:	28 30       	cpi	r18, 0x08	; 8
    319a:	68 f4       	brcc	.+26     	; 0x31b6 <_Z4loopv+0xd22>
    319c:	3b b1       	in	r19, 0x0b	; 11
    319e:	27 70       	andi	r18, 0x07	; 7
    31a0:	bc 01       	movw	r22, r24
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <_Z4loopv+0xd14>
    31a4:	66 0f       	add	r22, r22
    31a6:	77 1f       	adc	r23, r23
    31a8:	2a 95       	dec	r18
    31aa:	e2 f7       	brpl	.-8      	; 0x31a4 <_Z4loopv+0xd10>
    31ac:	26 2f       	mov	r18, r22
    31ae:	20 95       	com	r18
    31b0:	23 23       	and	r18, r19
    31b2:	2b b9       	out	0x0b, r18	; 11
    31b4:	0c c0       	rjmp	.+24     	; 0x31ce <_Z4loopv+0xd3a>
    31b6:	35 b1       	in	r19, 0x05	; 5
    31b8:	27 70       	andi	r18, 0x07	; 7
    31ba:	bc 01       	movw	r22, r24
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <_Z4loopv+0xd2e>
    31be:	66 0f       	add	r22, r22
    31c0:	77 1f       	adc	r23, r23
    31c2:	2a 95       	dec	r18
    31c4:	e2 f7       	brpl	.-8      	; 0x31be <_Z4loopv+0xd2a>
    31c6:	26 2f       	mov	r18, r22
    31c8:	20 95       	com	r18
    31ca:	23 23       	and	r18, r19
    31cc:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
    31ce:	23 81       	ldd	r18, Z+3	; 0x03
    31d0:	28 30       	cpi	r18, 0x08	; 8
    31d2:	68 f4       	brcc	.+26     	; 0x31ee <_Z4loopv+0xd5a>
    31d4:	3b b1       	in	r19, 0x0b	; 11
    31d6:	27 70       	andi	r18, 0x07	; 7
    31d8:	bc 01       	movw	r22, r24
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <_Z4loopv+0xd4c>
    31dc:	66 0f       	add	r22, r22
    31de:	77 1f       	adc	r23, r23
    31e0:	2a 95       	dec	r18
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <_Z4loopv+0xd48>
    31e4:	26 2f       	mov	r18, r22
    31e6:	20 95       	com	r18
    31e8:	23 23       	and	r18, r19
    31ea:	2b b9       	out	0x0b, r18	; 11
    31ec:	0c c0       	rjmp	.+24     	; 0x3206 <_Z4loopv+0xd72>
    31ee:	35 b1       	in	r19, 0x05	; 5
    31f0:	27 70       	andi	r18, 0x07	; 7
    31f2:	bc 01       	movw	r22, r24
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <_Z4loopv+0xd66>
    31f6:	66 0f       	add	r22, r22
    31f8:	77 1f       	adc	r23, r23
    31fa:	2a 95       	dec	r18
    31fc:	e2 f7       	brpl	.-8      	; 0x31f6 <_Z4loopv+0xd62>
    31fe:	26 2f       	mov	r18, r22
    3200:	20 95       	com	r18
    3202:	23 23       	and	r18, r19
    3204:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
    3206:	24 81       	ldd	r18, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3208:	28 30       	cpi	r18, 0x08	; 8
    320a:	60 f4       	brcc	.+24     	; 0x3224 <_Z4loopv+0xd90>
    320c:	6b b1       	in	r22, 0x0b	; 11
    320e:	27 70       	andi	r18, 0x07	; 7
    3210:	8c 01       	movw	r16, r24
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <_Z4loopv+0xd84>
    3214:	00 0f       	add	r16, r16
    3216:	11 1f       	adc	r17, r17
    3218:	2a 95       	dec	r18
    321a:	e2 f7       	brpl	.-8      	; 0x3214 <_Z4loopv+0xd80>
    321c:	98 01       	movw	r18, r16
    321e:	26 2b       	or	r18, r22
    3220:	2b b9       	out	0x0b, r18	; 11
    3222:	0b c0       	rjmp	.+22     	; 0x323a <_Z4loopv+0xda6>
    3224:	65 b1       	in	r22, 0x05	; 5
    3226:	27 70       	andi	r18, 0x07	; 7
    3228:	dc 01       	movw	r26, r24
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <_Z4loopv+0xd9c>
    322c:	aa 0f       	add	r26, r26
    322e:	bb 1f       	adc	r27, r27
    3230:	2a 95       	dec	r18
    3232:	e2 f7       	brpl	.-8      	; 0x322c <_Z4loopv+0xd98>
    3234:	9d 01       	movw	r18, r26
    3236:	26 2b       	or	r18, r22
    3238:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
    323a:	25 81       	ldd	r18, Z+5	; 0x05
    323c:	28 30       	cpi	r18, 0x08	; 8
    323e:	60 f4       	brcc	.+24     	; 0x3258 <_Z4loopv+0xdc4>
    3240:	6b b1       	in	r22, 0x0b	; 11
    3242:	27 70       	andi	r18, 0x07	; 7
    3244:	8c 01       	movw	r16, r24
    3246:	02 c0       	rjmp	.+4      	; 0x324c <_Z4loopv+0xdb8>
    3248:	00 0f       	add	r16, r16
    324a:	11 1f       	adc	r17, r17
    324c:	2a 95       	dec	r18
    324e:	e2 f7       	brpl	.-8      	; 0x3248 <_Z4loopv+0xdb4>
    3250:	98 01       	movw	r18, r16
    3252:	26 2b       	or	r18, r22
    3254:	2b b9       	out	0x0b, r18	; 11
    3256:	0b c0       	rjmp	.+22     	; 0x326e <_Z4loopv+0xdda>
    3258:	65 b1       	in	r22, 0x05	; 5
    325a:	27 70       	andi	r18, 0x07	; 7
    325c:	dc 01       	movw	r26, r24
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <_Z4loopv+0xdd0>
    3260:	aa 0f       	add	r26, r26
    3262:	bb 1f       	adc	r27, r27
    3264:	2a 95       	dec	r18
    3266:	e2 f7       	brpl	.-8      	; 0x3260 <_Z4loopv+0xdcc>
    3268:	9d 01       	movw	r18, r26
    326a:	26 2b       	or	r18, r22
    326c:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    326e:	20 81       	ld	r18, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3270:	28 30       	cpi	r18, 0x08	; 8
    3272:	68 f4       	brcc	.+26     	; 0x328e <_Z4loopv+0xdfa>
    3274:	3b b1       	in	r19, 0x0b	; 11
    3276:	27 70       	andi	r18, 0x07	; 7
    3278:	bc 01       	movw	r22, r24
    327a:	02 c0       	rjmp	.+4      	; 0x3280 <_Z4loopv+0xdec>
    327c:	66 0f       	add	r22, r22
    327e:	77 1f       	adc	r23, r23
    3280:	2a 95       	dec	r18
    3282:	e2 f7       	brpl	.-8      	; 0x327c <_Z4loopv+0xde8>
    3284:	26 2f       	mov	r18, r22
    3286:	20 95       	com	r18
    3288:	23 23       	and	r18, r19
    328a:	2b b9       	out	0x0b, r18	; 11
    328c:	0c c0       	rjmp	.+24     	; 0x32a6 <_Z4loopv+0xe12>
    328e:	35 b1       	in	r19, 0x05	; 5
    3290:	27 70       	andi	r18, 0x07	; 7
    3292:	bc 01       	movw	r22, r24
    3294:	02 c0       	rjmp	.+4      	; 0x329a <_Z4loopv+0xe06>
    3296:	66 0f       	add	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	2a 95       	dec	r18
    329c:	e2 f7       	brpl	.-8      	; 0x3296 <_Z4loopv+0xe02>
    329e:	26 2f       	mov	r18, r22
    32a0:	20 95       	com	r18
    32a2:	23 23       	and	r18, r19
    32a4:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    32a6:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    32a8:	28 30       	cpi	r18, 0x08	; 8
    32aa:	60 f4       	brcc	.+24     	; 0x32c4 <_Z4loopv+0xe30>
    32ac:	6b b1       	in	r22, 0x0b	; 11
    32ae:	27 70       	andi	r18, 0x07	; 7
    32b0:	8c 01       	movw	r16, r24
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <_Z4loopv+0xe24>
    32b4:	00 0f       	add	r16, r16
    32b6:	11 1f       	adc	r17, r17
    32b8:	2a 95       	dec	r18
    32ba:	e2 f7       	brpl	.-8      	; 0x32b4 <_Z4loopv+0xe20>
    32bc:	98 01       	movw	r18, r16
    32be:	26 2b       	or	r18, r22
    32c0:	2b b9       	out	0x0b, r18	; 11
    32c2:	0b c0       	rjmp	.+22     	; 0x32da <_Z4loopv+0xe46>
    32c4:	65 b1       	in	r22, 0x05	; 5
    32c6:	27 70       	andi	r18, 0x07	; 7
    32c8:	dc 01       	movw	r26, r24
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <_Z4loopv+0xe3c>
    32cc:	aa 0f       	add	r26, r26
    32ce:	bb 1f       	adc	r27, r27
    32d0:	2a 95       	dec	r18
    32d2:	e2 f7       	brpl	.-8      	; 0x32cc <_Z4loopv+0xe38>
    32d4:	9d 01       	movw	r18, r26
    32d6:	26 2b       	or	r18, r22
    32d8:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32da:	b5 e0       	ldi	r27, 0x05	; 5
    32dc:	ba 95       	dec	r27
    32de:	f1 f7       	brne	.-4      	; 0x32dc <_Z4loopv+0xe48>
    32e0:	00 00       	nop
    32e2:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    32e4:	28 30       	cpi	r18, 0x08	; 8
    32e6:	68 f4       	brcc	.+26     	; 0x3302 <_Z4loopv+0xe6e>
    32e8:	3b b1       	in	r19, 0x0b	; 11
    32ea:	27 70       	andi	r18, 0x07	; 7
    32ec:	bc 01       	movw	r22, r24
    32ee:	02 c0       	rjmp	.+4      	; 0x32f4 <_Z4loopv+0xe60>
    32f0:	66 0f       	add	r22, r22
    32f2:	77 1f       	adc	r23, r23
    32f4:	2a 95       	dec	r18
    32f6:	e2 f7       	brpl	.-8      	; 0x32f0 <_Z4loopv+0xe5c>
    32f8:	26 2f       	mov	r18, r22
    32fa:	20 95       	com	r18
    32fc:	23 23       	and	r18, r19
    32fe:	2b b9       	out	0x0b, r18	; 11
    3300:	0c c0       	rjmp	.+24     	; 0x331a <_Z4loopv+0xe86>
    3302:	35 b1       	in	r19, 0x05	; 5
    3304:	27 70       	andi	r18, 0x07	; 7
    3306:	bc 01       	movw	r22, r24
    3308:	02 c0       	rjmp	.+4      	; 0x330e <_Z4loopv+0xe7a>
    330a:	66 0f       	add	r22, r22
    330c:	77 1f       	adc	r23, r23
    330e:	2a 95       	dec	r18
    3310:	e2 f7       	brpl	.-8      	; 0x330a <_Z4loopv+0xe76>
    3312:	26 2f       	mov	r18, r22
    3314:	20 95       	com	r18
    3316:	23 23       	and	r18, r19
    3318:	25 b9       	out	0x05, r18	; 5
    331a:	af e1       	ldi	r26, 0x1F	; 31
    331c:	b3 e0       	ldi	r27, 0x03	; 3
    331e:	11 97       	sbiw	r26, 0x01	; 1
    3320:	f1 f7       	brne	.-4      	; 0x331e <_Z4loopv+0xe8a>
    3322:	00 c0       	rjmp	.+0      	; 0x3324 <_Z4loopv+0xe90>
    3324:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    3326:	22 81       	ldd	r18, Z+2	; 0x02
    3328:	28 30       	cpi	r18, 0x08	; 8
    332a:	68 f4       	brcc	.+26     	; 0x3346 <_Z4loopv+0xeb2>
    332c:	3b b1       	in	r19, 0x0b	; 11
    332e:	27 70       	andi	r18, 0x07	; 7
    3330:	bc 01       	movw	r22, r24
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <_Z4loopv+0xea4>
    3334:	66 0f       	add	r22, r22
    3336:	77 1f       	adc	r23, r23
    3338:	2a 95       	dec	r18
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <_Z4loopv+0xea0>
    333c:	26 2f       	mov	r18, r22
    333e:	20 95       	com	r18
    3340:	23 23       	and	r18, r19
    3342:	2b b9       	out	0x0b, r18	; 11
    3344:	0c c0       	rjmp	.+24     	; 0x335e <_Z4loopv+0xeca>
    3346:	35 b1       	in	r19, 0x05	; 5
    3348:	27 70       	andi	r18, 0x07	; 7
    334a:	bc 01       	movw	r22, r24
    334c:	02 c0       	rjmp	.+4      	; 0x3352 <_Z4loopv+0xebe>
    334e:	66 0f       	add	r22, r22
    3350:	77 1f       	adc	r23, r23
    3352:	2a 95       	dec	r18
    3354:	e2 f7       	brpl	.-8      	; 0x334e <_Z4loopv+0xeba>
    3356:	26 2f       	mov	r18, r22
    3358:	20 95       	com	r18
    335a:	23 23       	and	r18, r19
    335c:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    335e:	23 81       	ldd	r18, Z+3	; 0x03
    3360:	28 30       	cpi	r18, 0x08	; 8
    3362:	68 f4       	brcc	.+26     	; 0x337e <_Z4loopv+0xeea>
    3364:	3b b1       	in	r19, 0x0b	; 11
    3366:	27 70       	andi	r18, 0x07	; 7
    3368:	bc 01       	movw	r22, r24
    336a:	02 c0       	rjmp	.+4      	; 0x3370 <_Z4loopv+0xedc>
    336c:	66 0f       	add	r22, r22
    336e:	77 1f       	adc	r23, r23
    3370:	2a 95       	dec	r18
    3372:	e2 f7       	brpl	.-8      	; 0x336c <_Z4loopv+0xed8>
    3374:	26 2f       	mov	r18, r22
    3376:	20 95       	com	r18
    3378:	23 23       	and	r18, r19
    337a:	2b b9       	out	0x0b, r18	; 11
    337c:	0c c0       	rjmp	.+24     	; 0x3396 <_Z4loopv+0xf02>
    337e:	35 b1       	in	r19, 0x05	; 5
    3380:	27 70       	andi	r18, 0x07	; 7
    3382:	bc 01       	movw	r22, r24
    3384:	02 c0       	rjmp	.+4      	; 0x338a <_Z4loopv+0xef6>
    3386:	66 0f       	add	r22, r22
    3388:	77 1f       	adc	r23, r23
    338a:	2a 95       	dec	r18
    338c:	e2 f7       	brpl	.-8      	; 0x3386 <_Z4loopv+0xef2>
    338e:	26 2f       	mov	r18, r22
    3390:	20 95       	com	r18
    3392:	23 23       	and	r18, r19
    3394:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    3396:	24 81       	ldd	r18, Z+4	; 0x04
    3398:	28 30       	cpi	r18, 0x08	; 8
    339a:	68 f4       	brcc	.+26     	; 0x33b6 <_Z4loopv+0xf22>
    339c:	3b b1       	in	r19, 0x0b	; 11
    339e:	27 70       	andi	r18, 0x07	; 7
    33a0:	bc 01       	movw	r22, r24
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <_Z4loopv+0xf14>
    33a4:	66 0f       	add	r22, r22
    33a6:	77 1f       	adc	r23, r23
    33a8:	2a 95       	dec	r18
    33aa:	e2 f7       	brpl	.-8      	; 0x33a4 <_Z4loopv+0xf10>
    33ac:	26 2f       	mov	r18, r22
    33ae:	20 95       	com	r18
    33b0:	23 23       	and	r18, r19
    33b2:	2b b9       	out	0x0b, r18	; 11
    33b4:	0c c0       	rjmp	.+24     	; 0x33ce <_Z4loopv+0xf3a>
    33b6:	35 b1       	in	r19, 0x05	; 5
    33b8:	27 70       	andi	r18, 0x07	; 7
    33ba:	bc 01       	movw	r22, r24
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <_Z4loopv+0xf2e>
    33be:	66 0f       	add	r22, r22
    33c0:	77 1f       	adc	r23, r23
    33c2:	2a 95       	dec	r18
    33c4:	e2 f7       	brpl	.-8      	; 0x33be <_Z4loopv+0xf2a>
    33c6:	26 2f       	mov	r18, r22
    33c8:	20 95       	com	r18
    33ca:	23 23       	and	r18, r19
    33cc:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    33ce:	25 81       	ldd	r18, Z+5	; 0x05
    33d0:	28 30       	cpi	r18, 0x08	; 8
    33d2:	68 f4       	brcc	.+26     	; 0x33ee <_Z4loopv+0xf5a>
    33d4:	3b b1       	in	r19, 0x0b	; 11
    33d6:	27 70       	andi	r18, 0x07	; 7
    33d8:	bc 01       	movw	r22, r24
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <_Z4loopv+0xf4c>
    33dc:	66 0f       	add	r22, r22
    33de:	77 1f       	adc	r23, r23
    33e0:	2a 95       	dec	r18
    33e2:	e2 f7       	brpl	.-8      	; 0x33dc <_Z4loopv+0xf48>
    33e4:	26 2f       	mov	r18, r22
    33e6:	20 95       	com	r18
    33e8:	23 23       	and	r18, r19
    33ea:	2b b9       	out	0x0b, r18	; 11
    33ec:	0c c0       	rjmp	.+24     	; 0x3406 <_Z4loopv+0xf72>
    33ee:	35 b1       	in	r19, 0x05	; 5
    33f0:	27 70       	andi	r18, 0x07	; 7
    33f2:	bc 01       	movw	r22, r24
    33f4:	02 c0       	rjmp	.+4      	; 0x33fa <_Z4loopv+0xf66>
    33f6:	66 0f       	add	r22, r22
    33f8:	77 1f       	adc	r23, r23
    33fa:	2a 95       	dec	r18
    33fc:	e2 f7       	brpl	.-8      	; 0x33f6 <_Z4loopv+0xf62>
    33fe:	26 2f       	mov	r18, r22
    3400:	20 95       	com	r18
    3402:	23 23       	and	r18, r19
    3404:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3406:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3408:	28 30       	cpi	r18, 0x08	; 8
    340a:	60 f4       	brcc	.+24     	; 0x3424 <_Z4loopv+0xf90>
    340c:	6b b1       	in	r22, 0x0b	; 11
    340e:	27 70       	andi	r18, 0x07	; 7
    3410:	8c 01       	movw	r16, r24
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <_Z4loopv+0xf84>
    3414:	00 0f       	add	r16, r16
    3416:	11 1f       	adc	r17, r17
    3418:	2a 95       	dec	r18
    341a:	e2 f7       	brpl	.-8      	; 0x3414 <_Z4loopv+0xf80>
    341c:	98 01       	movw	r18, r16
    341e:	26 2b       	or	r18, r22
    3420:	2b b9       	out	0x0b, r18	; 11
    3422:	0b c0       	rjmp	.+22     	; 0x343a <_Z4loopv+0xfa6>
    3424:	65 b1       	in	r22, 0x05	; 5
    3426:	27 70       	andi	r18, 0x07	; 7
    3428:	dc 01       	movw	r26, r24
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <_Z4loopv+0xf9c>
    342c:	aa 0f       	add	r26, r26
    342e:	bb 1f       	adc	r27, r27
    3430:	2a 95       	dec	r18
    3432:	e2 f7       	brpl	.-8      	; 0x342c <_Z4loopv+0xf98>
    3434:	9d 01       	movw	r18, r26
    3436:	26 2b       	or	r18, r22
    3438:	25 b9       	out	0x05, r18	; 5
    343a:	b5 e0       	ldi	r27, 0x05	; 5
    343c:	ba 95       	dec	r27
    343e:	f1 f7       	brne	.-4      	; 0x343c <_Z4loopv+0xfa8>
    3440:	00 00       	nop
    3442:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3444:	28 30       	cpi	r18, 0x08	; 8
    3446:	68 f4       	brcc	.+26     	; 0x3462 <_Z4loopv+0xfce>
    3448:	3b b1       	in	r19, 0x0b	; 11
    344a:	27 70       	andi	r18, 0x07	; 7
    344c:	bc 01       	movw	r22, r24
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <_Z4loopv+0xfc0>
    3450:	66 0f       	add	r22, r22
    3452:	77 1f       	adc	r23, r23
    3454:	2a 95       	dec	r18
    3456:	e2 f7       	brpl	.-8      	; 0x3450 <_Z4loopv+0xfbc>
    3458:	26 2f       	mov	r18, r22
    345a:	20 95       	com	r18
    345c:	23 23       	and	r18, r19
    345e:	2b b9       	out	0x0b, r18	; 11
    3460:	0c c0       	rjmp	.+24     	; 0x347a <_Z4loopv+0xfe6>
    3462:	35 b1       	in	r19, 0x05	; 5
    3464:	27 70       	andi	r18, 0x07	; 7
    3466:	bc 01       	movw	r22, r24
    3468:	02 c0       	rjmp	.+4      	; 0x346e <_Z4loopv+0xfda>
    346a:	66 0f       	add	r22, r22
    346c:	77 1f       	adc	r23, r23
    346e:	2a 95       	dec	r18
    3470:	e2 f7       	brpl	.-8      	; 0x346a <_Z4loopv+0xfd6>
    3472:	26 2f       	mov	r18, r22
    3474:	20 95       	com	r18
    3476:	23 23       	and	r18, r19
    3478:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    347a:	af e3       	ldi	r26, 0x3F	; 63
    347c:	bf e1       	ldi	r27, 0x1F	; 31
    347e:	11 97       	sbiw	r26, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <_Z4loopv+0xfea>
    3482:	00 c0       	rjmp	.+0      	; 0x3484 <_Z4loopv+0xff0>
    3484:	00 00       	nop
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    3486:	d7 01       	movw	r26, r14
    3488:	2d 91       	ld	r18, X+
    348a:	7d 01       	movw	r14, r26
namespace zeduino {
	
	namespace util {
		
		inline uint8 get_bit(byte w, uint8 pos) {
			return _GET_BIT(w, pos);
    348c:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    348e:	32 81       	ldd	r19, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3490:	24 ff       	sbrs	r18, 4
    3492:	18 c0       	rjmp	.+48     	; 0x34c4 <_Z4loopv+0x1030>
    3494:	38 30       	cpi	r19, 0x08	; 8
    3496:	58 f4       	brcc	.+22     	; 0x34ae <_Z4loopv+0x101a>
    3498:	7b b1       	in	r23, 0x0b	; 11
    349a:	37 70       	andi	r19, 0x07	; 7
    349c:	8c 01       	movw	r16, r24
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <_Z4loopv+0x1010>
    34a0:	00 0f       	add	r16, r16
    34a2:	11 1f       	adc	r17, r17
    34a4:	3a 95       	dec	r19
    34a6:	e2 f7       	brpl	.-8      	; 0x34a0 <_Z4loopv+0x100c>
    34a8:	07 2b       	or	r16, r23
    34aa:	0b b9       	out	0x0b, r16	; 11
    34ac:	26 c0       	rjmp	.+76     	; 0x34fa <_Z4loopv+0x1066>
    34ae:	75 b1       	in	r23, 0x05	; 5
    34b0:	37 70       	andi	r19, 0x07	; 7
    34b2:	8c 01       	movw	r16, r24
    34b4:	02 c0       	rjmp	.+4      	; 0x34ba <_Z4loopv+0x1026>
    34b6:	00 0f       	add	r16, r16
    34b8:	11 1f       	adc	r17, r17
    34ba:	3a 95       	dec	r19
    34bc:	e2 f7       	brpl	.-8      	; 0x34b6 <_Z4loopv+0x1022>
    34be:	07 2b       	or	r16, r23
    34c0:	05 b9       	out	0x05, r16	; 5
    34c2:	1b c0       	rjmp	.+54     	; 0x34fa <_Z4loopv+0x1066>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    34c4:	38 30       	cpi	r19, 0x08	; 8
    34c6:	68 f4       	brcc	.+26     	; 0x34e2 <_Z4loopv+0x104e>
    34c8:	7b b1       	in	r23, 0x0b	; 11
    34ca:	37 70       	andi	r19, 0x07	; 7
    34cc:	8c 01       	movw	r16, r24
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <_Z4loopv+0x1040>
    34d0:	00 0f       	add	r16, r16
    34d2:	11 1f       	adc	r17, r17
    34d4:	3a 95       	dec	r19
    34d6:	e2 f7       	brpl	.-8      	; 0x34d0 <_Z4loopv+0x103c>
    34d8:	30 2f       	mov	r19, r16
    34da:	30 95       	com	r19
    34dc:	37 23       	and	r19, r23
    34de:	3b b9       	out	0x0b, r19	; 11
    34e0:	0c c0       	rjmp	.+24     	; 0x34fa <_Z4loopv+0x1066>
    34e2:	75 b1       	in	r23, 0x05	; 5
    34e4:	37 70       	andi	r19, 0x07	; 7
    34e6:	8c 01       	movw	r16, r24
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <_Z4loopv+0x105a>
    34ea:	00 0f       	add	r16, r16
    34ec:	11 1f       	adc	r17, r17
    34ee:	3a 95       	dec	r19
    34f0:	e2 f7       	brpl	.-8      	; 0x34ea <_Z4loopv+0x1056>
    34f2:	30 2f       	mov	r19, r16
    34f4:	30 95       	com	r19
    34f6:	37 23       	and	r19, r23
    34f8:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    34fa:	33 81       	ldd	r19, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    34fc:	25 ff       	sbrs	r18, 5
    34fe:	18 c0       	rjmp	.+48     	; 0x3530 <_Z4loopv+0x109c>
    3500:	38 30       	cpi	r19, 0x08	; 8
    3502:	58 f4       	brcc	.+22     	; 0x351a <_Z4loopv+0x1086>
    3504:	7b b1       	in	r23, 0x0b	; 11
    3506:	37 70       	andi	r19, 0x07	; 7
    3508:	8c 01       	movw	r16, r24
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <_Z4loopv+0x107c>
    350c:	00 0f       	add	r16, r16
    350e:	11 1f       	adc	r17, r17
    3510:	3a 95       	dec	r19
    3512:	e2 f7       	brpl	.-8      	; 0x350c <_Z4loopv+0x1078>
    3514:	07 2b       	or	r16, r23
    3516:	0b b9       	out	0x0b, r16	; 11
    3518:	26 c0       	rjmp	.+76     	; 0x3566 <_Z4loopv+0x10d2>
    351a:	75 b1       	in	r23, 0x05	; 5
    351c:	37 70       	andi	r19, 0x07	; 7
    351e:	8c 01       	movw	r16, r24
    3520:	02 c0       	rjmp	.+4      	; 0x3526 <_Z4loopv+0x1092>
    3522:	00 0f       	add	r16, r16
    3524:	11 1f       	adc	r17, r17
    3526:	3a 95       	dec	r19
    3528:	e2 f7       	brpl	.-8      	; 0x3522 <_Z4loopv+0x108e>
    352a:	07 2b       	or	r16, r23
    352c:	05 b9       	out	0x05, r16	; 5
    352e:	1b c0       	rjmp	.+54     	; 0x3566 <_Z4loopv+0x10d2>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3530:	38 30       	cpi	r19, 0x08	; 8
    3532:	68 f4       	brcc	.+26     	; 0x354e <_Z4loopv+0x10ba>
    3534:	7b b1       	in	r23, 0x0b	; 11
    3536:	37 70       	andi	r19, 0x07	; 7
    3538:	8c 01       	movw	r16, r24
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <_Z4loopv+0x10ac>
    353c:	00 0f       	add	r16, r16
    353e:	11 1f       	adc	r17, r17
    3540:	3a 95       	dec	r19
    3542:	e2 f7       	brpl	.-8      	; 0x353c <_Z4loopv+0x10a8>
    3544:	30 2f       	mov	r19, r16
    3546:	30 95       	com	r19
    3548:	37 23       	and	r19, r23
    354a:	3b b9       	out	0x0b, r19	; 11
    354c:	0c c0       	rjmp	.+24     	; 0x3566 <_Z4loopv+0x10d2>
    354e:	75 b1       	in	r23, 0x05	; 5
    3550:	37 70       	andi	r19, 0x07	; 7
    3552:	8c 01       	movw	r16, r24
    3554:	02 c0       	rjmp	.+4      	; 0x355a <_Z4loopv+0x10c6>
    3556:	00 0f       	add	r16, r16
    3558:	11 1f       	adc	r17, r17
    355a:	3a 95       	dec	r19
    355c:	e2 f7       	brpl	.-8      	; 0x3556 <_Z4loopv+0x10c2>
    355e:	30 2f       	mov	r19, r16
    3560:	30 95       	com	r19
    3562:	37 23       	and	r19, r23
    3564:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    3566:	34 81       	ldd	r19, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3568:	26 ff       	sbrs	r18, 6
    356a:	18 c0       	rjmp	.+48     	; 0x359c <_Z4loopv+0x1108>
    356c:	38 30       	cpi	r19, 0x08	; 8
    356e:	58 f4       	brcc	.+22     	; 0x3586 <_Z4loopv+0x10f2>
    3570:	7b b1       	in	r23, 0x0b	; 11
    3572:	37 70       	andi	r19, 0x07	; 7
    3574:	8c 01       	movw	r16, r24
    3576:	02 c0       	rjmp	.+4      	; 0x357c <_Z4loopv+0x10e8>
    3578:	00 0f       	add	r16, r16
    357a:	11 1f       	adc	r17, r17
    357c:	3a 95       	dec	r19
    357e:	e2 f7       	brpl	.-8      	; 0x3578 <_Z4loopv+0x10e4>
    3580:	07 2b       	or	r16, r23
    3582:	0b b9       	out	0x0b, r16	; 11
    3584:	26 c0       	rjmp	.+76     	; 0x35d2 <_Z4loopv+0x113e>
    3586:	75 b1       	in	r23, 0x05	; 5
    3588:	37 70       	andi	r19, 0x07	; 7
    358a:	8c 01       	movw	r16, r24
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <_Z4loopv+0x10fe>
    358e:	00 0f       	add	r16, r16
    3590:	11 1f       	adc	r17, r17
    3592:	3a 95       	dec	r19
    3594:	e2 f7       	brpl	.-8      	; 0x358e <_Z4loopv+0x10fa>
    3596:	07 2b       	or	r16, r23
    3598:	05 b9       	out	0x05, r16	; 5
    359a:	1b c0       	rjmp	.+54     	; 0x35d2 <_Z4loopv+0x113e>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    359c:	38 30       	cpi	r19, 0x08	; 8
    359e:	68 f4       	brcc	.+26     	; 0x35ba <_Z4loopv+0x1126>
    35a0:	7b b1       	in	r23, 0x0b	; 11
    35a2:	37 70       	andi	r19, 0x07	; 7
    35a4:	8c 01       	movw	r16, r24
    35a6:	02 c0       	rjmp	.+4      	; 0x35ac <_Z4loopv+0x1118>
    35a8:	00 0f       	add	r16, r16
    35aa:	11 1f       	adc	r17, r17
    35ac:	3a 95       	dec	r19
    35ae:	e2 f7       	brpl	.-8      	; 0x35a8 <_Z4loopv+0x1114>
    35b0:	30 2f       	mov	r19, r16
    35b2:	30 95       	com	r19
    35b4:	37 23       	and	r19, r23
    35b6:	3b b9       	out	0x0b, r19	; 11
    35b8:	0c c0       	rjmp	.+24     	; 0x35d2 <_Z4loopv+0x113e>
    35ba:	75 b1       	in	r23, 0x05	; 5
    35bc:	37 70       	andi	r19, 0x07	; 7
    35be:	8c 01       	movw	r16, r24
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <_Z4loopv+0x1132>
    35c2:	00 0f       	add	r16, r16
    35c4:	11 1f       	adc	r17, r17
    35c6:	3a 95       	dec	r19
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <_Z4loopv+0x112e>
    35ca:	30 2f       	mov	r19, r16
    35cc:	30 95       	com	r19
    35ce:	37 23       	and	r19, r23
    35d0:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    35d2:	35 81       	ldd	r19, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    35d4:	66 23       	and	r22, r22
    35d6:	c4 f4       	brge	.+48     	; 0x3608 <_Z4loopv+0x1174>
    35d8:	38 30       	cpi	r19, 0x08	; 8
    35da:	58 f4       	brcc	.+22     	; 0x35f2 <_Z4loopv+0x115e>
    35dc:	1b b1       	in	r17, 0x0b	; 11
    35de:	37 70       	andi	r19, 0x07	; 7
    35e0:	bc 01       	movw	r22, r24
    35e2:	02 c0       	rjmp	.+4      	; 0x35e8 <_Z4loopv+0x1154>
    35e4:	66 0f       	add	r22, r22
    35e6:	77 1f       	adc	r23, r23
    35e8:	3a 95       	dec	r19
    35ea:	e2 f7       	brpl	.-8      	; 0x35e4 <_Z4loopv+0x1150>
    35ec:	61 2b       	or	r22, r17
    35ee:	6b b9       	out	0x0b, r22	; 11
    35f0:	26 c0       	rjmp	.+76     	; 0x363e <_Z4loopv+0x11aa>
    35f2:	15 b1       	in	r17, 0x05	; 5
    35f4:	37 70       	andi	r19, 0x07	; 7
    35f6:	bc 01       	movw	r22, r24
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <_Z4loopv+0x116a>
    35fa:	66 0f       	add	r22, r22
    35fc:	77 1f       	adc	r23, r23
    35fe:	3a 95       	dec	r19
    3600:	e2 f7       	brpl	.-8      	; 0x35fa <_Z4loopv+0x1166>
    3602:	61 2b       	or	r22, r17
    3604:	65 b9       	out	0x05, r22	; 5
    3606:	1b c0       	rjmp	.+54     	; 0x363e <_Z4loopv+0x11aa>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3608:	38 30       	cpi	r19, 0x08	; 8
    360a:	68 f4       	brcc	.+26     	; 0x3626 <_Z4loopv+0x1192>
    360c:	6b b1       	in	r22, 0x0b	; 11
    360e:	37 70       	andi	r19, 0x07	; 7
    3610:	8c 01       	movw	r16, r24
    3612:	02 c0       	rjmp	.+4      	; 0x3618 <_Z4loopv+0x1184>
    3614:	00 0f       	add	r16, r16
    3616:	11 1f       	adc	r17, r17
    3618:	3a 95       	dec	r19
    361a:	e2 f7       	brpl	.-8      	; 0x3614 <_Z4loopv+0x1180>
    361c:	30 2f       	mov	r19, r16
    361e:	30 95       	com	r19
    3620:	36 23       	and	r19, r22
    3622:	3b b9       	out	0x0b, r19	; 11
    3624:	0c c0       	rjmp	.+24     	; 0x363e <_Z4loopv+0x11aa>
    3626:	65 b1       	in	r22, 0x05	; 5
    3628:	37 70       	andi	r19, 0x07	; 7
    362a:	8c 01       	movw	r16, r24
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <_Z4loopv+0x119e>
    362e:	00 0f       	add	r16, r16
    3630:	11 1f       	adc	r17, r17
    3632:	3a 95       	dec	r19
    3634:	e2 f7       	brpl	.-8      	; 0x362e <_Z4loopv+0x119a>
    3636:	30 2f       	mov	r19, r16
    3638:	30 95       	com	r19
    363a:	36 23       	and	r19, r22
    363c:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    363e:	30 81       	ld	r19, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3640:	38 30       	cpi	r19, 0x08	; 8
    3642:	58 f4       	brcc	.+22     	; 0x365a <_Z4loopv+0x11c6>
    3644:	1b b1       	in	r17, 0x0b	; 11
    3646:	37 70       	andi	r19, 0x07	; 7
    3648:	bc 01       	movw	r22, r24
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <_Z4loopv+0x11bc>
    364c:	66 0f       	add	r22, r22
    364e:	77 1f       	adc	r23, r23
    3650:	3a 95       	dec	r19
    3652:	e2 f7       	brpl	.-8      	; 0x364c <_Z4loopv+0x11b8>
    3654:	61 2b       	or	r22, r17
    3656:	6b b9       	out	0x0b, r22	; 11
    3658:	0a c0       	rjmp	.+20     	; 0x366e <_Z4loopv+0x11da>
    365a:	15 b1       	in	r17, 0x05	; 5
    365c:	37 70       	andi	r19, 0x07	; 7
    365e:	bc 01       	movw	r22, r24
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <_Z4loopv+0x11d2>
    3662:	66 0f       	add	r22, r22
    3664:	77 1f       	adc	r23, r23
    3666:	3a 95       	dec	r19
    3668:	e2 f7       	brpl	.-8      	; 0x3662 <_Z4loopv+0x11ce>
    366a:	61 2b       	or	r22, r17
    366c:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    366e:	31 81       	ldd	r19, Z+1	; 0x01
    3670:	38 30       	cpi	r19, 0x08	; 8
    3672:	58 f4       	brcc	.+22     	; 0x368a <_Z4loopv+0x11f6>
    3674:	1b b1       	in	r17, 0x0b	; 11
    3676:	37 70       	andi	r19, 0x07	; 7
    3678:	bc 01       	movw	r22, r24
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <_Z4loopv+0x11ec>
    367c:	66 0f       	add	r22, r22
    367e:	77 1f       	adc	r23, r23
    3680:	3a 95       	dec	r19
    3682:	e2 f7       	brpl	.-8      	; 0x367c <_Z4loopv+0x11e8>
    3684:	61 2b       	or	r22, r17
    3686:	6b b9       	out	0x0b, r22	; 11
    3688:	0a c0       	rjmp	.+20     	; 0x369e <_Z4loopv+0x120a>
    368a:	15 b1       	in	r17, 0x05	; 5
    368c:	37 70       	andi	r19, 0x07	; 7
    368e:	bc 01       	movw	r22, r24
    3690:	02 c0       	rjmp	.+4      	; 0x3696 <_Z4loopv+0x1202>
    3692:	66 0f       	add	r22, r22
    3694:	77 1f       	adc	r23, r23
    3696:	3a 95       	dec	r19
    3698:	e2 f7       	brpl	.-8      	; 0x3692 <_Z4loopv+0x11fe>
    369a:	61 2b       	or	r22, r17
    369c:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    369e:	b5 e0       	ldi	r27, 0x05	; 5
    36a0:	ba 95       	dec	r27
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <_Z4loopv+0x120c>
    36a4:	00 00       	nop
    36a6:	31 81       	ldd	r19, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    36a8:	38 30       	cpi	r19, 0x08	; 8
    36aa:	68 f4       	brcc	.+26     	; 0x36c6 <_Z4loopv+0x1232>
    36ac:	6b b1       	in	r22, 0x0b	; 11
    36ae:	37 70       	andi	r19, 0x07	; 7
    36b0:	8c 01       	movw	r16, r24
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <_Z4loopv+0x1224>
    36b4:	00 0f       	add	r16, r16
    36b6:	11 1f       	adc	r17, r17
    36b8:	3a 95       	dec	r19
    36ba:	e2 f7       	brpl	.-8      	; 0x36b4 <_Z4loopv+0x1220>
    36bc:	30 2f       	mov	r19, r16
    36be:	30 95       	com	r19
    36c0:	36 23       	and	r19, r22
    36c2:	3b b9       	out	0x0b, r19	; 11
    36c4:	0c c0       	rjmp	.+24     	; 0x36de <_Z4loopv+0x124a>
    36c6:	65 b1       	in	r22, 0x05	; 5
    36c8:	37 70       	andi	r19, 0x07	; 7
    36ca:	8c 01       	movw	r16, r24
    36cc:	02 c0       	rjmp	.+4      	; 0x36d2 <_Z4loopv+0x123e>
    36ce:	00 0f       	add	r16, r16
    36d0:	11 1f       	adc	r17, r17
    36d2:	3a 95       	dec	r19
    36d4:	e2 f7       	brpl	.-8      	; 0x36ce <_Z4loopv+0x123a>
    36d6:	30 2f       	mov	r19, r16
    36d8:	30 95       	com	r19
    36da:	36 23       	and	r19, r22
    36dc:	35 b9       	out	0x05, r19	; 5
    36de:	af e1       	ldi	r26, 0x1F	; 31
    36e0:	b3 e0       	ldi	r27, 0x03	; 3
    36e2:	11 97       	sbiw	r26, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <_Z4loopv+0x124e>
    36e6:	00 c0       	rjmp	.+0      	; 0x36e8 <_Z4loopv+0x1254>
    36e8:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    36ea:	32 81       	ldd	r19, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    36ec:	20 ff       	sbrs	r18, 0
    36ee:	18 c0       	rjmp	.+48     	; 0x3720 <_Z4loopv+0x128c>
    36f0:	38 30       	cpi	r19, 0x08	; 8
    36f2:	58 f4       	brcc	.+22     	; 0x370a <_Z4loopv+0x1276>
    36f4:	1b b1       	in	r17, 0x0b	; 11
    36f6:	37 70       	andi	r19, 0x07	; 7
    36f8:	bc 01       	movw	r22, r24
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <_Z4loopv+0x126c>
    36fc:	66 0f       	add	r22, r22
    36fe:	77 1f       	adc	r23, r23
    3700:	3a 95       	dec	r19
    3702:	e2 f7       	brpl	.-8      	; 0x36fc <_Z4loopv+0x1268>
    3704:	61 2b       	or	r22, r17
    3706:	6b b9       	out	0x0b, r22	; 11
    3708:	26 c0       	rjmp	.+76     	; 0x3756 <_Z4loopv+0x12c2>
    370a:	15 b1       	in	r17, 0x05	; 5
    370c:	37 70       	andi	r19, 0x07	; 7
    370e:	bc 01       	movw	r22, r24
    3710:	02 c0       	rjmp	.+4      	; 0x3716 <_Z4loopv+0x1282>
    3712:	66 0f       	add	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	3a 95       	dec	r19
    3718:	e2 f7       	brpl	.-8      	; 0x3712 <_Z4loopv+0x127e>
    371a:	61 2b       	or	r22, r17
    371c:	65 b9       	out	0x05, r22	; 5
    371e:	1b c0       	rjmp	.+54     	; 0x3756 <_Z4loopv+0x12c2>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3720:	38 30       	cpi	r19, 0x08	; 8
    3722:	68 f4       	brcc	.+26     	; 0x373e <_Z4loopv+0x12aa>
    3724:	6b b1       	in	r22, 0x0b	; 11
    3726:	37 70       	andi	r19, 0x07	; 7
    3728:	8c 01       	movw	r16, r24
    372a:	02 c0       	rjmp	.+4      	; 0x3730 <_Z4loopv+0x129c>
    372c:	00 0f       	add	r16, r16
    372e:	11 1f       	adc	r17, r17
    3730:	3a 95       	dec	r19
    3732:	e2 f7       	brpl	.-8      	; 0x372c <_Z4loopv+0x1298>
    3734:	30 2f       	mov	r19, r16
    3736:	30 95       	com	r19
    3738:	36 23       	and	r19, r22
    373a:	3b b9       	out	0x0b, r19	; 11
    373c:	0c c0       	rjmp	.+24     	; 0x3756 <_Z4loopv+0x12c2>
    373e:	65 b1       	in	r22, 0x05	; 5
    3740:	37 70       	andi	r19, 0x07	; 7
    3742:	8c 01       	movw	r16, r24
    3744:	02 c0       	rjmp	.+4      	; 0x374a <_Z4loopv+0x12b6>
    3746:	00 0f       	add	r16, r16
    3748:	11 1f       	adc	r17, r17
    374a:	3a 95       	dec	r19
    374c:	e2 f7       	brpl	.-8      	; 0x3746 <_Z4loopv+0x12b2>
    374e:	30 2f       	mov	r19, r16
    3750:	30 95       	com	r19
    3752:	36 23       	and	r19, r22
    3754:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3756:	33 81       	ldd	r19, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3758:	21 ff       	sbrs	r18, 1
    375a:	18 c0       	rjmp	.+48     	; 0x378c <_Z4loopv+0x12f8>
    375c:	38 30       	cpi	r19, 0x08	; 8
    375e:	58 f4       	brcc	.+22     	; 0x3776 <_Z4loopv+0x12e2>
    3760:	1b b1       	in	r17, 0x0b	; 11
    3762:	37 70       	andi	r19, 0x07	; 7
    3764:	bc 01       	movw	r22, r24
    3766:	02 c0       	rjmp	.+4      	; 0x376c <_Z4loopv+0x12d8>
    3768:	66 0f       	add	r22, r22
    376a:	77 1f       	adc	r23, r23
    376c:	3a 95       	dec	r19
    376e:	e2 f7       	brpl	.-8      	; 0x3768 <_Z4loopv+0x12d4>
    3770:	61 2b       	or	r22, r17
    3772:	6b b9       	out	0x0b, r22	; 11
    3774:	26 c0       	rjmp	.+76     	; 0x37c2 <_Z4loopv+0x132e>
    3776:	15 b1       	in	r17, 0x05	; 5
    3778:	37 70       	andi	r19, 0x07	; 7
    377a:	bc 01       	movw	r22, r24
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <_Z4loopv+0x12ee>
    377e:	66 0f       	add	r22, r22
    3780:	77 1f       	adc	r23, r23
    3782:	3a 95       	dec	r19
    3784:	e2 f7       	brpl	.-8      	; 0x377e <_Z4loopv+0x12ea>
    3786:	61 2b       	or	r22, r17
    3788:	65 b9       	out	0x05, r22	; 5
    378a:	1b c0       	rjmp	.+54     	; 0x37c2 <_Z4loopv+0x132e>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    378c:	38 30       	cpi	r19, 0x08	; 8
    378e:	68 f4       	brcc	.+26     	; 0x37aa <_Z4loopv+0x1316>
    3790:	6b b1       	in	r22, 0x0b	; 11
    3792:	37 70       	andi	r19, 0x07	; 7
    3794:	8c 01       	movw	r16, r24
    3796:	02 c0       	rjmp	.+4      	; 0x379c <_Z4loopv+0x1308>
    3798:	00 0f       	add	r16, r16
    379a:	11 1f       	adc	r17, r17
    379c:	3a 95       	dec	r19
    379e:	e2 f7       	brpl	.-8      	; 0x3798 <_Z4loopv+0x1304>
    37a0:	30 2f       	mov	r19, r16
    37a2:	30 95       	com	r19
    37a4:	36 23       	and	r19, r22
    37a6:	3b b9       	out	0x0b, r19	; 11
    37a8:	0c c0       	rjmp	.+24     	; 0x37c2 <_Z4loopv+0x132e>
    37aa:	65 b1       	in	r22, 0x05	; 5
    37ac:	37 70       	andi	r19, 0x07	; 7
    37ae:	8c 01       	movw	r16, r24
    37b0:	02 c0       	rjmp	.+4      	; 0x37b6 <_Z4loopv+0x1322>
    37b2:	00 0f       	add	r16, r16
    37b4:	11 1f       	adc	r17, r17
    37b6:	3a 95       	dec	r19
    37b8:	e2 f7       	brpl	.-8      	; 0x37b2 <_Z4loopv+0x131e>
    37ba:	30 2f       	mov	r19, r16
    37bc:	30 95       	com	r19
    37be:	36 23       	and	r19, r22
    37c0:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    37c2:	34 81       	ldd	r19, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    37c4:	22 ff       	sbrs	r18, 2
    37c6:	18 c0       	rjmp	.+48     	; 0x37f8 <_Z4loopv+0x1364>
    37c8:	38 30       	cpi	r19, 0x08	; 8
    37ca:	58 f4       	brcc	.+22     	; 0x37e2 <_Z4loopv+0x134e>
    37cc:	1b b1       	in	r17, 0x0b	; 11
    37ce:	37 70       	andi	r19, 0x07	; 7
    37d0:	bc 01       	movw	r22, r24
    37d2:	02 c0       	rjmp	.+4      	; 0x37d8 <_Z4loopv+0x1344>
    37d4:	66 0f       	add	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	3a 95       	dec	r19
    37da:	e2 f7       	brpl	.-8      	; 0x37d4 <_Z4loopv+0x1340>
    37dc:	61 2b       	or	r22, r17
    37de:	6b b9       	out	0x0b, r22	; 11
    37e0:	26 c0       	rjmp	.+76     	; 0x382e <_Z4loopv+0x139a>
    37e2:	15 b1       	in	r17, 0x05	; 5
    37e4:	37 70       	andi	r19, 0x07	; 7
    37e6:	bc 01       	movw	r22, r24
    37e8:	02 c0       	rjmp	.+4      	; 0x37ee <_Z4loopv+0x135a>
    37ea:	66 0f       	add	r22, r22
    37ec:	77 1f       	adc	r23, r23
    37ee:	3a 95       	dec	r19
    37f0:	e2 f7       	brpl	.-8      	; 0x37ea <_Z4loopv+0x1356>
    37f2:	61 2b       	or	r22, r17
    37f4:	65 b9       	out	0x05, r22	; 5
    37f6:	1b c0       	rjmp	.+54     	; 0x382e <_Z4loopv+0x139a>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    37f8:	38 30       	cpi	r19, 0x08	; 8
    37fa:	68 f4       	brcc	.+26     	; 0x3816 <_Z4loopv+0x1382>
    37fc:	6b b1       	in	r22, 0x0b	; 11
    37fe:	37 70       	andi	r19, 0x07	; 7
    3800:	8c 01       	movw	r16, r24
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <_Z4loopv+0x1374>
    3804:	00 0f       	add	r16, r16
    3806:	11 1f       	adc	r17, r17
    3808:	3a 95       	dec	r19
    380a:	e2 f7       	brpl	.-8      	; 0x3804 <_Z4loopv+0x1370>
    380c:	30 2f       	mov	r19, r16
    380e:	30 95       	com	r19
    3810:	36 23       	and	r19, r22
    3812:	3b b9       	out	0x0b, r19	; 11
    3814:	0c c0       	rjmp	.+24     	; 0x382e <_Z4loopv+0x139a>
    3816:	65 b1       	in	r22, 0x05	; 5
    3818:	37 70       	andi	r19, 0x07	; 7
    381a:	8c 01       	movw	r16, r24
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <_Z4loopv+0x138e>
    381e:	00 0f       	add	r16, r16
    3820:	11 1f       	adc	r17, r17
    3822:	3a 95       	dec	r19
    3824:	e2 f7       	brpl	.-8      	; 0x381e <_Z4loopv+0x138a>
    3826:	30 2f       	mov	r19, r16
    3828:	30 95       	com	r19
    382a:	36 23       	and	r19, r22
    382c:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    382e:	35 81       	ldd	r19, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3830:	23 ff       	sbrs	r18, 3
    3832:	1a c0       	rjmp	.+52     	; 0x3868 <_Z4loopv+0x13d4>
    3834:	38 30       	cpi	r19, 0x08	; 8
    3836:	60 f4       	brcc	.+24     	; 0x3850 <_Z4loopv+0x13bc>
    3838:	6b b1       	in	r22, 0x0b	; 11
    383a:	37 70       	andi	r19, 0x07	; 7
    383c:	8c 01       	movw	r16, r24
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <_Z4loopv+0x13b0>
    3840:	00 0f       	add	r16, r16
    3842:	11 1f       	adc	r17, r17
    3844:	3a 95       	dec	r19
    3846:	e2 f7       	brpl	.-8      	; 0x3840 <_Z4loopv+0x13ac>
    3848:	98 01       	movw	r18, r16
    384a:	26 2b       	or	r18, r22
    384c:	2b b9       	out	0x0b, r18	; 11
    384e:	27 c0       	rjmp	.+78     	; 0x389e <_Z4loopv+0x140a>
    3850:	65 b1       	in	r22, 0x05	; 5
    3852:	37 70       	andi	r19, 0x07	; 7
    3854:	dc 01       	movw	r26, r24
    3856:	02 c0       	rjmp	.+4      	; 0x385c <_Z4loopv+0x13c8>
    3858:	aa 0f       	add	r26, r26
    385a:	bb 1f       	adc	r27, r27
    385c:	3a 95       	dec	r19
    385e:	e2 f7       	brpl	.-8      	; 0x3858 <_Z4loopv+0x13c4>
    3860:	9d 01       	movw	r18, r26
    3862:	26 2b       	or	r18, r22
    3864:	25 b9       	out	0x05, r18	; 5
    3866:	1b c0       	rjmp	.+54     	; 0x389e <_Z4loopv+0x140a>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3868:	38 30       	cpi	r19, 0x08	; 8
    386a:	68 f4       	brcc	.+26     	; 0x3886 <_Z4loopv+0x13f2>
    386c:	6b b1       	in	r22, 0x0b	; 11
    386e:	37 70       	andi	r19, 0x07	; 7
    3870:	8c 01       	movw	r16, r24
    3872:	02 c0       	rjmp	.+4      	; 0x3878 <_Z4loopv+0x13e4>
    3874:	00 0f       	add	r16, r16
    3876:	11 1f       	adc	r17, r17
    3878:	3a 95       	dec	r19
    387a:	e2 f7       	brpl	.-8      	; 0x3874 <_Z4loopv+0x13e0>
    387c:	98 01       	movw	r18, r16
    387e:	20 95       	com	r18
    3880:	26 23       	and	r18, r22
    3882:	2b b9       	out	0x0b, r18	; 11
    3884:	0c c0       	rjmp	.+24     	; 0x389e <_Z4loopv+0x140a>
    3886:	65 b1       	in	r22, 0x05	; 5
    3888:	37 70       	andi	r19, 0x07	; 7
    388a:	dc 01       	movw	r26, r24
    388c:	02 c0       	rjmp	.+4      	; 0x3892 <_Z4loopv+0x13fe>
    388e:	aa 0f       	add	r26, r26
    3890:	bb 1f       	adc	r27, r27
    3892:	3a 95       	dec	r19
    3894:	e2 f7       	brpl	.-8      	; 0x388e <_Z4loopv+0x13fa>
    3896:	9d 01       	movw	r18, r26
    3898:	20 95       	com	r18
    389a:	26 23       	and	r18, r22
    389c:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    389e:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    38a0:	28 30       	cpi	r18, 0x08	; 8
    38a2:	60 f4       	brcc	.+24     	; 0x38bc <_Z4loopv+0x1428>
    38a4:	6b b1       	in	r22, 0x0b	; 11
    38a6:	27 70       	andi	r18, 0x07	; 7
    38a8:	8c 01       	movw	r16, r24
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <_Z4loopv+0x141c>
    38ac:	00 0f       	add	r16, r16
    38ae:	11 1f       	adc	r17, r17
    38b0:	2a 95       	dec	r18
    38b2:	e2 f7       	brpl	.-8      	; 0x38ac <_Z4loopv+0x1418>
    38b4:	98 01       	movw	r18, r16
    38b6:	26 2b       	or	r18, r22
    38b8:	2b b9       	out	0x0b, r18	; 11
    38ba:	0b c0       	rjmp	.+22     	; 0x38d2 <_Z4loopv+0x143e>
    38bc:	65 b1       	in	r22, 0x05	; 5
    38be:	27 70       	andi	r18, 0x07	; 7
    38c0:	dc 01       	movw	r26, r24
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <_Z4loopv+0x1434>
    38c4:	aa 0f       	add	r26, r26
    38c6:	bb 1f       	adc	r27, r27
    38c8:	2a 95       	dec	r18
    38ca:	e2 f7       	brpl	.-8      	; 0x38c4 <_Z4loopv+0x1430>
    38cc:	9d 01       	movw	r18, r26
    38ce:	26 2b       	or	r18, r22
    38d0:	25 b9       	out	0x05, r18	; 5
    38d2:	b5 e0       	ldi	r27, 0x05	; 5
    38d4:	ba 95       	dec	r27
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <_Z4loopv+0x1440>
    38d8:	00 00       	nop
    38da:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    38dc:	28 30       	cpi	r18, 0x08	; 8
    38de:	68 f4       	brcc	.+26     	; 0x38fa <_Z4loopv+0x1466>
    38e0:	3b b1       	in	r19, 0x0b	; 11
    38e2:	27 70       	andi	r18, 0x07	; 7
    38e4:	bc 01       	movw	r22, r24
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <_Z4loopv+0x1458>
    38e8:	66 0f       	add	r22, r22
    38ea:	77 1f       	adc	r23, r23
    38ec:	2a 95       	dec	r18
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <_Z4loopv+0x1454>
    38f0:	26 2f       	mov	r18, r22
    38f2:	20 95       	com	r18
    38f4:	23 23       	and	r18, r19
    38f6:	2b b9       	out	0x0b, r18	; 11
    38f8:	0c c0       	rjmp	.+24     	; 0x3912 <_Z4loopv+0x147e>
    38fa:	35 b1       	in	r19, 0x05	; 5
    38fc:	27 70       	andi	r18, 0x07	; 7
    38fe:	bc 01       	movw	r22, r24
    3900:	02 c0       	rjmp	.+4      	; 0x3906 <_Z4loopv+0x1472>
    3902:	66 0f       	add	r22, r22
    3904:	77 1f       	adc	r23, r23
    3906:	2a 95       	dec	r18
    3908:	e2 f7       	brpl	.-8      	; 0x3902 <_Z4loopv+0x146e>
    390a:	26 2f       	mov	r18, r22
    390c:	20 95       	com	r18
    390e:	23 23       	and	r18, r19
    3910:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3912:	af e3       	ldi	r26, 0x3F	; 63
    3914:	bf e1       	ldi	r27, 0x1F	; 31
    3916:	11 97       	sbiw	r26, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <_Z4loopv+0x1482>
    391a:	00 c0       	rjmp	.+0      	; 0x391c <_Z4loopv+0x1488>
    391c:	00 00       	nop
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    391e:	4f 5f       	subi	r20, 0xFF	; 255
    3920:	5f 4f       	sbci	r21, 0xFF	; 255
    3922:	40 32       	cpi	r20, 0x20	; 32
    3924:	51 05       	cpc	r21, r1
    3926:	09 f0       	breq	.+2      	; 0x392a <_Z4loopv+0x1496>
    3928:	2b cc       	rjmp	.-1962   	; 0x3180 <_Z4loopv+0xcec>
    392a:	0d c0       	rjmp	.+26     	; 0x3946 <_Z4loopv+0x14b2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    392c:	ba e0       	ldi	r27, 0x0A	; 10
    392e:	ba 95       	dec	r27
    3930:	f1 f7       	brne	.-4      	; 0x392e <_Z4loopv+0x149a>
    3932:	00 c0       	rjmp	.+0      	; 0x3934 <_Z4loopv+0x14a0>
					while (!read(_port));
					
					uint8 count = 0;
					while(read(_port) && count <= 35) {
						util::delay_us_static(2);
						count++;
    3934:	3f 5f       	subi	r19, 0xFF	; 255
    3936:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <_Z4loopv+0x1c0>
					}
					
					if (count >= 14) {						
    393a:	3e 30       	cpi	r19, 0x0E	; 14
    393c:	10 f4       	brcc	.+4      	; 0x3942 <_Z4loopv+0x14ae>
    393e:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <_Z4loopv+0x226>
    3942:	0c 94 40 13 	jmp	0x2680	; 0x2680 <_Z4loopv+0x1ec>
	
    3946:	a0 96       	adiw	r28, 0x20	; 32
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
    395a:	ff 90       	pop	r15
    395c:	ef 90       	pop	r14
    395e:	df 90       	pop	r13
    3960:	cf 90       	pop	r12
    3962:	bf 90       	pop	r11
    3964:	af 90       	pop	r10
    3966:	08 95       	ret

00003968 <main>:
void loop();

extern "C" {
	int main() {
		
		DDRB  = 0b00000000;
    3968:	14 b8       	out	0x04, r1	; 4
		DDRD  = 0b00000000;
    396a:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0b11111111;
    396c:	8f ef       	ldi	r24, 0xFF	; 255
    396e:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b11111111;
    3970:	8b b9       	out	0x0b, r24	; 11
		
		uart_init();
    3972:	0e 94 b0 00 	call	0x160	; 0x160 <_Z9uart_initv>
		enum EPrescaler {
			PS0 = CS00, PS1 = CS01, PS2 = CS02
		};
		
		inline void prescaler(EPrescaler p) {
			_SET_BIT(TCCR1B, p);
    3976:	e1 e8       	ldi	r30, 0x81	; 129
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	80 81       	ld	r24, Z
    397c:	82 60       	ori	r24, 0x02	; 2
    397e:	80 83       	st	Z, r24
		zeduino::clock::prescaler(zeduino::clock::PS1);
		setup();
    3980:	0e 94 89 03 	call	0x712	; 0x712 <_Z5setupv>
		while (true) loop();
    3984:	0e 94 4a 12 	call	0x2494	; 0x2494 <_Z4loopv>
    3988:	fd cf       	rjmp	.-6      	; 0x3984 <main+0x1c>

0000398a <malloc>:
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	cf 93       	push	r28
    3990:	df 93       	push	r29
    3992:	82 30       	cpi	r24, 0x02	; 2
    3994:	91 05       	cpc	r25, r1
    3996:	10 f4       	brcc	.+4      	; 0x399c <malloc+0x12>
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <__flp>
    39a0:	f0 91 77 01 	lds	r31, 0x0177	; 0x800177 <__flp+0x1>
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	a0 e0       	ldi	r26, 0x00	; 0
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	30 97       	sbiw	r30, 0x00	; 0
    39ae:	19 f1       	breq	.+70     	; 0x39f6 <malloc+0x6c>
    39b0:	40 81       	ld	r20, Z
    39b2:	51 81       	ldd	r21, Z+1	; 0x01
    39b4:	02 81       	ldd	r16, Z+2	; 0x02
    39b6:	13 81       	ldd	r17, Z+3	; 0x03
    39b8:	48 17       	cp	r20, r24
    39ba:	59 07       	cpc	r21, r25
    39bc:	c8 f0       	brcs	.+50     	; 0x39f0 <malloc+0x66>
    39be:	84 17       	cp	r24, r20
    39c0:	95 07       	cpc	r25, r21
    39c2:	69 f4       	brne	.+26     	; 0x39de <malloc+0x54>
    39c4:	10 97       	sbiw	r26, 0x00	; 0
    39c6:	31 f0       	breq	.+12     	; 0x39d4 <malloc+0x4a>
    39c8:	12 96       	adiw	r26, 0x02	; 2
    39ca:	0c 93       	st	X, r16
    39cc:	12 97       	sbiw	r26, 0x02	; 2
    39ce:	13 96       	adiw	r26, 0x03	; 3
    39d0:	1c 93       	st	X, r17
    39d2:	27 c0       	rjmp	.+78     	; 0x3a22 <malloc+0x98>
    39d4:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <__flp>
    39d8:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <__flp+0x1>
    39dc:	22 c0       	rjmp	.+68     	; 0x3a22 <malloc+0x98>
    39de:	21 15       	cp	r18, r1
    39e0:	31 05       	cpc	r19, r1
    39e2:	19 f0       	breq	.+6      	; 0x39ea <malloc+0x60>
    39e4:	42 17       	cp	r20, r18
    39e6:	53 07       	cpc	r21, r19
    39e8:	18 f4       	brcc	.+6      	; 0x39f0 <malloc+0x66>
    39ea:	9a 01       	movw	r18, r20
    39ec:	bd 01       	movw	r22, r26
    39ee:	ef 01       	movw	r28, r30
    39f0:	df 01       	movw	r26, r30
    39f2:	f8 01       	movw	r30, r16
    39f4:	db cf       	rjmp	.-74     	; 0x39ac <malloc+0x22>
    39f6:	21 15       	cp	r18, r1
    39f8:	31 05       	cpc	r19, r1
    39fa:	f9 f0       	breq	.+62     	; 0x3a3a <malloc+0xb0>
    39fc:	28 1b       	sub	r18, r24
    39fe:	39 0b       	sbc	r19, r25
    3a00:	24 30       	cpi	r18, 0x04	; 4
    3a02:	31 05       	cpc	r19, r1
    3a04:	80 f4       	brcc	.+32     	; 0x3a26 <malloc+0x9c>
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0a:	61 15       	cp	r22, r1
    3a0c:	71 05       	cpc	r23, r1
    3a0e:	21 f0       	breq	.+8      	; 0x3a18 <malloc+0x8e>
    3a10:	fb 01       	movw	r30, r22
    3a12:	93 83       	std	Z+3, r25	; 0x03
    3a14:	82 83       	std	Z+2, r24	; 0x02
    3a16:	04 c0       	rjmp	.+8      	; 0x3a20 <malloc+0x96>
    3a18:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <__flp+0x1>
    3a1c:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__flp>
    3a20:	fe 01       	movw	r30, r28
    3a22:	32 96       	adiw	r30, 0x02	; 2
    3a24:	44 c0       	rjmp	.+136    	; 0x3aae <malloc+0x124>
    3a26:	fe 01       	movw	r30, r28
    3a28:	e2 0f       	add	r30, r18
    3a2a:	f3 1f       	adc	r31, r19
    3a2c:	81 93       	st	Z+, r24
    3a2e:	91 93       	st	Z+, r25
    3a30:	22 50       	subi	r18, 0x02	; 2
    3a32:	31 09       	sbc	r19, r1
    3a34:	39 83       	std	Y+1, r19	; 0x01
    3a36:	28 83       	st	Y, r18
    3a38:	3a c0       	rjmp	.+116    	; 0x3aae <malloc+0x124>
    3a3a:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__brkval>
    3a3e:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__brkval+0x1>
    3a42:	23 2b       	or	r18, r19
    3a44:	41 f4       	brne	.+16     	; 0x3a56 <malloc+0xcc>
    3a46:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a4a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a4e:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <__brkval+0x1>
    3a52:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <__brkval>
    3a56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a5e:	21 15       	cp	r18, r1
    3a60:	31 05       	cpc	r19, r1
    3a62:	41 f4       	brne	.+16     	; 0x3a74 <malloc+0xea>
    3a64:	2d b7       	in	r18, 0x3d	; 61
    3a66:	3e b7       	in	r19, 0x3e	; 62
    3a68:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a6c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a70:	24 1b       	sub	r18, r20
    3a72:	35 0b       	sbc	r19, r21
    3a74:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <__brkval>
    3a78:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <__brkval+0x1>
    3a7c:	e2 17       	cp	r30, r18
    3a7e:	f3 07       	cpc	r31, r19
    3a80:	a0 f4       	brcc	.+40     	; 0x3aaa <malloc+0x120>
    3a82:	2e 1b       	sub	r18, r30
    3a84:	3f 0b       	sbc	r19, r31
    3a86:	28 17       	cp	r18, r24
    3a88:	39 07       	cpc	r19, r25
    3a8a:	78 f0       	brcs	.+30     	; 0x3aaa <malloc+0x120>
    3a8c:	ac 01       	movw	r20, r24
    3a8e:	4e 5f       	subi	r20, 0xFE	; 254
    3a90:	5f 4f       	sbci	r21, 0xFF	; 255
    3a92:	24 17       	cp	r18, r20
    3a94:	35 07       	cpc	r19, r21
    3a96:	48 f0       	brcs	.+18     	; 0x3aaa <malloc+0x120>
    3a98:	4e 0f       	add	r20, r30
    3a9a:	5f 1f       	adc	r21, r31
    3a9c:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <__brkval+0x1>
    3aa0:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <__brkval>
    3aa4:	81 93       	st	Z+, r24
    3aa6:	91 93       	st	Z+, r25
    3aa8:	02 c0       	rjmp	.+4      	; 0x3aae <malloc+0x124>
    3aaa:	e0 e0       	ldi	r30, 0x00	; 0
    3aac:	f0 e0       	ldi	r31, 0x00	; 0
    3aae:	cf 01       	movw	r24, r30
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <free>:
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	09 f4       	brne	.+2      	; 0x3ac4 <free+0xa>
    3ac2:	81 c0       	rjmp	.+258    	; 0x3bc6 <free+0x10c>
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	32 97       	sbiw	r30, 0x02	; 2
    3ac8:	13 82       	std	Z+3, r1	; 0x03
    3aca:	12 82       	std	Z+2, r1	; 0x02
    3acc:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <__flp>
    3ad0:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <__flp+0x1>
    3ad4:	10 97       	sbiw	r26, 0x00	; 0
    3ad6:	81 f4       	brne	.+32     	; 0x3af8 <free+0x3e>
    3ad8:	20 81       	ld	r18, Z
    3ada:	31 81       	ldd	r19, Z+1	; 0x01
    3adc:	82 0f       	add	r24, r18
    3ade:	93 1f       	adc	r25, r19
    3ae0:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__brkval>
    3ae4:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__brkval+0x1>
    3ae8:	28 17       	cp	r18, r24
    3aea:	39 07       	cpc	r19, r25
    3aec:	51 f5       	brne	.+84     	; 0x3b42 <free+0x88>
    3aee:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <__brkval+0x1>
    3af2:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <__brkval>
    3af6:	67 c0       	rjmp	.+206    	; 0x3bc6 <free+0x10c>
    3af8:	ed 01       	movw	r28, r26
    3afa:	20 e0       	ldi	r18, 0x00	; 0
    3afc:	30 e0       	ldi	r19, 0x00	; 0
    3afe:	ce 17       	cp	r28, r30
    3b00:	df 07       	cpc	r29, r31
    3b02:	40 f4       	brcc	.+16     	; 0x3b14 <free+0x5a>
    3b04:	4a 81       	ldd	r20, Y+2	; 0x02
    3b06:	5b 81       	ldd	r21, Y+3	; 0x03
    3b08:	9e 01       	movw	r18, r28
    3b0a:	41 15       	cp	r20, r1
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	f1 f0       	breq	.+60     	; 0x3b4c <free+0x92>
    3b10:	ea 01       	movw	r28, r20
    3b12:	f5 cf       	rjmp	.-22     	; 0x3afe <free+0x44>
    3b14:	d3 83       	std	Z+3, r29	; 0x03
    3b16:	c2 83       	std	Z+2, r28	; 0x02
    3b18:	40 81       	ld	r20, Z
    3b1a:	51 81       	ldd	r21, Z+1	; 0x01
    3b1c:	84 0f       	add	r24, r20
    3b1e:	95 1f       	adc	r25, r21
    3b20:	c8 17       	cp	r28, r24
    3b22:	d9 07       	cpc	r29, r25
    3b24:	59 f4       	brne	.+22     	; 0x3b3c <free+0x82>
    3b26:	88 81       	ld	r24, Y
    3b28:	99 81       	ldd	r25, Y+1	; 0x01
    3b2a:	84 0f       	add	r24, r20
    3b2c:	95 1f       	adc	r25, r21
    3b2e:	02 96       	adiw	r24, 0x02	; 2
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	80 83       	st	Z, r24
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	9b 81       	ldd	r25, Y+3	; 0x03
    3b38:	93 83       	std	Z+3, r25	; 0x03
    3b3a:	82 83       	std	Z+2, r24	; 0x02
    3b3c:	21 15       	cp	r18, r1
    3b3e:	31 05       	cpc	r19, r1
    3b40:	29 f4       	brne	.+10     	; 0x3b4c <free+0x92>
    3b42:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <__flp+0x1>
    3b46:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <__flp>
    3b4a:	3d c0       	rjmp	.+122    	; 0x3bc6 <free+0x10c>
    3b4c:	e9 01       	movw	r28, r18
    3b4e:	fb 83       	std	Y+3, r31	; 0x03
    3b50:	ea 83       	std	Y+2, r30	; 0x02
    3b52:	49 91       	ld	r20, Y+
    3b54:	59 91       	ld	r21, Y+
    3b56:	c4 0f       	add	r28, r20
    3b58:	d5 1f       	adc	r29, r21
    3b5a:	ec 17       	cp	r30, r28
    3b5c:	fd 07       	cpc	r31, r29
    3b5e:	61 f4       	brne	.+24     	; 0x3b78 <free+0xbe>
    3b60:	80 81       	ld	r24, Z
    3b62:	91 81       	ldd	r25, Z+1	; 0x01
    3b64:	84 0f       	add	r24, r20
    3b66:	95 1f       	adc	r25, r21
    3b68:	02 96       	adiw	r24, 0x02	; 2
    3b6a:	e9 01       	movw	r28, r18
    3b6c:	99 83       	std	Y+1, r25	; 0x01
    3b6e:	88 83       	st	Y, r24
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	9b 83       	std	Y+3, r25	; 0x03
    3b76:	8a 83       	std	Y+2, r24	; 0x02
    3b78:	e0 e0       	ldi	r30, 0x00	; 0
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	12 96       	adiw	r26, 0x02	; 2
    3b7e:	8d 91       	ld	r24, X+
    3b80:	9c 91       	ld	r25, X
    3b82:	13 97       	sbiw	r26, 0x03	; 3
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	19 f0       	breq	.+6      	; 0x3b8e <free+0xd4>
    3b88:	fd 01       	movw	r30, r26
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	f7 cf       	rjmp	.-18     	; 0x3b7c <free+0xc2>
    3b8e:	8d 91       	ld	r24, X+
    3b90:	9c 91       	ld	r25, X
    3b92:	11 97       	sbiw	r26, 0x01	; 1
    3b94:	9d 01       	movw	r18, r26
    3b96:	2e 5f       	subi	r18, 0xFE	; 254
    3b98:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9a:	82 0f       	add	r24, r18
    3b9c:	93 1f       	adc	r25, r19
    3b9e:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <__brkval>
    3ba2:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <__brkval+0x1>
    3ba6:	28 17       	cp	r18, r24
    3ba8:	39 07       	cpc	r19, r25
    3baa:	69 f4       	brne	.+26     	; 0x3bc6 <free+0x10c>
    3bac:	30 97       	sbiw	r30, 0x00	; 0
    3bae:	29 f4       	brne	.+10     	; 0x3bba <free+0x100>
    3bb0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <__flp+0x1>
    3bb4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__flp>
    3bb8:	02 c0       	rjmp	.+4      	; 0x3bbe <free+0x104>
    3bba:	13 82       	std	Z+3, r1	; 0x03
    3bbc:	12 82       	std	Z+2, r1	; 0x02
    3bbe:	b0 93 75 01 	sts	0x0175, r27	; 0x800175 <__brkval+0x1>
    3bc2:	a0 93 74 01 	sts	0x0174, r26	; 0x800174 <__brkval>
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	08 95       	ret

00003bcc <printf>:
    3bcc:	a0 e0       	ldi	r26, 0x00	; 0
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	ec ee       	ldi	r30, 0xEC	; 236
    3bd2:	fd e1       	ldi	r31, 0x1D	; 29
    3bd4:	0c 94 bf 20 	jmp	0x417e	; 0x417e <__prologue_saves__+0x20>
    3bd8:	ae 01       	movw	r20, r28
    3bda:	4b 5f       	subi	r20, 0xFB	; 251
    3bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    3bde:	fa 01       	movw	r30, r20
    3be0:	61 91       	ld	r22, Z+
    3be2:	71 91       	ld	r23, Z+
    3be4:	af 01       	movw	r20, r30
    3be6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__iob+0x2>
    3bea:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__iob+0x3>
    3bee:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <vfprintf>
    3bf2:	e2 e0       	ldi	r30, 0x02	; 2
    3bf4:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__epilogue_restores__+0x20>

00003bf8 <sprintf>:
    3bf8:	ae e0       	ldi	r26, 0x0E	; 14
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	e2 e0       	ldi	r30, 0x02	; 2
    3bfe:	fe e1       	ldi	r31, 0x1E	; 30
    3c00:	0c 94 bd 20 	jmp	0x417a	; 0x417a <__prologue_saves__+0x1c>
    3c04:	0d 89       	ldd	r16, Y+21	; 0x15
    3c06:	1e 89       	ldd	r17, Y+22	; 0x16
    3c08:	86 e0       	ldi	r24, 0x06	; 6
    3c0a:	8c 83       	std	Y+4, r24	; 0x04
    3c0c:	1a 83       	std	Y+2, r17	; 0x02
    3c0e:	09 83       	std	Y+1, r16	; 0x01
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	9f e7       	ldi	r25, 0x7F	; 127
    3c14:	9e 83       	std	Y+6, r25	; 0x06
    3c16:	8d 83       	std	Y+5, r24	; 0x05
    3c18:	ae 01       	movw	r20, r28
    3c1a:	47 5e       	subi	r20, 0xE7	; 231
    3c1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1e:	6f 89       	ldd	r22, Y+23	; 0x17
    3c20:	78 8d       	ldd	r23, Y+24	; 0x18
    3c22:	ce 01       	movw	r24, r28
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <vfprintf>
    3c2a:	ef 81       	ldd	r30, Y+7	; 0x07
    3c2c:	f8 85       	ldd	r31, Y+8	; 0x08
    3c2e:	e0 0f       	add	r30, r16
    3c30:	f1 1f       	adc	r31, r17
    3c32:	10 82       	st	Z, r1
    3c34:	2e 96       	adiw	r28, 0x0e	; 14
    3c36:	e4 e0       	ldi	r30, 0x04	; 4
    3c38:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <__epilogue_restores__+0x1c>

00003c3c <vfprintf>:
    3c3c:	ab e0       	ldi	r26, 0x0B	; 11
    3c3e:	b0 e0       	ldi	r27, 0x00	; 0
    3c40:	e4 e2       	ldi	r30, 0x24	; 36
    3c42:	fe e1       	ldi	r31, 0x1E	; 30
    3c44:	0c 94 af 20 	jmp	0x415e	; 0x415e <__prologue_saves__>
    3c48:	6c 01       	movw	r12, r24
    3c4a:	7b 01       	movw	r14, r22
    3c4c:	8a 01       	movw	r16, r20
    3c4e:	fc 01       	movw	r30, r24
    3c50:	17 82       	std	Z+7, r1	; 0x07
    3c52:	16 82       	std	Z+6, r1	; 0x06
    3c54:	83 81       	ldd	r24, Z+3	; 0x03
    3c56:	81 ff       	sbrs	r24, 1
    3c58:	cc c1       	rjmp	.+920    	; 0x3ff2 <vfprintf+0x3b6>
    3c5a:	ce 01       	movw	r24, r28
    3c5c:	01 96       	adiw	r24, 0x01	; 1
    3c5e:	3c 01       	movw	r6, r24
    3c60:	f6 01       	movw	r30, r12
    3c62:	93 81       	ldd	r25, Z+3	; 0x03
    3c64:	f7 01       	movw	r30, r14
    3c66:	93 fd       	sbrc	r25, 3
    3c68:	85 91       	lpm	r24, Z+
    3c6a:	93 ff       	sbrs	r25, 3
    3c6c:	81 91       	ld	r24, Z+
    3c6e:	7f 01       	movw	r14, r30
    3c70:	88 23       	and	r24, r24
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <vfprintf+0x3a>
    3c74:	ba c1       	rjmp	.+884    	; 0x3fea <vfprintf+0x3ae>
    3c76:	85 32       	cpi	r24, 0x25	; 37
    3c78:	39 f4       	brne	.+14     	; 0x3c88 <vfprintf+0x4c>
    3c7a:	93 fd       	sbrc	r25, 3
    3c7c:	85 91       	lpm	r24, Z+
    3c7e:	93 ff       	sbrs	r25, 3
    3c80:	81 91       	ld	r24, Z+
    3c82:	7f 01       	movw	r14, r30
    3c84:	85 32       	cpi	r24, 0x25	; 37
    3c86:	29 f4       	brne	.+10     	; 0x3c92 <vfprintf+0x56>
    3c88:	b6 01       	movw	r22, r12
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3c90:	e7 cf       	rjmp	.-50     	; 0x3c60 <vfprintf+0x24>
    3c92:	91 2c       	mov	r9, r1
    3c94:	21 2c       	mov	r2, r1
    3c96:	31 2c       	mov	r3, r1
    3c98:	ff e1       	ldi	r31, 0x1F	; 31
    3c9a:	f3 15       	cp	r31, r3
    3c9c:	d8 f0       	brcs	.+54     	; 0x3cd4 <vfprintf+0x98>
    3c9e:	8b 32       	cpi	r24, 0x2B	; 43
    3ca0:	79 f0       	breq	.+30     	; 0x3cc0 <vfprintf+0x84>
    3ca2:	38 f4       	brcc	.+14     	; 0x3cb2 <vfprintf+0x76>
    3ca4:	80 32       	cpi	r24, 0x20	; 32
    3ca6:	79 f0       	breq	.+30     	; 0x3cc6 <vfprintf+0x8a>
    3ca8:	83 32       	cpi	r24, 0x23	; 35
    3caa:	a1 f4       	brne	.+40     	; 0x3cd4 <vfprintf+0x98>
    3cac:	23 2d       	mov	r18, r3
    3cae:	20 61       	ori	r18, 0x10	; 16
    3cb0:	1d c0       	rjmp	.+58     	; 0x3cec <vfprintf+0xb0>
    3cb2:	8d 32       	cpi	r24, 0x2D	; 45
    3cb4:	61 f0       	breq	.+24     	; 0x3cce <vfprintf+0x92>
    3cb6:	80 33       	cpi	r24, 0x30	; 48
    3cb8:	69 f4       	brne	.+26     	; 0x3cd4 <vfprintf+0x98>
    3cba:	23 2d       	mov	r18, r3
    3cbc:	21 60       	ori	r18, 0x01	; 1
    3cbe:	16 c0       	rjmp	.+44     	; 0x3cec <vfprintf+0xb0>
    3cc0:	83 2d       	mov	r24, r3
    3cc2:	82 60       	ori	r24, 0x02	; 2
    3cc4:	38 2e       	mov	r3, r24
    3cc6:	e3 2d       	mov	r30, r3
    3cc8:	e4 60       	ori	r30, 0x04	; 4
    3cca:	3e 2e       	mov	r3, r30
    3ccc:	2a c0       	rjmp	.+84     	; 0x3d22 <vfprintf+0xe6>
    3cce:	f3 2d       	mov	r31, r3
    3cd0:	f8 60       	ori	r31, 0x08	; 8
    3cd2:	1d c0       	rjmp	.+58     	; 0x3d0e <vfprintf+0xd2>
    3cd4:	37 fc       	sbrc	r3, 7
    3cd6:	2d c0       	rjmp	.+90     	; 0x3d32 <vfprintf+0xf6>
    3cd8:	20 ed       	ldi	r18, 0xD0	; 208
    3cda:	28 0f       	add	r18, r24
    3cdc:	2a 30       	cpi	r18, 0x0A	; 10
    3cde:	40 f0       	brcs	.+16     	; 0x3cf0 <vfprintf+0xb4>
    3ce0:	8e 32       	cpi	r24, 0x2E	; 46
    3ce2:	b9 f4       	brne	.+46     	; 0x3d12 <vfprintf+0xd6>
    3ce4:	36 fc       	sbrc	r3, 6
    3ce6:	81 c1       	rjmp	.+770    	; 0x3fea <vfprintf+0x3ae>
    3ce8:	23 2d       	mov	r18, r3
    3cea:	20 64       	ori	r18, 0x40	; 64
    3cec:	32 2e       	mov	r3, r18
    3cee:	19 c0       	rjmp	.+50     	; 0x3d22 <vfprintf+0xe6>
    3cf0:	36 fe       	sbrs	r3, 6
    3cf2:	06 c0       	rjmp	.+12     	; 0x3d00 <vfprintf+0xc4>
    3cf4:	8a e0       	ldi	r24, 0x0A	; 10
    3cf6:	98 9e       	mul	r9, r24
    3cf8:	20 0d       	add	r18, r0
    3cfa:	11 24       	eor	r1, r1
    3cfc:	92 2e       	mov	r9, r18
    3cfe:	11 c0       	rjmp	.+34     	; 0x3d22 <vfprintf+0xe6>
    3d00:	ea e0       	ldi	r30, 0x0A	; 10
    3d02:	2e 9e       	mul	r2, r30
    3d04:	20 0d       	add	r18, r0
    3d06:	11 24       	eor	r1, r1
    3d08:	22 2e       	mov	r2, r18
    3d0a:	f3 2d       	mov	r31, r3
    3d0c:	f0 62       	ori	r31, 0x20	; 32
    3d0e:	3f 2e       	mov	r3, r31
    3d10:	08 c0       	rjmp	.+16     	; 0x3d22 <vfprintf+0xe6>
    3d12:	8c 36       	cpi	r24, 0x6C	; 108
    3d14:	21 f4       	brne	.+8      	; 0x3d1e <vfprintf+0xe2>
    3d16:	83 2d       	mov	r24, r3
    3d18:	80 68       	ori	r24, 0x80	; 128
    3d1a:	38 2e       	mov	r3, r24
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <vfprintf+0xe6>
    3d1e:	88 36       	cpi	r24, 0x68	; 104
    3d20:	41 f4       	brne	.+16     	; 0x3d32 <vfprintf+0xf6>
    3d22:	f7 01       	movw	r30, r14
    3d24:	93 fd       	sbrc	r25, 3
    3d26:	85 91       	lpm	r24, Z+
    3d28:	93 ff       	sbrs	r25, 3
    3d2a:	81 91       	ld	r24, Z+
    3d2c:	7f 01       	movw	r14, r30
    3d2e:	81 11       	cpse	r24, r1
    3d30:	b3 cf       	rjmp	.-154    	; 0x3c98 <vfprintf+0x5c>
    3d32:	98 2f       	mov	r25, r24
    3d34:	9f 7d       	andi	r25, 0xDF	; 223
    3d36:	95 54       	subi	r25, 0x45	; 69
    3d38:	93 30       	cpi	r25, 0x03	; 3
    3d3a:	28 f4       	brcc	.+10     	; 0x3d46 <vfprintf+0x10a>
    3d3c:	0c 5f       	subi	r16, 0xFC	; 252
    3d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d40:	9f e3       	ldi	r25, 0x3F	; 63
    3d42:	99 83       	std	Y+1, r25	; 0x01
    3d44:	0d c0       	rjmp	.+26     	; 0x3d60 <vfprintf+0x124>
    3d46:	83 36       	cpi	r24, 0x63	; 99
    3d48:	31 f0       	breq	.+12     	; 0x3d56 <vfprintf+0x11a>
    3d4a:	83 37       	cpi	r24, 0x73	; 115
    3d4c:	71 f0       	breq	.+28     	; 0x3d6a <vfprintf+0x12e>
    3d4e:	83 35       	cpi	r24, 0x53	; 83
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <vfprintf+0x118>
    3d52:	59 c0       	rjmp	.+178    	; 0x3e06 <vfprintf+0x1ca>
    3d54:	21 c0       	rjmp	.+66     	; 0x3d98 <vfprintf+0x15c>
    3d56:	f8 01       	movw	r30, r16
    3d58:	80 81       	ld	r24, Z
    3d5a:	89 83       	std	Y+1, r24	; 0x01
    3d5c:	0e 5f       	subi	r16, 0xFE	; 254
    3d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d60:	88 24       	eor	r8, r8
    3d62:	83 94       	inc	r8
    3d64:	91 2c       	mov	r9, r1
    3d66:	53 01       	movw	r10, r6
    3d68:	13 c0       	rjmp	.+38     	; 0x3d90 <vfprintf+0x154>
    3d6a:	28 01       	movw	r4, r16
    3d6c:	f2 e0       	ldi	r31, 0x02	; 2
    3d6e:	4f 0e       	add	r4, r31
    3d70:	51 1c       	adc	r5, r1
    3d72:	f8 01       	movw	r30, r16
    3d74:	a0 80       	ld	r10, Z
    3d76:	b1 80       	ldd	r11, Z+1	; 0x01
    3d78:	36 fe       	sbrs	r3, 6
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <vfprintf+0x146>
    3d7c:	69 2d       	mov	r22, r9
    3d7e:	70 e0       	ldi	r23, 0x00	; 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <vfprintf+0x14a>
    3d82:	6f ef       	ldi	r22, 0xFF	; 255
    3d84:	7f ef       	ldi	r23, 0xFF	; 255
    3d86:	c5 01       	movw	r24, r10
    3d88:	0e 94 0a 20 	call	0x4014	; 0x4014 <strnlen>
    3d8c:	4c 01       	movw	r8, r24
    3d8e:	82 01       	movw	r16, r4
    3d90:	f3 2d       	mov	r31, r3
    3d92:	ff 77       	andi	r31, 0x7F	; 127
    3d94:	3f 2e       	mov	r3, r31
    3d96:	16 c0       	rjmp	.+44     	; 0x3dc4 <vfprintf+0x188>
    3d98:	28 01       	movw	r4, r16
    3d9a:	22 e0       	ldi	r18, 0x02	; 2
    3d9c:	42 0e       	add	r4, r18
    3d9e:	51 1c       	adc	r5, r1
    3da0:	f8 01       	movw	r30, r16
    3da2:	a0 80       	ld	r10, Z
    3da4:	b1 80       	ldd	r11, Z+1	; 0x01
    3da6:	36 fe       	sbrs	r3, 6
    3da8:	03 c0       	rjmp	.+6      	; 0x3db0 <vfprintf+0x174>
    3daa:	69 2d       	mov	r22, r9
    3dac:	70 e0       	ldi	r23, 0x00	; 0
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <vfprintf+0x178>
    3db0:	6f ef       	ldi	r22, 0xFF	; 255
    3db2:	7f ef       	ldi	r23, 0xFF	; 255
    3db4:	c5 01       	movw	r24, r10
    3db6:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <strnlen_P>
    3dba:	4c 01       	movw	r8, r24
    3dbc:	f3 2d       	mov	r31, r3
    3dbe:	f0 68       	ori	r31, 0x80	; 128
    3dc0:	3f 2e       	mov	r3, r31
    3dc2:	82 01       	movw	r16, r4
    3dc4:	33 fc       	sbrc	r3, 3
    3dc6:	1b c0       	rjmp	.+54     	; 0x3dfe <vfprintf+0x1c2>
    3dc8:	82 2d       	mov	r24, r2
    3dca:	90 e0       	ldi	r25, 0x00	; 0
    3dcc:	88 16       	cp	r8, r24
    3dce:	99 06       	cpc	r9, r25
    3dd0:	b0 f4       	brcc	.+44     	; 0x3dfe <vfprintf+0x1c2>
    3dd2:	b6 01       	movw	r22, r12
    3dd4:	80 e2       	ldi	r24, 0x20	; 32
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3ddc:	2a 94       	dec	r2
    3dde:	f4 cf       	rjmp	.-24     	; 0x3dc8 <vfprintf+0x18c>
    3de0:	f5 01       	movw	r30, r10
    3de2:	37 fc       	sbrc	r3, 7
    3de4:	85 91       	lpm	r24, Z+
    3de6:	37 fe       	sbrs	r3, 7
    3de8:	81 91       	ld	r24, Z+
    3dea:	5f 01       	movw	r10, r30
    3dec:	b6 01       	movw	r22, r12
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3df4:	21 10       	cpse	r2, r1
    3df6:	2a 94       	dec	r2
    3df8:	21 e0       	ldi	r18, 0x01	; 1
    3dfa:	82 1a       	sub	r8, r18
    3dfc:	91 08       	sbc	r9, r1
    3dfe:	81 14       	cp	r8, r1
    3e00:	91 04       	cpc	r9, r1
    3e02:	71 f7       	brne	.-36     	; 0x3de0 <vfprintf+0x1a4>
    3e04:	e8 c0       	rjmp	.+464    	; 0x3fd6 <vfprintf+0x39a>
    3e06:	84 36       	cpi	r24, 0x64	; 100
    3e08:	11 f0       	breq	.+4      	; 0x3e0e <vfprintf+0x1d2>
    3e0a:	89 36       	cpi	r24, 0x69	; 105
    3e0c:	41 f5       	brne	.+80     	; 0x3e5e <vfprintf+0x222>
    3e0e:	f8 01       	movw	r30, r16
    3e10:	37 fe       	sbrs	r3, 7
    3e12:	07 c0       	rjmp	.+14     	; 0x3e22 <vfprintf+0x1e6>
    3e14:	60 81       	ld	r22, Z
    3e16:	71 81       	ldd	r23, Z+1	; 0x01
    3e18:	82 81       	ldd	r24, Z+2	; 0x02
    3e1a:	93 81       	ldd	r25, Z+3	; 0x03
    3e1c:	0c 5f       	subi	r16, 0xFC	; 252
    3e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <vfprintf+0x1f6>
    3e22:	60 81       	ld	r22, Z
    3e24:	71 81       	ldd	r23, Z+1	; 0x01
    3e26:	07 2e       	mov	r0, r23
    3e28:	00 0c       	add	r0, r0
    3e2a:	88 0b       	sbc	r24, r24
    3e2c:	99 0b       	sbc	r25, r25
    3e2e:	0e 5f       	subi	r16, 0xFE	; 254
    3e30:	1f 4f       	sbci	r17, 0xFF	; 255
    3e32:	f3 2d       	mov	r31, r3
    3e34:	ff 76       	andi	r31, 0x6F	; 111
    3e36:	3f 2e       	mov	r3, r31
    3e38:	97 ff       	sbrs	r25, 7
    3e3a:	09 c0       	rjmp	.+18     	; 0x3e4e <vfprintf+0x212>
    3e3c:	90 95       	com	r25
    3e3e:	80 95       	com	r24
    3e40:	70 95       	com	r23
    3e42:	61 95       	neg	r22
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	8f 4f       	sbci	r24, 0xFF	; 255
    3e48:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4a:	f0 68       	ori	r31, 0x80	; 128
    3e4c:	3f 2e       	mov	r3, r31
    3e4e:	2a e0       	ldi	r18, 0x0A	; 10
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	a3 01       	movw	r20, r6
    3e54:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__ultoa_invert>
    3e58:	88 2e       	mov	r8, r24
    3e5a:	86 18       	sub	r8, r6
    3e5c:	45 c0       	rjmp	.+138    	; 0x3ee8 <vfprintf+0x2ac>
    3e5e:	85 37       	cpi	r24, 0x75	; 117
    3e60:	31 f4       	brne	.+12     	; 0x3e6e <vfprintf+0x232>
    3e62:	23 2d       	mov	r18, r3
    3e64:	2f 7e       	andi	r18, 0xEF	; 239
    3e66:	b2 2e       	mov	r11, r18
    3e68:	2a e0       	ldi	r18, 0x0A	; 10
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	25 c0       	rjmp	.+74     	; 0x3eb8 <vfprintf+0x27c>
    3e6e:	93 2d       	mov	r25, r3
    3e70:	99 7f       	andi	r25, 0xF9	; 249
    3e72:	b9 2e       	mov	r11, r25
    3e74:	8f 36       	cpi	r24, 0x6F	; 111
    3e76:	c1 f0       	breq	.+48     	; 0x3ea8 <vfprintf+0x26c>
    3e78:	18 f4       	brcc	.+6      	; 0x3e80 <vfprintf+0x244>
    3e7a:	88 35       	cpi	r24, 0x58	; 88
    3e7c:	79 f0       	breq	.+30     	; 0x3e9c <vfprintf+0x260>
    3e7e:	b5 c0       	rjmp	.+362    	; 0x3fea <vfprintf+0x3ae>
    3e80:	80 37       	cpi	r24, 0x70	; 112
    3e82:	19 f0       	breq	.+6      	; 0x3e8a <vfprintf+0x24e>
    3e84:	88 37       	cpi	r24, 0x78	; 120
    3e86:	21 f0       	breq	.+8      	; 0x3e90 <vfprintf+0x254>
    3e88:	b0 c0       	rjmp	.+352    	; 0x3fea <vfprintf+0x3ae>
    3e8a:	e9 2f       	mov	r30, r25
    3e8c:	e0 61       	ori	r30, 0x10	; 16
    3e8e:	be 2e       	mov	r11, r30
    3e90:	b4 fe       	sbrs	r11, 4
    3e92:	0d c0       	rjmp	.+26     	; 0x3eae <vfprintf+0x272>
    3e94:	fb 2d       	mov	r31, r11
    3e96:	f4 60       	ori	r31, 0x04	; 4
    3e98:	bf 2e       	mov	r11, r31
    3e9a:	09 c0       	rjmp	.+18     	; 0x3eae <vfprintf+0x272>
    3e9c:	34 fe       	sbrs	r3, 4
    3e9e:	0a c0       	rjmp	.+20     	; 0x3eb4 <vfprintf+0x278>
    3ea0:	29 2f       	mov	r18, r25
    3ea2:	26 60       	ori	r18, 0x06	; 6
    3ea4:	b2 2e       	mov	r11, r18
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <vfprintf+0x278>
    3ea8:	28 e0       	ldi	r18, 0x08	; 8
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	05 c0       	rjmp	.+10     	; 0x3eb8 <vfprintf+0x27c>
    3eae:	20 e1       	ldi	r18, 0x10	; 16
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <vfprintf+0x27c>
    3eb4:	20 e1       	ldi	r18, 0x10	; 16
    3eb6:	32 e0       	ldi	r19, 0x02	; 2
    3eb8:	f8 01       	movw	r30, r16
    3eba:	b7 fe       	sbrs	r11, 7
    3ebc:	07 c0       	rjmp	.+14     	; 0x3ecc <vfprintf+0x290>
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	0c 5f       	subi	r16, 0xFC	; 252
    3ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eca:	06 c0       	rjmp	.+12     	; 0x3ed8 <vfprintf+0x29c>
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 5f       	subi	r16, 0xFE	; 254
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	a3 01       	movw	r20, r6
    3eda:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__ultoa_invert>
    3ede:	88 2e       	mov	r8, r24
    3ee0:	86 18       	sub	r8, r6
    3ee2:	fb 2d       	mov	r31, r11
    3ee4:	ff 77       	andi	r31, 0x7F	; 127
    3ee6:	3f 2e       	mov	r3, r31
    3ee8:	36 fe       	sbrs	r3, 6
    3eea:	0d c0       	rjmp	.+26     	; 0x3f06 <vfprintf+0x2ca>
    3eec:	23 2d       	mov	r18, r3
    3eee:	2e 7f       	andi	r18, 0xFE	; 254
    3ef0:	a2 2e       	mov	r10, r18
    3ef2:	89 14       	cp	r8, r9
    3ef4:	58 f4       	brcc	.+22     	; 0x3f0c <vfprintf+0x2d0>
    3ef6:	34 fe       	sbrs	r3, 4
    3ef8:	0b c0       	rjmp	.+22     	; 0x3f10 <vfprintf+0x2d4>
    3efa:	32 fc       	sbrc	r3, 2
    3efc:	09 c0       	rjmp	.+18     	; 0x3f10 <vfprintf+0x2d4>
    3efe:	83 2d       	mov	r24, r3
    3f00:	8e 7e       	andi	r24, 0xEE	; 238
    3f02:	a8 2e       	mov	r10, r24
    3f04:	05 c0       	rjmp	.+10     	; 0x3f10 <vfprintf+0x2d4>
    3f06:	b8 2c       	mov	r11, r8
    3f08:	a3 2c       	mov	r10, r3
    3f0a:	03 c0       	rjmp	.+6      	; 0x3f12 <vfprintf+0x2d6>
    3f0c:	b8 2c       	mov	r11, r8
    3f0e:	01 c0       	rjmp	.+2      	; 0x3f12 <vfprintf+0x2d6>
    3f10:	b9 2c       	mov	r11, r9
    3f12:	a4 fe       	sbrs	r10, 4
    3f14:	0f c0       	rjmp	.+30     	; 0x3f34 <vfprintf+0x2f8>
    3f16:	fe 01       	movw	r30, r28
    3f18:	e8 0d       	add	r30, r8
    3f1a:	f1 1d       	adc	r31, r1
    3f1c:	80 81       	ld	r24, Z
    3f1e:	80 33       	cpi	r24, 0x30	; 48
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <vfprintf+0x2ee>
    3f22:	9a 2d       	mov	r25, r10
    3f24:	99 7e       	andi	r25, 0xE9	; 233
    3f26:	a9 2e       	mov	r10, r25
    3f28:	09 c0       	rjmp	.+18     	; 0x3f3c <vfprintf+0x300>
    3f2a:	a2 fe       	sbrs	r10, 2
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <vfprintf+0x2fe>
    3f2e:	b3 94       	inc	r11
    3f30:	b3 94       	inc	r11
    3f32:	04 c0       	rjmp	.+8      	; 0x3f3c <vfprintf+0x300>
    3f34:	8a 2d       	mov	r24, r10
    3f36:	86 78       	andi	r24, 0x86	; 134
    3f38:	09 f0       	breq	.+2      	; 0x3f3c <vfprintf+0x300>
    3f3a:	b3 94       	inc	r11
    3f3c:	a3 fc       	sbrc	r10, 3
    3f3e:	11 c0       	rjmp	.+34     	; 0x3f62 <vfprintf+0x326>
    3f40:	a0 fe       	sbrs	r10, 0
    3f42:	06 c0       	rjmp	.+12     	; 0x3f50 <vfprintf+0x314>
    3f44:	b2 14       	cp	r11, r2
    3f46:	88 f4       	brcc	.+34     	; 0x3f6a <vfprintf+0x32e>
    3f48:	28 0c       	add	r2, r8
    3f4a:	92 2c       	mov	r9, r2
    3f4c:	9b 18       	sub	r9, r11
    3f4e:	0e c0       	rjmp	.+28     	; 0x3f6c <vfprintf+0x330>
    3f50:	b2 14       	cp	r11, r2
    3f52:	60 f4       	brcc	.+24     	; 0x3f6c <vfprintf+0x330>
    3f54:	b6 01       	movw	r22, r12
    3f56:	80 e2       	ldi	r24, 0x20	; 32
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3f5e:	b3 94       	inc	r11
    3f60:	f7 cf       	rjmp	.-18     	; 0x3f50 <vfprintf+0x314>
    3f62:	b2 14       	cp	r11, r2
    3f64:	18 f4       	brcc	.+6      	; 0x3f6c <vfprintf+0x330>
    3f66:	2b 18       	sub	r2, r11
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <vfprintf+0x332>
    3f6a:	98 2c       	mov	r9, r8
    3f6c:	21 2c       	mov	r2, r1
    3f6e:	a4 fe       	sbrs	r10, 4
    3f70:	10 c0       	rjmp	.+32     	; 0x3f92 <vfprintf+0x356>
    3f72:	b6 01       	movw	r22, r12
    3f74:	80 e3       	ldi	r24, 0x30	; 48
    3f76:	90 e0       	ldi	r25, 0x00	; 0
    3f78:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3f7c:	a2 fe       	sbrs	r10, 2
    3f7e:	17 c0       	rjmp	.+46     	; 0x3fae <vfprintf+0x372>
    3f80:	a1 fc       	sbrc	r10, 1
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <vfprintf+0x34e>
    3f84:	88 e7       	ldi	r24, 0x78	; 120
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <vfprintf+0x352>
    3f8a:	88 e5       	ldi	r24, 0x58	; 88
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	b6 01       	movw	r22, r12
    3f90:	0c c0       	rjmp	.+24     	; 0x3faa <vfprintf+0x36e>
    3f92:	8a 2d       	mov	r24, r10
    3f94:	86 78       	andi	r24, 0x86	; 134
    3f96:	59 f0       	breq	.+22     	; 0x3fae <vfprintf+0x372>
    3f98:	a1 fe       	sbrs	r10, 1
    3f9a:	02 c0       	rjmp	.+4      	; 0x3fa0 <vfprintf+0x364>
    3f9c:	8b e2       	ldi	r24, 0x2B	; 43
    3f9e:	01 c0       	rjmp	.+2      	; 0x3fa2 <vfprintf+0x366>
    3fa0:	80 e2       	ldi	r24, 0x20	; 32
    3fa2:	a7 fc       	sbrc	r10, 7
    3fa4:	8d e2       	ldi	r24, 0x2D	; 45
    3fa6:	b6 01       	movw	r22, r12
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3fae:	89 14       	cp	r8, r9
    3fb0:	38 f4       	brcc	.+14     	; 0x3fc0 <vfprintf+0x384>
    3fb2:	b6 01       	movw	r22, r12
    3fb4:	80 e3       	ldi	r24, 0x30	; 48
    3fb6:	90 e0       	ldi	r25, 0x00	; 0
    3fb8:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3fbc:	9a 94       	dec	r9
    3fbe:	f7 cf       	rjmp	.-18     	; 0x3fae <vfprintf+0x372>
    3fc0:	8a 94       	dec	r8
    3fc2:	f3 01       	movw	r30, r6
    3fc4:	e8 0d       	add	r30, r8
    3fc6:	f1 1d       	adc	r31, r1
    3fc8:	80 81       	ld	r24, Z
    3fca:	b6 01       	movw	r22, r12
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3fd2:	81 10       	cpse	r8, r1
    3fd4:	f5 cf       	rjmp	.-22     	; 0x3fc0 <vfprintf+0x384>
    3fd6:	22 20       	and	r2, r2
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <vfprintf+0x3a0>
    3fda:	42 ce       	rjmp	.-892    	; 0x3c60 <vfprintf+0x24>
    3fdc:	b6 01       	movw	r22, r12
    3fde:	80 e2       	ldi	r24, 0x20	; 32
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	0e 94 15 20 	call	0x402a	; 0x402a <fputc>
    3fe6:	2a 94       	dec	r2
    3fe8:	f6 cf       	rjmp	.-20     	; 0x3fd6 <vfprintf+0x39a>
    3fea:	f6 01       	movw	r30, r12
    3fec:	86 81       	ldd	r24, Z+6	; 0x06
    3fee:	97 81       	ldd	r25, Z+7	; 0x07
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <vfprintf+0x3ba>
    3ff2:	8f ef       	ldi	r24, 0xFF	; 255
    3ff4:	9f ef       	ldi	r25, 0xFF	; 255
    3ff6:	2b 96       	adiw	r28, 0x0b	; 11
    3ff8:	e2 e1       	ldi	r30, 0x12	; 18
    3ffa:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__epilogue_restores__>

00003ffe <strnlen_P>:
    3ffe:	fc 01       	movw	r30, r24
    4000:	05 90       	lpm	r0, Z+
    4002:	61 50       	subi	r22, 0x01	; 1
    4004:	70 40       	sbci	r23, 0x00	; 0
    4006:	01 10       	cpse	r0, r1
    4008:	d8 f7       	brcc	.-10     	; 0x4000 <strnlen_P+0x2>
    400a:	80 95       	com	r24
    400c:	90 95       	com	r25
    400e:	8e 0f       	add	r24, r30
    4010:	9f 1f       	adc	r25, r31
    4012:	08 95       	ret

00004014 <strnlen>:
    4014:	fc 01       	movw	r30, r24
    4016:	61 50       	subi	r22, 0x01	; 1
    4018:	70 40       	sbci	r23, 0x00	; 0
    401a:	01 90       	ld	r0, Z+
    401c:	01 10       	cpse	r0, r1
    401e:	d8 f7       	brcc	.-10     	; 0x4016 <strnlen+0x2>
    4020:	80 95       	com	r24
    4022:	90 95       	com	r25
    4024:	8e 0f       	add	r24, r30
    4026:	9f 1f       	adc	r25, r31
    4028:	08 95       	ret

0000402a <fputc>:
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	fb 01       	movw	r30, r22
    4034:	23 81       	ldd	r18, Z+3	; 0x03
    4036:	21 fd       	sbrc	r18, 1
    4038:	03 c0       	rjmp	.+6      	; 0x4040 <fputc+0x16>
    403a:	8f ef       	ldi	r24, 0xFF	; 255
    403c:	9f ef       	ldi	r25, 0xFF	; 255
    403e:	2c c0       	rjmp	.+88     	; 0x4098 <fputc+0x6e>
    4040:	22 ff       	sbrs	r18, 2
    4042:	16 c0       	rjmp	.+44     	; 0x4070 <fputc+0x46>
    4044:	46 81       	ldd	r20, Z+6	; 0x06
    4046:	57 81       	ldd	r21, Z+7	; 0x07
    4048:	24 81       	ldd	r18, Z+4	; 0x04
    404a:	35 81       	ldd	r19, Z+5	; 0x05
    404c:	42 17       	cp	r20, r18
    404e:	53 07       	cpc	r21, r19
    4050:	44 f4       	brge	.+16     	; 0x4062 <fputc+0x38>
    4052:	a0 81       	ld	r26, Z
    4054:	b1 81       	ldd	r27, Z+1	; 0x01
    4056:	9d 01       	movw	r18, r26
    4058:	2f 5f       	subi	r18, 0xFF	; 255
    405a:	3f 4f       	sbci	r19, 0xFF	; 255
    405c:	31 83       	std	Z+1, r19	; 0x01
    405e:	20 83       	st	Z, r18
    4060:	8c 93       	st	X, r24
    4062:	26 81       	ldd	r18, Z+6	; 0x06
    4064:	37 81       	ldd	r19, Z+7	; 0x07
    4066:	2f 5f       	subi	r18, 0xFF	; 255
    4068:	3f 4f       	sbci	r19, 0xFF	; 255
    406a:	37 83       	std	Z+7, r19	; 0x07
    406c:	26 83       	std	Z+6, r18	; 0x06
    406e:	14 c0       	rjmp	.+40     	; 0x4098 <fputc+0x6e>
    4070:	8b 01       	movw	r16, r22
    4072:	ec 01       	movw	r28, r24
    4074:	fb 01       	movw	r30, r22
    4076:	00 84       	ldd	r0, Z+8	; 0x08
    4078:	f1 85       	ldd	r31, Z+9	; 0x09
    407a:	e0 2d       	mov	r30, r0
    407c:	09 95       	icall
    407e:	89 2b       	or	r24, r25
    4080:	e1 f6       	brne	.-72     	; 0x403a <fputc+0x10>
    4082:	d8 01       	movw	r26, r16
    4084:	16 96       	adiw	r26, 0x06	; 6
    4086:	8d 91       	ld	r24, X+
    4088:	9c 91       	ld	r25, X
    408a:	17 97       	sbiw	r26, 0x07	; 7
    408c:	01 96       	adiw	r24, 0x01	; 1
    408e:	17 96       	adiw	r26, 0x07	; 7
    4090:	9c 93       	st	X, r25
    4092:	8e 93       	st	-X, r24
    4094:	16 97       	sbiw	r26, 0x06	; 6
    4096:	ce 01       	movw	r24, r28
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <__ultoa_invert>:
    40a2:	fa 01       	movw	r30, r20
    40a4:	aa 27       	eor	r26, r26
    40a6:	28 30       	cpi	r18, 0x08	; 8
    40a8:	51 f1       	breq	.+84     	; 0x40fe <__ultoa_invert+0x5c>
    40aa:	20 31       	cpi	r18, 0x10	; 16
    40ac:	81 f1       	breq	.+96     	; 0x410e <__ultoa_invert+0x6c>
    40ae:	e8 94       	clt
    40b0:	6f 93       	push	r22
    40b2:	6e 7f       	andi	r22, 0xFE	; 254
    40b4:	6e 5f       	subi	r22, 0xFE	; 254
    40b6:	7f 4f       	sbci	r23, 0xFF	; 255
    40b8:	8f 4f       	sbci	r24, 0xFF	; 255
    40ba:	9f 4f       	sbci	r25, 0xFF	; 255
    40bc:	af 4f       	sbci	r26, 0xFF	; 255
    40be:	b1 e0       	ldi	r27, 0x01	; 1
    40c0:	3e d0       	rcall	.+124    	; 0x413e <__ultoa_invert+0x9c>
    40c2:	b4 e0       	ldi	r27, 0x04	; 4
    40c4:	3c d0       	rcall	.+120    	; 0x413e <__ultoa_invert+0x9c>
    40c6:	67 0f       	add	r22, r23
    40c8:	78 1f       	adc	r23, r24
    40ca:	89 1f       	adc	r24, r25
    40cc:	9a 1f       	adc	r25, r26
    40ce:	a1 1d       	adc	r26, r1
    40d0:	68 0f       	add	r22, r24
    40d2:	79 1f       	adc	r23, r25
    40d4:	8a 1f       	adc	r24, r26
    40d6:	91 1d       	adc	r25, r1
    40d8:	a1 1d       	adc	r26, r1
    40da:	6a 0f       	add	r22, r26
    40dc:	71 1d       	adc	r23, r1
    40de:	81 1d       	adc	r24, r1
    40e0:	91 1d       	adc	r25, r1
    40e2:	a1 1d       	adc	r26, r1
    40e4:	20 d0       	rcall	.+64     	; 0x4126 <__ultoa_invert+0x84>
    40e6:	09 f4       	brne	.+2      	; 0x40ea <__ultoa_invert+0x48>
    40e8:	68 94       	set
    40ea:	3f 91       	pop	r19
    40ec:	2a e0       	ldi	r18, 0x0A	; 10
    40ee:	26 9f       	mul	r18, r22
    40f0:	11 24       	eor	r1, r1
    40f2:	30 19       	sub	r19, r0
    40f4:	30 5d       	subi	r19, 0xD0	; 208
    40f6:	31 93       	st	Z+, r19
    40f8:	de f6       	brtc	.-74     	; 0x40b0 <__ultoa_invert+0xe>
    40fa:	cf 01       	movw	r24, r30
    40fc:	08 95       	ret
    40fe:	46 2f       	mov	r20, r22
    4100:	47 70       	andi	r20, 0x07	; 7
    4102:	40 5d       	subi	r20, 0xD0	; 208
    4104:	41 93       	st	Z+, r20
    4106:	b3 e0       	ldi	r27, 0x03	; 3
    4108:	0f d0       	rcall	.+30     	; 0x4128 <__ultoa_invert+0x86>
    410a:	c9 f7       	brne	.-14     	; 0x40fe <__ultoa_invert+0x5c>
    410c:	f6 cf       	rjmp	.-20     	; 0x40fa <__ultoa_invert+0x58>
    410e:	46 2f       	mov	r20, r22
    4110:	4f 70       	andi	r20, 0x0F	; 15
    4112:	40 5d       	subi	r20, 0xD0	; 208
    4114:	4a 33       	cpi	r20, 0x3A	; 58
    4116:	18 f0       	brcs	.+6      	; 0x411e <__ultoa_invert+0x7c>
    4118:	49 5d       	subi	r20, 0xD9	; 217
    411a:	31 fd       	sbrc	r19, 1
    411c:	40 52       	subi	r20, 0x20	; 32
    411e:	41 93       	st	Z+, r20
    4120:	02 d0       	rcall	.+4      	; 0x4126 <__ultoa_invert+0x84>
    4122:	a9 f7       	brne	.-22     	; 0x410e <__ultoa_invert+0x6c>
    4124:	ea cf       	rjmp	.-44     	; 0x40fa <__ultoa_invert+0x58>
    4126:	b4 e0       	ldi	r27, 0x04	; 4
    4128:	a6 95       	lsr	r26
    412a:	97 95       	ror	r25
    412c:	87 95       	ror	r24
    412e:	77 95       	ror	r23
    4130:	67 95       	ror	r22
    4132:	ba 95       	dec	r27
    4134:	c9 f7       	brne	.-14     	; 0x4128 <__ultoa_invert+0x86>
    4136:	00 97       	sbiw	r24, 0x00	; 0
    4138:	61 05       	cpc	r22, r1
    413a:	71 05       	cpc	r23, r1
    413c:	08 95       	ret
    413e:	9b 01       	movw	r18, r22
    4140:	ac 01       	movw	r20, r24
    4142:	0a 2e       	mov	r0, r26
    4144:	06 94       	lsr	r0
    4146:	57 95       	ror	r21
    4148:	47 95       	ror	r20
    414a:	37 95       	ror	r19
    414c:	27 95       	ror	r18
    414e:	ba 95       	dec	r27
    4150:	c9 f7       	brne	.-14     	; 0x4144 <__ultoa_invert+0xa2>
    4152:	62 0f       	add	r22, r18
    4154:	73 1f       	adc	r23, r19
    4156:	84 1f       	adc	r24, r20
    4158:	95 1f       	adc	r25, r21
    415a:	a0 1d       	adc	r26, r0
    415c:	08 95       	ret

0000415e <__prologue_saves__>:
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	4f 92       	push	r4
    4164:	5f 92       	push	r5
    4166:	6f 92       	push	r6
    4168:	7f 92       	push	r7
    416a:	8f 92       	push	r8
    416c:	9f 92       	push	r9
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	ca 1b       	sub	r28, r26
    4188:	db 0b       	sbc	r29, r27
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	09 94       	ijmp

00004196 <__epilogue_restores__>:
    4196:	2a 88       	ldd	r2, Y+18	; 0x12
    4198:	39 88       	ldd	r3, Y+17	; 0x11
    419a:	48 88       	ldd	r4, Y+16	; 0x10
    419c:	5f 84       	ldd	r5, Y+15	; 0x0f
    419e:	6e 84       	ldd	r6, Y+14	; 0x0e
    41a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41a8:	b9 84       	ldd	r11, Y+9	; 0x09
    41aa:	c8 84       	ldd	r12, Y+8	; 0x08
    41ac:	df 80       	ldd	r13, Y+7	; 0x07
    41ae:	ee 80       	ldd	r14, Y+6	; 0x06
    41b0:	fd 80       	ldd	r15, Y+5	; 0x05
    41b2:	0c 81       	ldd	r16, Y+4	; 0x04
    41b4:	1b 81       	ldd	r17, Y+3	; 0x03
    41b6:	aa 81       	ldd	r26, Y+2	; 0x02
    41b8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ba:	ce 0f       	add	r28, r30
    41bc:	d1 1d       	adc	r29, r1
    41be:	0f b6       	in	r0, 0x3f	; 63
    41c0:	f8 94       	cli
    41c2:	de bf       	out	0x3e, r29	; 62
    41c4:	0f be       	out	0x3f, r0	; 63
    41c6:	cd bf       	out	0x3d, r28	; 61
    41c8:	ed 01       	movw	r28, r26
    41ca:	08 95       	ret

000041cc <_exit>:
    41cc:	f8 94       	cli

000041ce <__stop_program>:
    41ce:	ff cf       	rjmp	.-2      	; 0x41ce <__stop_program>
