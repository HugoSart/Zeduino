
DigitalThermo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00004d24  00004db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004d24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800154  00800154  00004e0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006645  00000000  00000000  00004f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9e  00000000  00000000  0000b55d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b93  00000000  00000000  0000c0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  0000dc90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b53  00000000  00000000  0000ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008375  00000000  00000000  0000e91b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00016c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e2       	ldi	r30, 0x24	; 36
      7c:	fd e4       	ldi	r31, 0x4D	; 77
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 35       	cpi	r26, 0x54	; 84
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e5       	ldi	r26, 0x54	; 84
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 37       	cpi	r26, 0x70	; 112
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 74 22 	call	0x44e8	; 0x44e8 <main>
      9e:	0c 94 90 26 	jmp	0x4d20	; 0x4d20 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12uart_putcharcP6__file>:
		void log(const char *format, ...) {
			va_list args;
			va_start(args, format);
			printf(format, args);
			va_end(args);
		}
      a6:	cf 93       	push	r28
      a8:	c8 2f       	mov	r28, r24
      aa:	8a 30       	cpi	r24, 0x0A	; 10
      ac:	19 f4       	brne	.+6      	; 0xb4 <_Z12uart_putcharcP6__file+0xe>
      ae:	8d e0       	ldi	r24, 0x0D	; 13
      b0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12uart_putcharcP6__file>
      b4:	e0 ec       	ldi	r30, 0xC0	; 192
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	85 ff       	sbrs	r24, 5
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z12uart_putcharcP6__file+0x12>
      be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	cf 91       	pop	r28
      c8:	08 95       	ret

000000ca <_Z12uart_getcharP6__file>:
      ca:	e0 ec       	ldi	r30, 0xC0	; 192
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	88 23       	and	r24, r24
      d2:	ec f7       	brge	.-6      	; 0xce <_Z12uart_getcharP6__file+0x4>
      d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	08 95       	ret

000000dc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>:
      dc:	61 11       	cpse	r22, r1
      de:	20 c0       	rjmp	.+64     	; 0x120 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x44>
      e0:	88 30       	cpi	r24, 0x08	; 8
      e2:	78 f4       	brcc	.+30     	; 0x102 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x26>
      e4:	4a b1       	in	r20, 0x0a	; 10
      e6:	87 70       	andi	r24, 0x07	; 7
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	b9 01       	movw	r22, r18
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x18>
      f0:	66 0f       	add	r22, r22
      f2:	77 1f       	adc	r23, r23
      f4:	8a 95       	dec	r24
      f6:	e2 f7       	brpl	.-8      	; 0xf0 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x14>
      f8:	cb 01       	movw	r24, r22
      fa:	80 95       	com	r24
      fc:	84 23       	and	r24, r20
      fe:	8a b9       	out	0x0a, r24	; 10
     100:	08 95       	ret
     102:	44 b1       	in	r20, 0x04	; 4
     104:	87 70       	andi	r24, 0x07	; 7
     106:	21 e0       	ldi	r18, 0x01	; 1
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	b9 01       	movw	r22, r18
     10c:	02 c0       	rjmp	.+4      	; 0x112 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x36>
     10e:	66 0f       	add	r22, r22
     110:	77 1f       	adc	r23, r23
     112:	8a 95       	dec	r24
     114:	e2 f7       	brpl	.-8      	; 0x10e <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x32>
     116:	cb 01       	movw	r24, r22
     118:	80 95       	com	r24
     11a:	84 23       	and	r24, r20
     11c:	84 b9       	out	0x04, r24	; 4
     11e:	08 95       	ret
     120:	61 30       	cpi	r22, 0x01	; 1
     122:	e9 f4       	brne	.+58     	; 0x15e <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x82>
     124:	88 30       	cpi	r24, 0x08	; 8
     126:	70 f4       	brcc	.+28     	; 0x144 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x68>
     128:	4a b1       	in	r20, 0x0a	; 10
     12a:	87 70       	andi	r24, 0x07	; 7
     12c:	21 e0       	ldi	r18, 0x01	; 1
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	b9 01       	movw	r22, r18
     132:	02 c0       	rjmp	.+4      	; 0x138 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x5c>
     134:	66 0f       	add	r22, r22
     136:	77 1f       	adc	r23, r23
     138:	8a 95       	dec	r24
     13a:	e2 f7       	brpl	.-8      	; 0x134 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x58>
     13c:	cb 01       	movw	r24, r22
     13e:	84 2b       	or	r24, r20
     140:	8a b9       	out	0x0a, r24	; 10
     142:	08 95       	ret
     144:	44 b1       	in	r20, 0x04	; 4
     146:	87 70       	andi	r24, 0x07	; 7
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	b9 01       	movw	r22, r18
     14e:	02 c0       	rjmp	.+4      	; 0x154 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x78>
     150:	66 0f       	add	r22, r22
     152:	77 1f       	adc	r23, r23
     154:	8a 95       	dec	r24
     156:	e2 f7       	brpl	.-8      	; 0x150 <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE+0x74>
     158:	cb 01       	movw	r24, r22
     15a:	84 2b       	or	r24, r20
     15c:	84 b9       	out	0x04, r24	; 4
     15e:	08 95       	ret

00000160 <_Z9uart_initv>:
     160:	e8 e5       	ldi	r30, 0x58	; 88
     162:	f1 e0       	ldi	r31, 0x01	; 1
     164:	83 e5       	ldi	r24, 0x53	; 83
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	91 87       	std	Z+9, r25	; 0x09
     16a:	80 87       	std	Z+8, r24	; 0x08
     16c:	85 e6       	ldi	r24, 0x65	; 101
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	93 87       	std	Z+11, r25	; 0x0b
     172:	82 87       	std	Z+10, r24	; 0x0a
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	83 83       	std	Z+3, r24	; 0x03
     178:	15 86       	std	Z+13, r1	; 0x0d
     17a:	14 86       	std	Z+12, r1	; 0x0c
     17c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     180:	87 e6       	ldi	r24, 0x67	; 103
     182:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     186:	a0 ec       	ldi	r26, 0xC0	; 192
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	8c 91       	ld	r24, X
     18c:	8d 7f       	andi	r24, 0xFD	; 253
     18e:	8c 93       	st	X, r24
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     196:	88 e1       	ldi	r24, 0x18	; 24
     198:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     19c:	aa e6       	ldi	r26, 0x6A	; 106
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	13 96       	adiw	r26, 0x03	; 3
     1a2:	fc 93       	st	X, r31
     1a4:	ee 93       	st	-X, r30
     1a6:	12 97       	sbiw	r26, 0x02	; 2
     1a8:	ed 93       	st	X+, r30
     1aa:	fc 93       	st	X, r31
     1ac:	08 95       	ret

000001ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>:
				SendCommand(0x01);
				util::delay_ms_static(2);
				SendCommand(0x80);
			}
			
			private: void SendCommand(byte cmd) {
     1ae:	fc 01       	movw	r30, r24
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     1b0:	82 81       	ldd	r24, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     1b2:	64 ff       	sbrs	r22, 4
     1b4:	1e c0       	rjmp	.+60     	; 0x1f2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x44>
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	70 f4       	brcc	.+28     	; 0x1d6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x28>
     1ba:	4b b1       	in	r20, 0x0b	; 11
     1bc:	87 70       	andi	r24, 0x07	; 7
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	d9 01       	movw	r26, r18
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1c>
     1c6:	aa 0f       	add	r26, r26
     1c8:	bb 1f       	adc	r27, r27
     1ca:	8a 95       	dec	r24
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x18>
     1ce:	cd 01       	movw	r24, r26
     1d0:	84 2b       	or	r24, r20
     1d2:	8b b9       	out	0x0b, r24	; 11
     1d4:	2d c0       	rjmp	.+90     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
     1d6:	45 b1       	in	r20, 0x05	; 5
     1d8:	87 70       	andi	r24, 0x07	; 7
     1da:	21 e0       	ldi	r18, 0x01	; 1
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	d9 01       	movw	r26, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x38>
     1e2:	aa 0f       	add	r26, r26
     1e4:	bb 1f       	adc	r27, r27
     1e6:	8a 95       	dec	r24
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x34>
     1ea:	cd 01       	movw	r24, r26
     1ec:	84 2b       	or	r24, r20
     1ee:	85 b9       	out	0x05, r24	; 5
     1f0:	1f c0       	rjmp	.+62     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     1f2:	88 30       	cpi	r24, 0x08	; 8
     1f4:	78 f4       	brcc	.+30     	; 0x214 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x66>
     1f6:	4b b1       	in	r20, 0x0b	; 11
     1f8:	87 70       	andi	r24, 0x07	; 7
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	d9 01       	movw	r26, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x58>
     202:	aa 0f       	add	r26, r26
     204:	bb 1f       	adc	r27, r27
     206:	8a 95       	dec	r24
     208:	e2 f7       	brpl	.-8      	; 0x202 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x54>
     20a:	cd 01       	movw	r24, r26
     20c:	80 95       	com	r24
     20e:	84 23       	and	r24, r20
     210:	8b b9       	out	0x0b, r24	; 11
     212:	0e c0       	rjmp	.+28     	; 0x230 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x82>
     214:	45 b1       	in	r20, 0x05	; 5
     216:	87 70       	andi	r24, 0x07	; 7
     218:	21 e0       	ldi	r18, 0x01	; 1
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	d9 01       	movw	r26, r18
     21e:	02 c0       	rjmp	.+4      	; 0x224 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x76>
     220:	aa 0f       	add	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	8a 95       	dec	r24
     226:	e2 f7       	brpl	.-8      	; 0x220 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x72>
     228:	cd 01       	movw	r24, r26
     22a:	80 95       	com	r24
     22c:	84 23       	and	r24, r20
     22e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     230:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     232:	65 ff       	sbrs	r22, 5
     234:	1e c0       	rjmp	.+60     	; 0x272 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xc4>
     236:	88 30       	cpi	r24, 0x08	; 8
     238:	70 f4       	brcc	.+28     	; 0x256 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xa8>
     23a:	4b b1       	in	r20, 0x0b	; 11
     23c:	87 70       	andi	r24, 0x07	; 7
     23e:	21 e0       	ldi	r18, 0x01	; 1
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	d9 01       	movw	r26, r18
     244:	02 c0       	rjmp	.+4      	; 0x24a <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x9c>
     246:	aa 0f       	add	r26, r26
     248:	bb 1f       	adc	r27, r27
     24a:	8a 95       	dec	r24
     24c:	e2 f7       	brpl	.-8      	; 0x246 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x98>
     24e:	cd 01       	movw	r24, r26
     250:	84 2b       	or	r24, r20
     252:	8b b9       	out	0x0b, r24	; 11
     254:	2d c0       	rjmp	.+90     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
     256:	45 b1       	in	r20, 0x05	; 5
     258:	87 70       	andi	r24, 0x07	; 7
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	d9 01       	movw	r26, r18
     260:	02 c0       	rjmp	.+4      	; 0x266 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xb8>
     262:	aa 0f       	add	r26, r26
     264:	bb 1f       	adc	r27, r27
     266:	8a 95       	dec	r24
     268:	e2 f7       	brpl	.-8      	; 0x262 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xb4>
     26a:	cd 01       	movw	r24, r26
     26c:	84 2b       	or	r24, r20
     26e:	85 b9       	out	0x05, r24	; 5
     270:	1f c0       	rjmp	.+62     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     272:	88 30       	cpi	r24, 0x08	; 8
     274:	78 f4       	brcc	.+30     	; 0x294 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xe6>
     276:	4b b1       	in	r20, 0x0b	; 11
     278:	87 70       	andi	r24, 0x07	; 7
     27a:	21 e0       	ldi	r18, 0x01	; 1
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	d9 01       	movw	r26, r18
     280:	02 c0       	rjmp	.+4      	; 0x286 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xd8>
     282:	aa 0f       	add	r26, r26
     284:	bb 1f       	adc	r27, r27
     286:	8a 95       	dec	r24
     288:	e2 f7       	brpl	.-8      	; 0x282 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xd4>
     28a:	cd 01       	movw	r24, r26
     28c:	80 95       	com	r24
     28e:	84 23       	and	r24, r20
     290:	8b b9       	out	0x0b, r24	; 11
     292:	0e c0       	rjmp	.+28     	; 0x2b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x102>
     294:	45 b1       	in	r20, 0x05	; 5
     296:	87 70       	andi	r24, 0x07	; 7
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	d9 01       	movw	r26, r18
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xf6>
     2a0:	aa 0f       	add	r26, r26
     2a2:	bb 1f       	adc	r27, r27
     2a4:	8a 95       	dec	r24
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0xf2>
     2a8:	cd 01       	movw	r24, r26
     2aa:	80 95       	com	r24
     2ac:	84 23       	and	r24, r20
     2ae:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     2b0:	84 81       	ldd	r24, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     2b2:	66 ff       	sbrs	r22, 6
     2b4:	1e c0       	rjmp	.+60     	; 0x2f2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x144>
     2b6:	88 30       	cpi	r24, 0x08	; 8
     2b8:	70 f4       	brcc	.+28     	; 0x2d6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x128>
     2ba:	4b b1       	in	r20, 0x0b	; 11
     2bc:	87 70       	andi	r24, 0x07	; 7
     2be:	21 e0       	ldi	r18, 0x01	; 1
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	d9 01       	movw	r26, r18
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x11c>
     2c6:	aa 0f       	add	r26, r26
     2c8:	bb 1f       	adc	r27, r27
     2ca:	8a 95       	dec	r24
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x118>
     2ce:	cd 01       	movw	r24, r26
     2d0:	84 2b       	or	r24, r20
     2d2:	8b b9       	out	0x0b, r24	; 11
     2d4:	2d c0       	rjmp	.+90     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
     2d6:	45 b1       	in	r20, 0x05	; 5
     2d8:	87 70       	andi	r24, 0x07	; 7
     2da:	21 e0       	ldi	r18, 0x01	; 1
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	d9 01       	movw	r26, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x138>
     2e2:	aa 0f       	add	r26, r26
     2e4:	bb 1f       	adc	r27, r27
     2e6:	8a 95       	dec	r24
     2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x134>
     2ea:	cd 01       	movw	r24, r26
     2ec:	84 2b       	or	r24, r20
     2ee:	85 b9       	out	0x05, r24	; 5
     2f0:	1f c0       	rjmp	.+62     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     2f2:	88 30       	cpi	r24, 0x08	; 8
     2f4:	78 f4       	brcc	.+30     	; 0x314 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x166>
     2f6:	4b b1       	in	r20, 0x0b	; 11
     2f8:	87 70       	andi	r24, 0x07	; 7
     2fa:	21 e0       	ldi	r18, 0x01	; 1
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	d9 01       	movw	r26, r18
     300:	02 c0       	rjmp	.+4      	; 0x306 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x158>
     302:	aa 0f       	add	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	8a 95       	dec	r24
     308:	e2 f7       	brpl	.-8      	; 0x302 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x154>
     30a:	cd 01       	movw	r24, r26
     30c:	80 95       	com	r24
     30e:	84 23       	and	r24, r20
     310:	8b b9       	out	0x0b, r24	; 11
     312:	0e c0       	rjmp	.+28     	; 0x330 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x182>
     314:	45 b1       	in	r20, 0x05	; 5
     316:	87 70       	andi	r24, 0x07	; 7
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	d9 01       	movw	r26, r18
     31e:	02 c0       	rjmp	.+4      	; 0x324 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x176>
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	8a 95       	dec	r24
     326:	e2 f7       	brpl	.-8      	; 0x320 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x172>
     328:	cd 01       	movw	r24, r26
     32a:	80 95       	com	r24
     32c:	84 23       	and	r24, r20
     32e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     330:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     332:	66 23       	and	r22, r22
     334:	f4 f4       	brge	.+60     	; 0x372 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1c4>
     336:	88 30       	cpi	r24, 0x08	; 8
     338:	70 f4       	brcc	.+28     	; 0x356 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1a8>
     33a:	4b b1       	in	r20, 0x0b	; 11
     33c:	87 70       	andi	r24, 0x07	; 7
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	d9 01       	movw	r26, r18
     344:	02 c0       	rjmp	.+4      	; 0x34a <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x19c>
     346:	aa 0f       	add	r26, r26
     348:	bb 1f       	adc	r27, r27
     34a:	8a 95       	dec	r24
     34c:	e2 f7       	brpl	.-8      	; 0x346 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x198>
     34e:	cd 01       	movw	r24, r26
     350:	84 2b       	or	r24, r20
     352:	8b b9       	out	0x0b, r24	; 11
     354:	2d c0       	rjmp	.+90     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
     356:	45 b1       	in	r20, 0x05	; 5
     358:	87 70       	andi	r24, 0x07	; 7
     35a:	21 e0       	ldi	r18, 0x01	; 1
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	d9 01       	movw	r26, r18
     360:	02 c0       	rjmp	.+4      	; 0x366 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1b8>
     362:	aa 0f       	add	r26, r26
     364:	bb 1f       	adc	r27, r27
     366:	8a 95       	dec	r24
     368:	e2 f7       	brpl	.-8      	; 0x362 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1b4>
     36a:	cd 01       	movw	r24, r26
     36c:	84 2b       	or	r24, r20
     36e:	85 b9       	out	0x05, r24	; 5
     370:	1f c0       	rjmp	.+62     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     372:	88 30       	cpi	r24, 0x08	; 8
     374:	78 f4       	brcc	.+30     	; 0x394 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1e6>
     376:	4b b1       	in	r20, 0x0b	; 11
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	21 e0       	ldi	r18, 0x01	; 1
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	d9 01       	movw	r26, r18
     380:	02 c0       	rjmp	.+4      	; 0x386 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1d8>
     382:	aa 0f       	add	r26, r26
     384:	bb 1f       	adc	r27, r27
     386:	8a 95       	dec	r24
     388:	e2 f7       	brpl	.-8      	; 0x382 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1d4>
     38a:	cd 01       	movw	r24, r26
     38c:	80 95       	com	r24
     38e:	84 23       	and	r24, r20
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x202>
     394:	45 b1       	in	r20, 0x05	; 5
     396:	87 70       	andi	r24, 0x07	; 7
     398:	21 e0       	ldi	r18, 0x01	; 1
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	d9 01       	movw	r26, r18
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1f6>
     3a0:	aa 0f       	add	r26, r26
     3a2:	bb 1f       	adc	r27, r27
     3a4:	8a 95       	dec	r24
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x1f2>
     3a8:	cd 01       	movw	r24, r26
     3aa:	80 95       	com	r24
     3ac:	84 23       	and	r24, r20
     3ae:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     3b0:	80 81       	ld	r24, Z
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	78 f4       	brcc	.+30     	; 0x3d4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x226>
     3b6:	4b b1       	in	r20, 0x0b	; 11
     3b8:	87 70       	andi	r24, 0x07	; 7
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	d9 01       	movw	r26, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x218>
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	8a 95       	dec	r24
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x214>
     3ca:	cd 01       	movw	r24, r26
     3cc:	80 95       	com	r24
     3ce:	84 23       	and	r24, r20
     3d0:	8b b9       	out	0x0b, r24	; 11
     3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x242>
     3d4:	45 b1       	in	r20, 0x05	; 5
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	d9 01       	movw	r26, r18
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x236>
     3e0:	aa 0f       	add	r26, r26
     3e2:	bb 1f       	adc	r27, r27
     3e4:	8a 95       	dec	r24
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <_ZN7zeduino9component10DisplayLCD11SendCommandEh+0x232>
     3e8:	cd 01       	movw	r24, r26
     3ea:	80 95       	com	r24
     3ec:	84 23       	and	r24, r20
     3ee:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     3f0:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     3f2:	88 30       	cpi	r24, 0x08	; 8
     3f4:	70 f4       	brcc	.+28     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3f6:	4b b1       	in	r20, 0x0b	; 11
     3f8:	87 70       	andi	r24, 0x07	; 7
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	d9 01       	movw	r26, r18
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	aa 0f       	add	r26, r26
     404:	bb 1f       	adc	r27, r27
     406:	8a 95       	dec	r24
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	cd 01       	movw	r24, r26
     40c:	84 2b       	or	r24, r20
     40e:	8b b9       	out	0x0b, r24	; 11
     410:	0d c0       	rjmp	.+26     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     412:	45 b1       	in	r20, 0x05	; 5
     414:	87 70       	andi	r24, 0x07	; 7
     416:	21 e0       	ldi	r18, 0x01	; 1
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	d9 01       	movw	r26, r18
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	aa 0f       	add	r26, r26
     420:	bb 1f       	adc	r27, r27
     422:	8a 95       	dec	r24
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	cd 01       	movw	r24, r26
     428:	84 2b       	or	r24, r20
     42a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	b5 e0       	ldi	r27, 0x05	; 5
     42e:	ba 95       	dec	r27
     430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     432:	00 00       	nop
     434:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
     436:	88 30       	cpi	r24, 0x08	; 8
     438:	78 f4       	brcc	.+30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     43a:	4b b1       	in	r20, 0x0b	; 11
     43c:	87 70       	andi	r24, 0x07	; 7
     43e:	21 e0       	ldi	r18, 0x01	; 1
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	d9 01       	movw	r26, r18
     444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     446:	aa 0f       	add	r26, r26
     448:	bb 1f       	adc	r27, r27
     44a:	8a 95       	dec	r24
     44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     44e:	cd 01       	movw	r24, r26
     450:	80 95       	com	r24
     452:	84 23       	and	r24, r20
     454:	8b b9       	out	0x0b, r24	; 11
     456:	0e c0       	rjmp	.+28     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     458:	45 b1       	in	r20, 0x05	; 5
     45a:	87 70       	andi	r24, 0x07	; 7
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	d9 01       	movw	r26, r18
     462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     464:	aa 0f       	add	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	8a 95       	dec	r24
     46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     46c:	cd 01       	movw	r24, r26
     46e:	80 95       	com	r24
     470:	84 23       	and	r24, r20
     472:	85 b9       	out	0x05, r24	; 5
     474:	8f e1       	ldi	r24, 0x1F	; 31
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     47e:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     480:	82 81       	ldd	r24, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     482:	60 ff       	sbrs	r22, 0
     484:	1e c0       	rjmp	.+60     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     486:	88 30       	cpi	r24, 0x08	; 8
     488:	70 f4       	brcc	.+28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     48a:	4b b1       	in	r20, 0x0b	; 11
     48c:	87 70       	andi	r24, 0x07	; 7
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	d9 01       	movw	r26, r18
     494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     496:	aa 0f       	add	r26, r26
     498:	bb 1f       	adc	r27, r27
     49a:	8a 95       	dec	r24
     49c:	e2 f7       	brpl	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     49e:	cd 01       	movw	r24, r26
     4a0:	84 2b       	or	r24, r20
     4a2:	8b b9       	out	0x0b, r24	; 11
     4a4:	2d c0       	rjmp	.+90     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4a6:	45 b1       	in	r20, 0x05	; 5
     4a8:	87 70       	andi	r24, 0x07	; 7
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	d9 01       	movw	r26, r18
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	aa 0f       	add	r26, r26
     4b4:	bb 1f       	adc	r27, r27
     4b6:	8a 95       	dec	r24
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	cd 01       	movw	r24, r26
     4bc:	84 2b       	or	r24, r20
     4be:	85 b9       	out	0x05, r24	; 5
     4c0:	1f c0       	rjmp	.+62     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     4c2:	88 30       	cpi	r24, 0x08	; 8
     4c4:	78 f4       	brcc	.+30     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4c6:	4b b1       	in	r20, 0x0b	; 11
     4c8:	87 70       	andi	r24, 0x07	; 7
     4ca:	21 e0       	ldi	r18, 0x01	; 1
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	d9 01       	movw	r26, r18
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d2:	aa 0f       	add	r26, r26
     4d4:	bb 1f       	adc	r27, r27
     4d6:	8a 95       	dec	r24
     4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4da:	cd 01       	movw	r24, r26
     4dc:	80 95       	com	r24
     4de:	84 23       	and	r24, r20
     4e0:	8b b9       	out	0x0b, r24	; 11
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4e4:	45 b1       	in	r20, 0x05	; 5
     4e6:	87 70       	andi	r24, 0x07	; 7
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	d9 01       	movw	r26, r18
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f0:	aa 0f       	add	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	8a 95       	dec	r24
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f8:	cd 01       	movw	r24, r26
     4fa:	80 95       	com	r24
     4fc:	84 23       	and	r24, r20
     4fe:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     500:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     502:	61 ff       	sbrs	r22, 1
     504:	1e c0       	rjmp	.+60     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     506:	88 30       	cpi	r24, 0x08	; 8
     508:	70 f4       	brcc	.+28     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     50a:	4b b1       	in	r20, 0x0b	; 11
     50c:	87 70       	andi	r24, 0x07	; 7
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	d9 01       	movw	r26, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     516:	aa 0f       	add	r26, r26
     518:	bb 1f       	adc	r27, r27
     51a:	8a 95       	dec	r24
     51c:	e2 f7       	brpl	.-8      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     51e:	cd 01       	movw	r24, r26
     520:	84 2b       	or	r24, r20
     522:	8b b9       	out	0x0b, r24	; 11
     524:	2d c0       	rjmp	.+90     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     526:	45 b1       	in	r20, 0x05	; 5
     528:	87 70       	andi	r24, 0x07	; 7
     52a:	21 e0       	ldi	r18, 0x01	; 1
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	d9 01       	movw	r26, r18
     530:	02 c0       	rjmp	.+4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     532:	aa 0f       	add	r26, r26
     534:	bb 1f       	adc	r27, r27
     536:	8a 95       	dec	r24
     538:	e2 f7       	brpl	.-8      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     53a:	cd 01       	movw	r24, r26
     53c:	84 2b       	or	r24, r20
     53e:	85 b9       	out	0x05, r24	; 5
     540:	1f c0       	rjmp	.+62     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     542:	88 30       	cpi	r24, 0x08	; 8
     544:	78 f4       	brcc	.+30     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     546:	4b b1       	in	r20, 0x0b	; 11
     548:	87 70       	andi	r24, 0x07	; 7
     54a:	21 e0       	ldi	r18, 0x01	; 1
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	d9 01       	movw	r26, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	aa 0f       	add	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	8a 95       	dec	r24
     558:	e2 f7       	brpl	.-8      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55a:	cd 01       	movw	r24, r26
     55c:	80 95       	com	r24
     55e:	84 23       	and	r24, r20
     560:	8b b9       	out	0x0b, r24	; 11
     562:	0e c0       	rjmp	.+28     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     564:	45 b1       	in	r20, 0x05	; 5
     566:	87 70       	andi	r24, 0x07	; 7
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	d9 01       	movw	r26, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     570:	aa 0f       	add	r26, r26
     572:	bb 1f       	adc	r27, r27
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     578:	cd 01       	movw	r24, r26
     57a:	80 95       	com	r24
     57c:	84 23       	and	r24, r20
     57e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     580:	84 81       	ldd	r24, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     582:	62 ff       	sbrs	r22, 2
     584:	1e c0       	rjmp	.+60     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	70 f4       	brcc	.+28     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     58a:	4b b1       	in	r20, 0x0b	; 11
     58c:	87 70       	andi	r24, 0x07	; 7
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	d9 01       	movw	r26, r18
     594:	02 c0       	rjmp	.+4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     596:	aa 0f       	add	r26, r26
     598:	bb 1f       	adc	r27, r27
     59a:	8a 95       	dec	r24
     59c:	e2 f7       	brpl	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59e:	cd 01       	movw	r24, r26
     5a0:	84 2b       	or	r24, r20
     5a2:	8b b9       	out	0x0b, r24	; 11
     5a4:	2d c0       	rjmp	.+90     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5a6:	45 b1       	in	r20, 0x05	; 5
     5a8:	87 70       	andi	r24, 0x07	; 7
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	d9 01       	movw	r26, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b2:	aa 0f       	add	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	8a 95       	dec	r24
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
     5ba:	cd 01       	movw	r24, r26
     5bc:	84 2b       	or	r24, r20
     5be:	85 b9       	out	0x05, r24	; 5
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     5c2:	88 30       	cpi	r24, 0x08	; 8
     5c4:	78 f4       	brcc	.+30     	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5c6:	4b b1       	in	r20, 0x0b	; 11
     5c8:	87 70       	andi	r24, 0x07	; 7
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	d9 01       	movw	r26, r18
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d2:	aa 0f       	add	r26, r26
     5d4:	bb 1f       	adc	r27, r27
     5d6:	8a 95       	dec	r24
     5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5da:	cd 01       	movw	r24, r26
     5dc:	80 95       	com	r24
     5de:	84 23       	and	r24, r20
     5e0:	8b b9       	out	0x0b, r24	; 11
     5e2:	0e c0       	rjmp	.+28     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5e4:	45 b1       	in	r20, 0x05	; 5
     5e6:	87 70       	andi	r24, 0x07	; 7
     5e8:	21 e0       	ldi	r18, 0x01	; 1
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	d9 01       	movw	r26, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5f0:	aa 0f       	add	r26, r26
     5f2:	bb 1f       	adc	r27, r27
     5f4:	8a 95       	dec	r24
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5f8:	cd 01       	movw	r24, r26
     5fa:	80 95       	com	r24
     5fc:	84 23       	and	r24, r20
     5fe:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     600:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     602:	63 ff       	sbrs	r22, 3
     604:	1e c0       	rjmp	.+60     	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     606:	88 30       	cpi	r24, 0x08	; 8
     608:	70 f4       	brcc	.+28     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     60a:	4b b1       	in	r20, 0x0b	; 11
     60c:	87 70       	andi	r24, 0x07	; 7
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	b9 01       	movw	r22, r18
     614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     616:	66 0f       	add	r22, r22
     618:	77 1f       	adc	r23, r23
     61a:	8a 95       	dec	r24
     61c:	e2 f7       	brpl	.-8      	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     61e:	cb 01       	movw	r24, r22
     620:	84 2b       	or	r24, r20
     622:	8b b9       	out	0x0b, r24	; 11
     624:	2d c0       	rjmp	.+90     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     626:	45 b1       	in	r20, 0x05	; 5
     628:	87 70       	andi	r24, 0x07	; 7
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	d9 01       	movw	r26, r18
     630:	02 c0       	rjmp	.+4      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     632:	aa 0f       	add	r26, r26
     634:	bb 1f       	adc	r27, r27
     636:	8a 95       	dec	r24
     638:	e2 f7       	brpl	.-8      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     63a:	cd 01       	movw	r24, r26
     63c:	84 2b       	or	r24, r20
     63e:	85 b9       	out	0x05, r24	; 5
     640:	1f c0       	rjmp	.+62     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			else _CLEAR_BIT(fcrof(port), nmr(port));
     642:	88 30       	cpi	r24, 0x08	; 8
     644:	78 f4       	brcc	.+30     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
     646:	4b b1       	in	r20, 0x0b	; 11
     648:	87 70       	andi	r24, 0x07	; 7
     64a:	21 e0       	ldi	r18, 0x01	; 1
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	b9 01       	movw	r22, r18
     650:	02 c0       	rjmp	.+4      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     652:	66 0f       	add	r22, r22
     654:	77 1f       	adc	r23, r23
     656:	8a 95       	dec	r24
     658:	e2 f7       	brpl	.-8      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     65a:	cb 01       	movw	r24, r22
     65c:	80 95       	com	r24
     65e:	84 23       	and	r24, r20
     660:	8b b9       	out	0x0b, r24	; 11
     662:	0e c0       	rjmp	.+28     	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     664:	45 b1       	in	r20, 0x05	; 5
     666:	87 70       	andi	r24, 0x07	; 7
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	d9 01       	movw	r26, r18
     66e:	02 c0       	rjmp	.+4      	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     670:	aa 0f       	add	r26, r26
     672:	bb 1f       	adc	r27, r27
     674:	8a 95       	dec	r24
     676:	e2 f7       	brpl	.-8      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
     678:	cd 01       	movw	r24, r26
     67a:	80 95       	com	r24
     67c:	84 23       	and	r24, r20
     67e:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     680:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	70 f4       	brcc	.+28     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     686:	4b b1       	in	r20, 0x0b	; 11
     688:	87 70       	andi	r24, 0x07	; 7
     68a:	21 e0       	ldi	r18, 0x01	; 1
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	b9 01       	movw	r22, r18
     690:	02 c0       	rjmp	.+4      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     692:	66 0f       	add	r22, r22
     694:	77 1f       	adc	r23, r23
     696:	8a 95       	dec	r24
     698:	e2 f7       	brpl	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     69a:	cb 01       	movw	r24, r22
     69c:	84 2b       	or	r24, r20
     69e:	8b b9       	out	0x0b, r24	; 11
     6a0:	0d c0       	rjmp	.+26     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6a2:	45 b1       	in	r20, 0x05	; 5
     6a4:	87 70       	andi	r24, 0x07	; 7
     6a6:	21 e0       	ldi	r18, 0x01	; 1
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	d9 01       	movw	r26, r18
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     6ae:	aa 0f       	add	r26, r26
     6b0:	bb 1f       	adc	r27, r27
     6b2:	8a 95       	dec	r24
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
     6b6:	cd 01       	movw	r24, r26
     6b8:	84 2b       	or	r24, r20
     6ba:	85 b9       	out	0x05, r24	; 5
     6bc:	b5 e0       	ldi	r27, 0x05	; 5
     6be:	ba 95       	dec	r27
     6c0:	f1 f7       	brne	.-4      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6c2:	00 00       	nop
     6c4:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	78 f4       	brcc	.+30     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     6ca:	4b b1       	in	r20, 0x0b	; 11
     6cc:	87 70       	andi	r24, 0x07	; 7
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <__LOCK_REGION_LENGTH__+0x2d6>
     6de:	cb 01       	movw	r24, r22
     6e0:	80 95       	com	r24
     6e2:	84 23       	and	r24, r20
     6e4:	8b b9       	out	0x0b, r24	; 11
     6e6:	0e c0       	rjmp	.+28     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     6e8:	45 b1       	in	r20, 0x05	; 5
     6ea:	87 70       	andi	r24, 0x07	; 7
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	d9 01       	movw	r26, r18
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
     6f4:	aa 0f       	add	r26, r26
     6f6:	bb 1f       	adc	r27, r27
     6f8:	8a 95       	dec	r24
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6fc:	cd 01       	movw	r24, r26
     6fe:	80 95       	com	r24
     700:	84 23       	and	r24, r20
     702:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     704:	8f e3       	ldi	r24, 0x3F	; 63
     706:	9f e1       	ldi	r25, 0x1F	; 31
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
     70e:	00 00       	nop
     710:	08 95       	ret

00000712 <_Z5setupv>:
using namespace zeduino;

component::DisplayLCD *lcd;
component::DHT11 *dht11;

void setup() {
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	ac 97       	sbiw	r28, 0x2c	; 44
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
	
	EPort ports[] = {P5, P4, P3, P2};
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	89 83       	std	Y+1, r24	; 0x01
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	8a 83       	std	Y+2, r24	; 0x02
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	8b 83       	std	Y+3, r24	; 0x03
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	8c 83       	std	Y+4, r24	; 0x04
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int32_t int32;

void * operator new(size_t size) {
	return malloc(size);	
     746:	86 e0       	ldi	r24, 0x06	; 6
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 85 22 	call	0x450a	; 0x450a <malloc>
     74e:	8c 01       	movw	r16, r24
			
			private: enum EOperationMode {COMMAND = 0, DATA = 1};
			
			private: EPort _pMode, _pPulse, _ports[4];
			
			public: DisplayLCD(EPort mode, EPort pulse, EPort ports[]) : _pMode(mode), _pPulse(pulse) {
     750:	8c e0       	ldi	r24, 0x0C	; 12
     752:	d8 01       	movw	r26, r16
     754:	8c 93       	st	X, r24
     756:	8b e0       	ldi	r24, 0x0B	; 11
     758:	11 96       	adiw	r26, 0x01	; 1
     75a:	8c 93       	st	X, r24
     75c:	fe 01       	movw	r30, r28
     75e:	31 96       	adiw	r30, 0x01	; 1
     760:	7f 01       	movw	r14, r30
     762:	68 01       	movw	r12, r16
     764:	f2 e0       	ldi	r31, 0x02	; 2
     766:	cf 0e       	add	r12, r31
     768:	d1 1c       	adc	r13, r1
     76a:	5e 01       	movw	r10, r28
     76c:	25 e0       	ldi	r18, 0x05	; 5
     76e:	a2 0e       	add	r10, r18
     770:	b1 1c       	adc	r11, r1
				for (int i = 0 ; i < 4; i++) {
					_ports[i] = ports[i];
     772:	d7 01       	movw	r26, r14
     774:	8d 91       	ld	r24, X+
     776:	7d 01       	movw	r14, r26
     778:	f6 01       	movw	r30, r12
     77a:	81 93       	st	Z+, r24
     77c:	6f 01       	movw	r12, r30
					port::mode(_ports[i], OUTPUT);
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
			private: enum EOperationMode {COMMAND = 0, DATA = 1};
			
			private: EPort _pMode, _pPulse, _ports[4];
			
			public: DisplayLCD(EPort mode, EPort pulse, EPort ports[]) : _pMode(mode), _pPulse(pulse) {
				for (int i = 0 ; i < 4; i++) {
     784:	ea 14       	cp	r14, r10
     786:	fb 04       	cpc	r15, r11
     788:	a1 f7       	brne	.-24     	; 0x772 <_Z5setupv+0x60>
					_ports[i] = ports[i];
					port::mode(_ports[i], OUTPUT);
				}
				port::mode(_pMode, OUTPUT);
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	d8 01       	movw	r26, r16
     78e:	8c 91       	ld	r24, X
     790:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				port::mode(_pPulse, OUTPUT);
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	f8 01       	movw	r30, r16
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
     79e:	ff ef       	ldi	r31, 0xFF	; 255
     7a0:	29 ef       	ldi	r18, 0xF9	; 249
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f1 50       	subi	r31, 0x01	; 1
     7a6:	20 40       	sbci	r18, 0x00	; 0
     7a8:	30 40       	sbci	r19, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <_Z5setupv+0x92>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <_Z5setupv+0x9c>
     7ae:	00 00       	nop
				
				util::delay_ms_static(20);
				SendCommand(0x33);
     7b0:	63 e3       	ldi	r22, 0x33	; 51
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     7b8:	d8 01       	movw	r26, r16
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     7be:	88 30       	cpi	r24, 0x08	; 8
     7c0:	70 f4       	brcc	.+28     	; 0x7de <_Z5setupv+0xcc>
     7c2:	4b b1       	in	r20, 0x0b	; 11
     7c4:	87 70       	andi	r24, 0x07	; 7
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	f9 01       	movw	r30, r18
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <_Z5setupv+0xc0>
     7ce:	ee 0f       	add	r30, r30
     7d0:	ff 1f       	adc	r31, r31
     7d2:	8a 95       	dec	r24
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <_Z5setupv+0xbc>
     7d6:	cf 01       	movw	r24, r30
     7d8:	84 2b       	or	r24, r20
     7da:	8b b9       	out	0x0b, r24	; 11
     7dc:	0d c0       	rjmp	.+26     	; 0x7f8 <_Z5setupv+0xe6>
     7de:	45 b1       	in	r20, 0x05	; 5
     7e0:	87 70       	andi	r24, 0x07	; 7
     7e2:	21 e0       	ldi	r18, 0x01	; 1
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	b9 01       	movw	r22, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <_Z5setupv+0xdc>
     7ea:	66 0f       	add	r22, r22
     7ec:	77 1f       	adc	r23, r23
     7ee:	8a 95       	dec	r24
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <_Z5setupv+0xd8>
     7f2:	cb 01       	movw	r24, r22
     7f4:	84 2b       	or	r24, r20
     7f6:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     7f8:	d8 01       	movw	r26, r16
     7fa:	13 96       	adiw	r26, 0x03	; 3
     7fc:	8c 91       	ld	r24, X
     7fe:	88 30       	cpi	r24, 0x08	; 8
     800:	70 f4       	brcc	.+28     	; 0x81e <_Z5setupv+0x10c>
     802:	4b b1       	in	r20, 0x0b	; 11
     804:	87 70       	andi	r24, 0x07	; 7
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	02 c0       	rjmp	.+4      	; 0x812 <_Z5setupv+0x100>
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	8a 95       	dec	r24
     814:	e2 f7       	brpl	.-8      	; 0x80e <_Z5setupv+0xfc>
     816:	cf 01       	movw	r24, r30
     818:	84 2b       	or	r24, r20
     81a:	8b b9       	out	0x0b, r24	; 11
     81c:	0d c0       	rjmp	.+26     	; 0x838 <_Z5setupv+0x126>
     81e:	45 b1       	in	r20, 0x05	; 5
     820:	87 70       	andi	r24, 0x07	; 7
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	b9 01       	movw	r22, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <_Z5setupv+0x11c>
     82a:	66 0f       	add	r22, r22
     82c:	77 1f       	adc	r23, r23
     82e:	8a 95       	dec	r24
     830:	e2 f7       	brpl	.-8      	; 0x82a <_Z5setupv+0x118>
     832:	cb 01       	movw	r24, r22
     834:	84 2b       	or	r24, r20
     836:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     838:	d8 01       	movw	r26, r16
     83a:	14 96       	adiw	r26, 0x04	; 4
     83c:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     83e:	88 30       	cpi	r24, 0x08	; 8
     840:	78 f4       	brcc	.+30     	; 0x860 <_Z5setupv+0x14e>
     842:	4b b1       	in	r20, 0x0b	; 11
     844:	87 70       	andi	r24, 0x07	; 7
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	02 c0       	rjmp	.+4      	; 0x852 <_Z5setupv+0x140>
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	8a 95       	dec	r24
     854:	e2 f7       	brpl	.-8      	; 0x84e <_Z5setupv+0x13c>
     856:	cf 01       	movw	r24, r30
     858:	80 95       	com	r24
     85a:	84 23       	and	r24, r20
     85c:	8b b9       	out	0x0b, r24	; 11
     85e:	0e c0       	rjmp	.+28     	; 0x87c <_Z5setupv+0x16a>
     860:	45 b1       	in	r20, 0x05	; 5
     862:	87 70       	andi	r24, 0x07	; 7
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	b9 01       	movw	r22, r18
     86a:	02 c0       	rjmp	.+4      	; 0x870 <_Z5setupv+0x15e>
     86c:	66 0f       	add	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	8a 95       	dec	r24
     872:	e2 f7       	brpl	.-8      	; 0x86c <_Z5setupv+0x15a>
     874:	cb 01       	movw	r24, r22
     876:	80 95       	com	r24
     878:	84 23       	and	r24, r20
     87a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     87c:	d8 01       	movw	r26, r16
     87e:	15 96       	adiw	r26, 0x05	; 5
     880:	8c 91       	ld	r24, X
     882:	88 30       	cpi	r24, 0x08	; 8
     884:	78 f4       	brcc	.+30     	; 0x8a4 <_Z5setupv+0x192>
     886:	4b b1       	in	r20, 0x0b	; 11
     888:	87 70       	andi	r24, 0x07	; 7
     88a:	21 e0       	ldi	r18, 0x01	; 1
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	f9 01       	movw	r30, r18
     890:	02 c0       	rjmp	.+4      	; 0x896 <_Z5setupv+0x184>
     892:	ee 0f       	add	r30, r30
     894:	ff 1f       	adc	r31, r31
     896:	8a 95       	dec	r24
     898:	e2 f7       	brpl	.-8      	; 0x892 <_Z5setupv+0x180>
     89a:	cf 01       	movw	r24, r30
     89c:	80 95       	com	r24
     89e:	84 23       	and	r24, r20
     8a0:	8b b9       	out	0x0b, r24	; 11
     8a2:	0e c0       	rjmp	.+28     	; 0x8c0 <_Z5setupv+0x1ae>
     8a4:	45 b1       	in	r20, 0x05	; 5
     8a6:	87 70       	andi	r24, 0x07	; 7
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	b9 01       	movw	r22, r18
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <_Z5setupv+0x1a2>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	8a 95       	dec	r24
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <_Z5setupv+0x19e>
     8b8:	cb 01       	movw	r24, r22
     8ba:	80 95       	com	r24
     8bc:	84 23       	and	r24, r20
     8be:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     8c0:	d8 01       	movw	r26, r16
     8c2:	8c 91       	ld	r24, X
     8c4:	88 30       	cpi	r24, 0x08	; 8
     8c6:	78 f4       	brcc	.+30     	; 0x8e6 <_Z5setupv+0x1d4>
     8c8:	4b b1       	in	r20, 0x0b	; 11
     8ca:	87 70       	andi	r24, 0x07	; 7
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <_Z5setupv+0x1c6>
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	8a 95       	dec	r24
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <_Z5setupv+0x1c2>
     8dc:	cf 01       	movw	r24, r30
     8de:	80 95       	com	r24
     8e0:	84 23       	and	r24, r20
     8e2:	8b b9       	out	0x0b, r24	; 11
     8e4:	0e c0       	rjmp	.+28     	; 0x902 <__stack+0x3>
     8e6:	45 b1       	in	r20, 0x05	; 5
     8e8:	87 70       	andi	r24, 0x07	; 7
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	b9 01       	movw	r22, r18
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_Z5setupv+0x1e4>
     8f2:	66 0f       	add	r22, r22
     8f4:	77 1f       	adc	r23, r23
     8f6:	8a 95       	dec	r24
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <_Z5setupv+0x1e0>
     8fa:	cb 01       	movw	r24, r22
     8fc:	80 95       	com	r24
     8fe:	84 23       	and	r24, r20
     900:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     902:	d8 01       	movw	r26, r16
     904:	11 96       	adiw	r26, 0x01	; 1
     906:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     908:	88 30       	cpi	r24, 0x08	; 8
     90a:	70 f4       	brcc	.+28     	; 0x928 <__stack+0x29>
     90c:	4b b1       	in	r20, 0x0b	; 11
     90e:	87 70       	andi	r24, 0x07	; 7
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	f9 01       	movw	r30, r18
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	8a 95       	dec	r24
     91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0x19>
     920:	cf 01       	movw	r24, r30
     922:	84 2b       	or	r24, r20
     924:	8b b9       	out	0x0b, r24	; 11
     926:	0d c0       	rjmp	.+26     	; 0x942 <__stack+0x43>
     928:	45 b1       	in	r20, 0x05	; 5
     92a:	87 70       	andi	r24, 0x07	; 7
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	b9 01       	movw	r22, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
     934:	66 0f       	add	r22, r22
     936:	77 1f       	adc	r23, r23
     938:	8a 95       	dec	r24
     93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0x35>
     93c:	cb 01       	movw	r24, r22
     93e:	84 2b       	or	r24, r20
     940:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     942:	75 e0       	ldi	r23, 0x05	; 5
     944:	7a 95       	dec	r23
     946:	f1 f7       	brne	.-4      	; 0x944 <__stack+0x45>
     948:	00 00       	nop
     94a:	d8 01       	movw	r26, r16
     94c:	11 96       	adiw	r26, 0x01	; 1
     94e:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     950:	88 30       	cpi	r24, 0x08	; 8
     952:	78 f4       	brcc	.+30     	; 0x972 <__stack+0x73>
     954:	4b b1       	in	r20, 0x0b	; 11
     956:	87 70       	andi	r24, 0x07	; 7
     958:	21 e0       	ldi	r18, 0x01	; 1
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	f9 01       	movw	r30, r18
     95e:	02 c0       	rjmp	.+4      	; 0x964 <__stack+0x65>
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	8a 95       	dec	r24
     966:	e2 f7       	brpl	.-8      	; 0x960 <__stack+0x61>
     968:	cf 01       	movw	r24, r30
     96a:	80 95       	com	r24
     96c:	84 23       	and	r24, r20
     96e:	8b b9       	out	0x0b, r24	; 11
     970:	0e c0       	rjmp	.+28     	; 0x98e <__stack+0x8f>
     972:	45 b1       	in	r20, 0x05	; 5
     974:	87 70       	andi	r24, 0x07	; 7
     976:	21 e0       	ldi	r18, 0x01	; 1
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	b9 01       	movw	r22, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	8a 95       	dec	r24
     984:	e2 f7       	brpl	.-8      	; 0x97e <__stack+0x7f>
     986:	cb 01       	movw	r24, r22
     988:	80 95       	com	r24
     98a:	84 23       	and	r24, r20
     98c:	85 b9       	out	0x05, r24	; 5
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	93 e0       	ldi	r25, 0x03	; 3
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <__stack+0x93>
     996:	00 c0       	rjmp	.+0      	; 0x998 <__stack+0x99>
     998:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     99a:	d8 01       	movw	r26, r16
     99c:	12 96       	adiw	r26, 0x02	; 2
     99e:	8c 91       	ld	r24, X
     9a0:	88 30       	cpi	r24, 0x08	; 8
     9a2:	78 f4       	brcc	.+30     	; 0x9c2 <__stack+0xc3>
     9a4:	4b b1       	in	r20, 0x0b	; 11
     9a6:	87 70       	andi	r24, 0x07	; 7
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
     9b0:	ee 0f       	add	r30, r30
     9b2:	ff 1f       	adc	r31, r31
     9b4:	8a 95       	dec	r24
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <__stack+0xb1>
     9b8:	cf 01       	movw	r24, r30
     9ba:	80 95       	com	r24
     9bc:	84 23       	and	r24, r20
     9be:	8b b9       	out	0x0b, r24	; 11
     9c0:	0e c0       	rjmp	.+28     	; 0x9de <__stack+0xdf>
     9c2:	45 b1       	in	r20, 0x05	; 5
     9c4:	87 70       	andi	r24, 0x07	; 7
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	b9 01       	movw	r22, r18
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__stack+0xd3>
     9ce:	66 0f       	add	r22, r22
     9d0:	77 1f       	adc	r23, r23
     9d2:	8a 95       	dec	r24
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <__stack+0xcf>
     9d6:	cb 01       	movw	r24, r22
     9d8:	80 95       	com	r24
     9da:	84 23       	and	r24, r20
     9dc:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     9de:	d8 01       	movw	r26, r16
     9e0:	13 96       	adiw	r26, 0x03	; 3
     9e2:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     9e4:	88 30       	cpi	r24, 0x08	; 8
     9e6:	70 f4       	brcc	.+28     	; 0xa04 <__stack+0x105>
     9e8:	4b b1       	in	r20, 0x0b	; 11
     9ea:	87 70       	andi	r24, 0x07	; 7
     9ec:	21 e0       	ldi	r18, 0x01	; 1
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	f9 01       	movw	r30, r18
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0xf9>
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	8a 95       	dec	r24
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <__stack+0xf5>
     9fc:	cf 01       	movw	r24, r30
     9fe:	84 2b       	or	r24, r20
     a00:	8b b9       	out	0x0b, r24	; 11
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <__stack+0x11f>
     a04:	45 b1       	in	r20, 0x05	; 5
     a06:	87 70       	andi	r24, 0x07	; 7
     a08:	21 e0       	ldi	r18, 0x01	; 1
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	b9 01       	movw	r22, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x115>
     a10:	66 0f       	add	r22, r22
     a12:	77 1f       	adc	r23, r23
     a14:	8a 95       	dec	r24
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <__stack+0x111>
     a18:	cb 01       	movw	r24, r22
     a1a:	84 2b       	or	r24, r20
     a1c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     a1e:	d8 01       	movw	r26, r16
     a20:	14 96       	adiw	r26, 0x04	; 4
     a22:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     a24:	88 30       	cpi	r24, 0x08	; 8
     a26:	78 f4       	brcc	.+30     	; 0xa46 <__stack+0x147>
     a28:	4b b1       	in	r20, 0x0b	; 11
     a2a:	87 70       	andi	r24, 0x07	; 7
     a2c:	21 e0       	ldi	r18, 0x01	; 1
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	f9 01       	movw	r30, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <__stack+0x139>
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	8a 95       	dec	r24
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <__stack+0x135>
     a3c:	cf 01       	movw	r24, r30
     a3e:	80 95       	com	r24
     a40:	84 23       	and	r24, r20
     a42:	8b b9       	out	0x0b, r24	; 11
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__stack+0x163>
     a46:	45 b1       	in	r20, 0x05	; 5
     a48:	87 70       	andi	r24, 0x07	; 7
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	b9 01       	movw	r22, r18
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
     a52:	66 0f       	add	r22, r22
     a54:	77 1f       	adc	r23, r23
     a56:	8a 95       	dec	r24
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <__stack+0x153>
     a5a:	cb 01       	movw	r24, r22
     a5c:	80 95       	com	r24
     a5e:	84 23       	and	r24, r20
     a60:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     a62:	d8 01       	movw	r26, r16
     a64:	15 96       	adiw	r26, 0x05	; 5
     a66:	8c 91       	ld	r24, X
     a68:	88 30       	cpi	r24, 0x08	; 8
     a6a:	78 f4       	brcc	.+30     	; 0xa8a <__stack+0x18b>
     a6c:	4b b1       	in	r20, 0x0b	; 11
     a6e:	87 70       	andi	r24, 0x07	; 7
     a70:	21 e0       	ldi	r18, 0x01	; 1
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <__stack+0x17d>
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	8a 95       	dec	r24
     a7e:	e2 f7       	brpl	.-8      	; 0xa78 <__stack+0x179>
     a80:	cf 01       	movw	r24, r30
     a82:	80 95       	com	r24
     a84:	84 23       	and	r24, r20
     a86:	8b b9       	out	0x0b, r24	; 11
     a88:	0e c0       	rjmp	.+28     	; 0xaa6 <__stack+0x1a7>
     a8a:	45 b1       	in	r20, 0x05	; 5
     a8c:	87 70       	andi	r24, 0x07	; 7
     a8e:	21 e0       	ldi	r18, 0x01	; 1
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	b9 01       	movw	r22, r18
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
     a96:	66 0f       	add	r22, r22
     a98:	77 1f       	adc	r23, r23
     a9a:	8a 95       	dec	r24
     a9c:	e2 f7       	brpl	.-8      	; 0xa96 <__stack+0x197>
     a9e:	cb 01       	movw	r24, r22
     aa0:	80 95       	com	r24
     aa2:	84 23       	and	r24, r20
     aa4:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     aa6:	d8 01       	movw	r26, r16
     aa8:	11 96       	adiw	r26, 0x01	; 1
     aaa:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     aac:	88 30       	cpi	r24, 0x08	; 8
     aae:	70 f4       	brcc	.+28     	; 0xacc <__stack+0x1cd>
     ab0:	4b b1       	in	r20, 0x0b	; 11
     ab2:	87 70       	andi	r24, 0x07	; 7
     ab4:	21 e0       	ldi	r18, 0x01	; 1
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <__stack+0x1c1>
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	8a 95       	dec	r24
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <__stack+0x1bd>
     ac4:	cf 01       	movw	r24, r30
     ac6:	84 2b       	or	r24, r20
     ac8:	8b b9       	out	0x0b, r24	; 11
     aca:	0d c0       	rjmp	.+26     	; 0xae6 <__stack+0x1e7>
     acc:	45 b1       	in	r20, 0x05	; 5
     ace:	87 70       	andi	r24, 0x07	; 7
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	b9 01       	movw	r22, r18
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <__stack+0x1dd>
     ad8:	66 0f       	add	r22, r22
     ada:	77 1f       	adc	r23, r23
     adc:	8a 95       	dec	r24
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <__stack+0x1d9>
     ae0:	cb 01       	movw	r24, r22
     ae2:	84 2b       	or	r24, r20
     ae4:	85 b9       	out	0x05, r24	; 5
     ae6:	75 e0       	ldi	r23, 0x05	; 5
     ae8:	7a 95       	dec	r23
     aea:	f1 f7       	brne	.-4      	; 0xae8 <__stack+0x1e9>
     aec:	00 00       	nop
     aee:	d8 01       	movw	r26, r16
     af0:	11 96       	adiw	r26, 0x01	; 1
     af2:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     af4:	88 30       	cpi	r24, 0x08	; 8
     af6:	78 f4       	brcc	.+30     	; 0xb16 <__stack+0x217>
     af8:	4b b1       	in	r20, 0x0b	; 11
     afa:	87 70       	andi	r24, 0x07	; 7
     afc:	21 e0       	ldi	r18, 0x01	; 1
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x209>
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	8a 95       	dec	r24
     b0a:	e2 f7       	brpl	.-8      	; 0xb04 <__stack+0x205>
     b0c:	cf 01       	movw	r24, r30
     b0e:	80 95       	com	r24
     b10:	84 23       	and	r24, r20
     b12:	8b b9       	out	0x0b, r24	; 11
     b14:	0e c0       	rjmp	.+28     	; 0xb32 <__stack+0x233>
     b16:	45 b1       	in	r20, 0x05	; 5
     b18:	87 70       	andi	r24, 0x07	; 7
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	b9 01       	movw	r22, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x227>
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	8a 95       	dec	r24
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <__stack+0x223>
     b2a:	cb 01       	movw	r24, r22
     b2c:	80 95       	com	r24
     b2e:	84 23       	and	r24, r20
     b30:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b32:	8f e3       	ldi	r24, 0x3F	; 63
     b34:	9f e1       	ldi	r25, 0x1F	; 31
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <__stack+0x237>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <__stack+0x23d>
     b3c:	00 00       	nop
				port::mode(_pPulse, OUTPUT);
				
				util::delay_ms_static(20);
				SendCommand(0x33);
				SendCommand(0x32);
				SendCommand(0x28);
     b3e:	68 e2       	ldi	r22, 0x28	; 40
     b40:	c8 01       	movw	r24, r16
     b42:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				SendCommand(0x0C);
     b46:	6c e0       	ldi	r22, 0x0C	; 12
     b48:	c8 01       	movw	r24, r16
     b4a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				SendCommand(0x06);
     b4e:	66 e0       	ldi	r22, 0x06	; 6
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				SendCommand(0x01);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	c8 01       	movw	r24, r16
     b5a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
     b5e:	af e3       	ldi	r26, 0x3F	; 63
     b60:	bf e1       	ldi	r27, 0x1F	; 31
     b62:	11 97       	sbiw	r26, 0x01	; 1
     b64:	f1 f7       	brne	.-4      	; 0xb62 <__stack+0x263>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <__stack+0x269>
     b68:	00 00       	nop
	lcd = new component::DisplayLCD(P12, P11, ports);
     b6a:	10 93 57 01 	sts	0x0157, r17	; 0x800157 <lcd+0x1>
     b6e:	00 93 56 01 	sts	0x0156, r16	; 0x800156 <lcd>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     b72:	f8 01       	movw	r30, r16
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	78 f4       	brcc	.+30     	; 0xb98 <__stack+0x299>
     b7a:	4b b1       	in	r20, 0x0b	; 11
     b7c:	87 70       	andi	r24, 0x07	; 7
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	b9 01       	movw	r22, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x28b>
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	8a 95       	dec	r24
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <__stack+0x287>
     b8e:	cb 01       	movw	r24, r22
     b90:	80 95       	com	r24
     b92:	84 23       	and	r24, r20
     b94:	8b b9       	out	0x0b, r24	; 11
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <__stack+0x2b5>
     b98:	45 b1       	in	r20, 0x05	; 5
     b9a:	87 70       	andi	r24, 0x07	; 7
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	d9 01       	movw	r26, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <__stack+0x2a9>
     ba4:	aa 0f       	add	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <__stack+0x2a5>
     bac:	cd 01       	movw	r24, r26
     bae:	80 95       	com	r24
     bb0:	84 23       	and	r24, r20
     bb2:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
     bb4:	f8 01       	movw	r30, r16
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	88 30       	cpi	r24, 0x08	; 8
     bba:	78 f4       	brcc	.+30     	; 0xbda <__stack+0x2db>
     bbc:	4b b1       	in	r20, 0x0b	; 11
     bbe:	87 70       	andi	r24, 0x07	; 7
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	b9 01       	movw	r22, r18
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <__stack+0x2cd>
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	8a 95       	dec	r24
     bce:	e2 f7       	brpl	.-8      	; 0xbc8 <__stack+0x2c9>
     bd0:	cb 01       	movw	r24, r22
     bd2:	80 95       	com	r24
     bd4:	84 23       	and	r24, r20
     bd6:	8b b9       	out	0x0b, r24	; 11
     bd8:	0e c0       	rjmp	.+28     	; 0xbf6 <__stack+0x2f7>
     bda:	45 b1       	in	r20, 0x05	; 5
     bdc:	87 70       	andi	r24, 0x07	; 7
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	d9 01       	movw	r26, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0x2eb>
     be6:	aa 0f       	add	r26, r26
     be8:	bb 1f       	adc	r27, r27
     bea:	8a 95       	dec	r24
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <__stack+0x2e7>
     bee:	cd 01       	movw	r24, r26
     bf0:	80 95       	com	r24
     bf2:	84 23       	and	r24, r20
     bf4:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
     bf6:	f8 01       	movw	r30, r16
     bf8:	84 81       	ldd	r24, Z+4	; 0x04
     bfa:	88 30       	cpi	r24, 0x08	; 8
     bfc:	78 f4       	brcc	.+30     	; 0xc1c <__stack+0x31d>
     bfe:	4b b1       	in	r20, 0x0b	; 11
     c00:	87 70       	andi	r24, 0x07	; 7
     c02:	21 e0       	ldi	r18, 0x01	; 1
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	b9 01       	movw	r22, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <__stack+0x30f>
     c0a:	66 0f       	add	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	8a 95       	dec	r24
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <__stack+0x30b>
     c12:	cb 01       	movw	r24, r22
     c14:	80 95       	com	r24
     c16:	84 23       	and	r24, r20
     c18:	8b b9       	out	0x0b, r24	; 11
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <__stack+0x339>
     c1c:	45 b1       	in	r20, 0x05	; 5
     c1e:	87 70       	andi	r24, 0x07	; 7
     c20:	21 e0       	ldi	r18, 0x01	; 1
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	d9 01       	movw	r26, r18
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <__stack+0x32d>
     c28:	aa 0f       	add	r26, r26
     c2a:	bb 1f       	adc	r27, r27
     c2c:	8a 95       	dec	r24
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <__stack+0x329>
     c30:	cd 01       	movw	r24, r26
     c32:	80 95       	com	r24
     c34:	84 23       	and	r24, r20
     c36:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
     c38:	f8 01       	movw	r30, r16
     c3a:	85 81       	ldd	r24, Z+5	; 0x05
     c3c:	88 30       	cpi	r24, 0x08	; 8
     c3e:	78 f4       	brcc	.+30     	; 0xc5e <__stack+0x35f>
     c40:	4b b1       	in	r20, 0x0b	; 11
     c42:	87 70       	andi	r24, 0x07	; 7
     c44:	21 e0       	ldi	r18, 0x01	; 1
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	b9 01       	movw	r22, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <__stack+0x351>
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	8a 95       	dec	r24
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <__stack+0x34d>
     c54:	cb 01       	movw	r24, r22
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8b b9       	out	0x0b, r24	; 11
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <__stack+0x37b>
     c5e:	45 b1       	in	r20, 0x05	; 5
     c60:	87 70       	andi	r24, 0x07	; 7
     c62:	21 e0       	ldi	r18, 0x01	; 1
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	d9 01       	movw	r26, r18
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <__stack+0x36f>
     c6a:	aa 0f       	add	r26, r26
     c6c:	bb 1f       	adc	r27, r27
     c6e:	8a 95       	dec	r24
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <__stack+0x36b>
     c72:	cd 01       	movw	r24, r26
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	88 30       	cpi	r24, 0x08	; 8
     c80:	78 f4       	brcc	.+30     	; 0xca0 <__stack+0x3a1>
     c82:	4b b1       	in	r20, 0x0b	; 11
     c84:	87 70       	andi	r24, 0x07	; 7
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	b9 01       	movw	r22, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <__stack+0x393>
     c8e:	66 0f       	add	r22, r22
     c90:	77 1f       	adc	r23, r23
     c92:	8a 95       	dec	r24
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <__stack+0x38f>
     c96:	cb 01       	movw	r24, r22
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8b b9       	out	0x0b, r24	; 11
     c9e:	0e c0       	rjmp	.+28     	; 0xcbc <__stack+0x3bd>
     ca0:	45 b1       	in	r20, 0x05	; 5
     ca2:	87 70       	andi	r24, 0x07	; 7
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	d9 01       	movw	r26, r18
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <__stack+0x3b1>
     cac:	aa 0f       	add	r26, r26
     cae:	bb 1f       	adc	r27, r27
     cb0:	8a 95       	dec	r24
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <__stack+0x3ad>
     cb4:	cd 01       	movw	r24, r26
     cb6:	80 95       	com	r24
     cb8:	84 23       	and	r24, r20
     cba:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     cbc:	f8 01       	movw	r30, r16
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     cc0:	88 30       	cpi	r24, 0x08	; 8
     cc2:	70 f4       	brcc	.+28     	; 0xce0 <__stack+0x3e1>
     cc4:	4b b1       	in	r20, 0x0b	; 11
     cc6:	87 70       	andi	r24, 0x07	; 7
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	b9 01       	movw	r22, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <__stack+0x3d5>
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	8a 95       	dec	r24
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <__stack+0x3d1>
     cd8:	cb 01       	movw	r24, r22
     cda:	84 2b       	or	r24, r20
     cdc:	8b b9       	out	0x0b, r24	; 11
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <__stack+0x3fb>
     ce0:	45 b1       	in	r20, 0x05	; 5
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	d9 01       	movw	r26, r18
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <__stack+0x3f1>
     cec:	aa 0f       	add	r26, r26
     cee:	bb 1f       	adc	r27, r27
     cf0:	8a 95       	dec	r24
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <__stack+0x3ed>
     cf4:	cd 01       	movw	r24, r26
     cf6:	84 2b       	or	r24, r20
     cf8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfa:	b5 e0       	ldi	r27, 0x05	; 5
     cfc:	ba 95       	dec	r27
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <__stack+0x3fd>
     d00:	00 00       	nop
     d02:	f8 01       	movw	r30, r16
     d04:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
     d06:	88 30       	cpi	r24, 0x08	; 8
     d08:	78 f4       	brcc	.+30     	; 0xd28 <__stack+0x429>
     d0a:	4b b1       	in	r20, 0x0b	; 11
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	b9 01       	movw	r22, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <__stack+0x41b>
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	8a 95       	dec	r24
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <__stack+0x417>
     d1e:	cb 01       	movw	r24, r22
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8b b9       	out	0x0b, r24	; 11
     d26:	0e c0       	rjmp	.+28     	; 0xd44 <__stack+0x445>
     d28:	45 b1       	in	r20, 0x05	; 5
     d2a:	87 70       	andi	r24, 0x07	; 7
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	d9 01       	movw	r26, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <__stack+0x439>
     d34:	aa 0f       	add	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	8a 95       	dec	r24
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <__stack+0x435>
     d3c:	cd 01       	movw	r24, r26
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	85 b9       	out	0x05, r24	; 5
     d44:	ef e1       	ldi	r30, 0x1F	; 31
     d46:	f3 e0       	ldi	r31, 0x03	; 3
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <__stack+0x449>
     d4c:	00 c0       	rjmp	.+0      	; 0xd4e <__stack+0x44f>
     d4e:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
     d50:	d8 01       	movw	r26, r16
     d52:	12 96       	adiw	r26, 0x02	; 2
     d54:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     d56:	88 30       	cpi	r24, 0x08	; 8
     d58:	70 f4       	brcc	.+28     	; 0xd76 <__stack+0x477>
     d5a:	4b b1       	in	r20, 0x0b	; 11
     d5c:	87 70       	andi	r24, 0x07	; 7
     d5e:	21 e0       	ldi	r18, 0x01	; 1
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	f9 01       	movw	r30, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <__stack+0x46b>
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	8a 95       	dec	r24
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <__stack+0x467>
     d6e:	cf 01       	movw	r24, r30
     d70:	84 2b       	or	r24, r20
     d72:	8b b9       	out	0x0b, r24	; 11
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <__stack+0x491>
     d76:	45 b1       	in	r20, 0x05	; 5
     d78:	87 70       	andi	r24, 0x07	; 7
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	b9 01       	movw	r22, r18
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <__stack+0x487>
     d82:	66 0f       	add	r22, r22
     d84:	77 1f       	adc	r23, r23
     d86:	8a 95       	dec	r24
     d88:	e2 f7       	brpl	.-8      	; 0xd82 <__stack+0x483>
     d8a:	cb 01       	movw	r24, r22
     d8c:	84 2b       	or	r24, r20
     d8e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
     d90:	d8 01       	movw	r26, r16
     d92:	13 96       	adiw	r26, 0x03	; 3
     d94:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     d96:	88 30       	cpi	r24, 0x08	; 8
     d98:	78 f4       	brcc	.+30     	; 0xdb8 <__stack+0x4b9>
     d9a:	4b b1       	in	r20, 0x0b	; 11
     d9c:	87 70       	andi	r24, 0x07	; 7
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	f9 01       	movw	r30, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <__stack+0x4ab>
     da6:	ee 0f       	add	r30, r30
     da8:	ff 1f       	adc	r31, r31
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <__stack+0x4a7>
     dae:	cf 01       	movw	r24, r30
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8b b9       	out	0x0b, r24	; 11
     db6:	0e c0       	rjmp	.+28     	; 0xdd4 <__stack+0x4d5>
     db8:	45 b1       	in	r20, 0x05	; 5
     dba:	87 70       	andi	r24, 0x07	; 7
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	b9 01       	movw	r22, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__stack+0x4c9>
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <__stack+0x4c5>
     dcc:	cb 01       	movw	r24, r22
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
     dd4:	d8 01       	movw	r26, r16
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8c 91       	ld	r24, X
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	78 f4       	brcc	.+30     	; 0xdfc <__stack+0x4fd>
     dde:	4b b1       	in	r20, 0x0b	; 11
     de0:	87 70       	andi	r24, 0x07	; 7
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	f9 01       	movw	r30, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <__stack+0x4ef>
     dea:	ee 0f       	add	r30, r30
     dec:	ff 1f       	adc	r31, r31
     dee:	8a 95       	dec	r24
     df0:	e2 f7       	brpl	.-8      	; 0xdea <__stack+0x4eb>
     df2:	cf 01       	movw	r24, r30
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8b b9       	out	0x0b, r24	; 11
     dfa:	0e c0       	rjmp	.+28     	; 0xe18 <__stack+0x519>
     dfc:	45 b1       	in	r20, 0x05	; 5
     dfe:	87 70       	andi	r24, 0x07	; 7
     e00:	21 e0       	ldi	r18, 0x01	; 1
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	b9 01       	movw	r22, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <__stack+0x50d>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	8a 95       	dec	r24
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <__stack+0x509>
     e10:	cb 01       	movw	r24, r22
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
     e18:	d8 01       	movw	r26, r16
     e1a:	15 96       	adiw	r26, 0x05	; 5
     e1c:	8c 91       	ld	r24, X
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	78 f4       	brcc	.+30     	; 0xe40 <__stack+0x541>
     e22:	4b b1       	in	r20, 0x0b	; 11
     e24:	87 70       	andi	r24, 0x07	; 7
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	f9 01       	movw	r30, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__stack+0x533>
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <__stack+0x52f>
     e36:	cf 01       	movw	r24, r30
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8b b9       	out	0x0b, r24	; 11
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__stack+0x55d>
     e40:	45 b1       	in	r20, 0x05	; 5
     e42:	87 70       	andi	r24, 0x07	; 7
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	b9 01       	movw	r22, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <__stack+0x551>
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	8a 95       	dec	r24
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <__stack+0x54d>
     e54:	cb 01       	movw	r24, r22
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
     e5c:	d8 01       	movw	r26, r16
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	70 f4       	brcc	.+28     	; 0xe82 <__stack+0x583>
     e66:	4b b1       	in	r20, 0x0b	; 11
     e68:	87 70       	andi	r24, 0x07	; 7
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <__stack+0x577>
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	8a 95       	dec	r24
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <__stack+0x573>
     e7a:	cf 01       	movw	r24, r30
     e7c:	84 2b       	or	r24, r20
     e7e:	8b b9       	out	0x0b, r24	; 11
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <__stack+0x59d>
     e82:	45 b1       	in	r20, 0x05	; 5
     e84:	87 70       	andi	r24, 0x07	; 7
     e86:	21 e0       	ldi	r18, 0x01	; 1
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	b9 01       	movw	r22, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <__stack+0x593>
     e8e:	66 0f       	add	r22, r22
     e90:	77 1f       	adc	r23, r23
     e92:	8a 95       	dec	r24
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <__stack+0x58f>
     e96:	cb 01       	movw	r24, r22
     e98:	84 2b       	or	r24, r20
     e9a:	85 b9       	out	0x05, r24	; 5
     e9c:	75 e0       	ldi	r23, 0x05	; 5
     e9e:	7a 95       	dec	r23
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <__stack+0x59f>
     ea2:	00 00       	nop
     ea4:	d8 01       	movw	r26, r16
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	78 f4       	brcc	.+30     	; 0xecc <__stack+0x5cd>
     eae:	4b b1       	in	r20, 0x0b	; 11
     eb0:	87 70       	andi	r24, 0x07	; 7
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <__stack+0x5bf>
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	8a 95       	dec	r24
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <__stack+0x5bb>
     ec2:	cf 01       	movw	r24, r30
     ec4:	80 95       	com	r24
     ec6:	84 23       	and	r24, r20
     ec8:	8b b9       	out	0x0b, r24	; 11
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <__stack+0x5e9>
     ecc:	45 b1       	in	r20, 0x05	; 5
     ece:	87 70       	andi	r24, 0x07	; 7
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	b9 01       	movw	r22, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <__stack+0x5dd>
     ed8:	66 0f       	add	r22, r22
     eda:	77 1f       	adc	r23, r23
     edc:	8a 95       	dec	r24
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <__stack+0x5d9>
     ee0:	cb 01       	movw	r24, r22
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ee8:	8f e3       	ldi	r24, 0x3F	; 63
     eea:	9f e1       	ldi	r25, 0x1F	; 31
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <__stack+0x5ed>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <__stack+0x5f3>
     ef2:	00 00       	nop
     ef4:	af e3       	ldi	r26, 0x3F	; 63
     ef6:	bf e1       	ldi	r27, 0x1F	; 31
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <__stack+0x5f9>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <__stack+0x5ff>
     efe:	00 00       	nop
			}
			
			public: void ClearScreen() {
				SendCommand(0x01);
				util::delay_ms_static(2);
				SendCommand(0x80);
     f00:	60 e8       	ldi	r22, 0x80	; 128
     f02:	c8 01       	movw	r24, r16
     f04:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
			}
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
     f08:	60 e8       	ldi	r22, 0x80	; 128
     f0a:	c8 01       	movw	r24, r16
     f0c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
     f10:	ee e2       	ldi	r30, 0x2E	; 46
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	2a e5       	ldi	r18, 0x5A	; 90
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <__stack+0x629>
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
     f20:	20 81       	ld	r18, Z
     f22:	22 23       	and	r18, r18
     f24:	09 f4       	brne	.+2      	; 0xf28 <__stack+0x629>
     f26:	03 c4       	rjmp	.+2054   	; 0x172e <__stack+0xe2f>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
     f28:	40 31       	cpi	r20, 0x10	; 16
     f2a:	51 05       	cpc	r21, r1
     f2c:	19 f0       	breq	.+6      	; 0xf34 <__stack+0x635>
     f2e:	2a 30       	cpi	r18, 0x0A	; 10
     f30:	09 f0       	breq	.+2      	; 0xf34 <__stack+0x635>
     f32:	91 c1       	rjmp	.+802    	; 0x1256 <__stack+0x957>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
     f34:	d8 01       	movw	r26, r16
     f36:	12 96       	adiw	r26, 0x02	; 2
     f38:	2c 91       	ld	r18, X
     f3a:	28 30       	cpi	r18, 0x08	; 8
     f3c:	68 f4       	brcc	.+26     	; 0xf58 <__stack+0x659>
     f3e:	3b b1       	in	r19, 0x0b	; 11
     f40:	27 70       	andi	r18, 0x07	; 7
     f42:	bc 01       	movw	r22, r24
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <__stack+0x64b>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	2a 95       	dec	r18
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <__stack+0x647>
     f4e:	26 2f       	mov	r18, r22
     f50:	20 95       	com	r18
     f52:	23 23       	and	r18, r19
     f54:	2b b9       	out	0x0b, r18	; 11
     f56:	0c c0       	rjmp	.+24     	; 0xf70 <__stack+0x671>
     f58:	35 b1       	in	r19, 0x05	; 5
     f5a:	27 70       	andi	r18, 0x07	; 7
     f5c:	bc 01       	movw	r22, r24
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <__stack+0x665>
     f60:	66 0f       	add	r22, r22
     f62:	77 1f       	adc	r23, r23
     f64:	2a 95       	dec	r18
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <__stack+0x661>
     f68:	26 2f       	mov	r18, r22
     f6a:	20 95       	com	r18
     f6c:	23 23       	and	r18, r19
     f6e:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
     f70:	d8 01       	movw	r26, r16
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	2c 91       	ld	r18, X
     f76:	28 30       	cpi	r18, 0x08	; 8
     f78:	68 f4       	brcc	.+26     	; 0xf94 <__stack+0x695>
     f7a:	3b b1       	in	r19, 0x0b	; 11
     f7c:	27 70       	andi	r18, 0x07	; 7
     f7e:	bc 01       	movw	r22, r24
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <__stack+0x687>
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	2a 95       	dec	r18
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <__stack+0x683>
     f8a:	26 2f       	mov	r18, r22
     f8c:	20 95       	com	r18
     f8e:	23 23       	and	r18, r19
     f90:	2b b9       	out	0x0b, r18	; 11
     f92:	0c c0       	rjmp	.+24     	; 0xfac <__stack+0x6ad>
     f94:	35 b1       	in	r19, 0x05	; 5
     f96:	27 70       	andi	r18, 0x07	; 7
     f98:	bc 01       	movw	r22, r24
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <__stack+0x6a1>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	2a 95       	dec	r18
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <__stack+0x69d>
     fa4:	26 2f       	mov	r18, r22
     fa6:	20 95       	com	r18
     fa8:	23 23       	and	r18, r19
     faa:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
     fac:	d8 01       	movw	r26, r16
     fae:	14 96       	adiw	r26, 0x04	; 4
     fb0:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
     fb2:	28 30       	cpi	r18, 0x08	; 8
     fb4:	60 f4       	brcc	.+24     	; 0xfce <__stack+0x6cf>
     fb6:	6b b1       	in	r22, 0x0b	; 11
     fb8:	27 70       	andi	r18, 0x07	; 7
     fba:	dc 01       	movw	r26, r24
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <__stack+0x6c3>
     fbe:	aa 0f       	add	r26, r26
     fc0:	bb 1f       	adc	r27, r27
     fc2:	2a 95       	dec	r18
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <__stack+0x6bf>
     fc6:	9d 01       	movw	r18, r26
     fc8:	26 2b       	or	r18, r22
     fca:	2b b9       	out	0x0b, r18	; 11
     fcc:	0b c0       	rjmp	.+22     	; 0xfe4 <__stack+0x6e5>
     fce:	65 b1       	in	r22, 0x05	; 5
     fd0:	27 70       	andi	r18, 0x07	; 7
     fd2:	dc 01       	movw	r26, r24
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <__stack+0x6db>
     fd6:	aa 0f       	add	r26, r26
     fd8:	bb 1f       	adc	r27, r27
     fda:	2a 95       	dec	r18
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <__stack+0x6d7>
     fde:	9d 01       	movw	r18, r26
     fe0:	26 2b       	or	r18, r22
     fe2:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
     fe4:	d8 01       	movw	r26, r16
     fe6:	15 96       	adiw	r26, 0x05	; 5
     fe8:	2c 91       	ld	r18, X
     fea:	28 30       	cpi	r18, 0x08	; 8
     fec:	60 f4       	brcc	.+24     	; 0x1006 <__stack+0x707>
     fee:	6b b1       	in	r22, 0x0b	; 11
     ff0:	27 70       	andi	r18, 0x07	; 7
     ff2:	dc 01       	movw	r26, r24
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <__stack+0x6fb>
     ff6:	aa 0f       	add	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <__stack+0x6f7>
     ffe:	9d 01       	movw	r18, r26
    1000:	26 2b       	or	r18, r22
    1002:	2b b9       	out	0x0b, r18	; 11
    1004:	0b c0       	rjmp	.+22     	; 0x101c <__stack+0x71d>
    1006:	65 b1       	in	r22, 0x05	; 5
    1008:	27 70       	andi	r18, 0x07	; 7
    100a:	dc 01       	movw	r26, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <__stack+0x713>
    100e:	aa 0f       	add	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	2a 95       	dec	r18
    1014:	e2 f7       	brpl	.-8      	; 0x100e <__stack+0x70f>
    1016:	9d 01       	movw	r18, r26
    1018:	26 2b       	or	r18, r22
    101a:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    101c:	d8 01       	movw	r26, r16
    101e:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1020:	28 30       	cpi	r18, 0x08	; 8
    1022:	68 f4       	brcc	.+26     	; 0x103e <__stack+0x73f>
    1024:	3b b1       	in	r19, 0x0b	; 11
    1026:	27 70       	andi	r18, 0x07	; 7
    1028:	bc 01       	movw	r22, r24
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__stack+0x731>
    102c:	66 0f       	add	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	2a 95       	dec	r18
    1032:	e2 f7       	brpl	.-8      	; 0x102c <__stack+0x72d>
    1034:	26 2f       	mov	r18, r22
    1036:	20 95       	com	r18
    1038:	23 23       	and	r18, r19
    103a:	2b b9       	out	0x0b, r18	; 11
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <__stack+0x757>
    103e:	35 b1       	in	r19, 0x05	; 5
    1040:	27 70       	andi	r18, 0x07	; 7
    1042:	bc 01       	movw	r22, r24
    1044:	02 c0       	rjmp	.+4      	; 0x104a <__stack+0x74b>
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <__stack+0x747>
    104e:	26 2f       	mov	r18, r22
    1050:	20 95       	com	r18
    1052:	23 23       	and	r18, r19
    1054:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1056:	d8 01       	movw	r26, r16
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    105c:	28 30       	cpi	r18, 0x08	; 8
    105e:	60 f4       	brcc	.+24     	; 0x1078 <__stack+0x779>
    1060:	6b b1       	in	r22, 0x0b	; 11
    1062:	27 70       	andi	r18, 0x07	; 7
    1064:	dc 01       	movw	r26, r24
    1066:	02 c0       	rjmp	.+4      	; 0x106c <__stack+0x76d>
    1068:	aa 0f       	add	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	2a 95       	dec	r18
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <__stack+0x769>
    1070:	9d 01       	movw	r18, r26
    1072:	26 2b       	or	r18, r22
    1074:	2b b9       	out	0x0b, r18	; 11
    1076:	0b c0       	rjmp	.+22     	; 0x108e <__stack+0x78f>
    1078:	65 b1       	in	r22, 0x05	; 5
    107a:	27 70       	andi	r18, 0x07	; 7
    107c:	dc 01       	movw	r26, r24
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <__stack+0x785>
    1080:	aa 0f       	add	r26, r26
    1082:	bb 1f       	adc	r27, r27
    1084:	2a 95       	dec	r18
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <__stack+0x781>
    1088:	9d 01       	movw	r18, r26
    108a:	26 2b       	or	r18, r22
    108c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108e:	b5 e0       	ldi	r27, 0x05	; 5
    1090:	ba 95       	dec	r27
    1092:	f1 f7       	brne	.-4      	; 0x1090 <__stack+0x791>
    1094:	00 00       	nop
    1096:	d8 01       	movw	r26, r16
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    109c:	28 30       	cpi	r18, 0x08	; 8
    109e:	68 f4       	brcc	.+26     	; 0x10ba <__stack+0x7bb>
    10a0:	3b b1       	in	r19, 0x0b	; 11
    10a2:	27 70       	andi	r18, 0x07	; 7
    10a4:	bc 01       	movw	r22, r24
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <__stack+0x7ad>
    10a8:	66 0f       	add	r22, r22
    10aa:	77 1f       	adc	r23, r23
    10ac:	2a 95       	dec	r18
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <__stack+0x7a9>
    10b0:	26 2f       	mov	r18, r22
    10b2:	20 95       	com	r18
    10b4:	23 23       	and	r18, r19
    10b6:	2b b9       	out	0x0b, r18	; 11
    10b8:	0c c0       	rjmp	.+24     	; 0x10d2 <__stack+0x7d3>
    10ba:	35 b1       	in	r19, 0x05	; 5
    10bc:	27 70       	andi	r18, 0x07	; 7
    10be:	bc 01       	movw	r22, r24
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <__stack+0x7c7>
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	2a 95       	dec	r18
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <__stack+0x7c3>
    10ca:	26 2f       	mov	r18, r22
    10cc:	20 95       	com	r18
    10ce:	23 23       	and	r18, r19
    10d0:	25 b9       	out	0x05, r18	; 5
    10d2:	af e1       	ldi	r26, 0x1F	; 31
    10d4:	b3 e0       	ldi	r27, 0x03	; 3
    10d6:	11 97       	sbiw	r26, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <__stack+0x7d7>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <__stack+0x7dd>
    10dc:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    10de:	d8 01       	movw	r26, r16
    10e0:	12 96       	adiw	r26, 0x02	; 2
    10e2:	2c 91       	ld	r18, X
    10e4:	28 30       	cpi	r18, 0x08	; 8
    10e6:	68 f4       	brcc	.+26     	; 0x1102 <__stack+0x803>
    10e8:	3b b1       	in	r19, 0x0b	; 11
    10ea:	27 70       	andi	r18, 0x07	; 7
    10ec:	bc 01       	movw	r22, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <__stack+0x7f5>
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	2a 95       	dec	r18
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <__stack+0x7f1>
    10f8:	26 2f       	mov	r18, r22
    10fa:	20 95       	com	r18
    10fc:	23 23       	and	r18, r19
    10fe:	2b b9       	out	0x0b, r18	; 11
    1100:	0c c0       	rjmp	.+24     	; 0x111a <__stack+0x81b>
    1102:	35 b1       	in	r19, 0x05	; 5
    1104:	27 70       	andi	r18, 0x07	; 7
    1106:	bc 01       	movw	r22, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <__stack+0x80f>
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	2a 95       	dec	r18
    1110:	e2 f7       	brpl	.-8      	; 0x110a <__stack+0x80b>
    1112:	26 2f       	mov	r18, r22
    1114:	20 95       	com	r18
    1116:	23 23       	and	r18, r19
    1118:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    111a:	d8 01       	movw	r26, r16
    111c:	13 96       	adiw	r26, 0x03	; 3
    111e:	2c 91       	ld	r18, X
    1120:	28 30       	cpi	r18, 0x08	; 8
    1122:	68 f4       	brcc	.+26     	; 0x113e <__stack+0x83f>
    1124:	3b b1       	in	r19, 0x0b	; 11
    1126:	27 70       	andi	r18, 0x07	; 7
    1128:	bc 01       	movw	r22, r24
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <__stack+0x831>
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	2a 95       	dec	r18
    1132:	e2 f7       	brpl	.-8      	; 0x112c <__stack+0x82d>
    1134:	26 2f       	mov	r18, r22
    1136:	20 95       	com	r18
    1138:	23 23       	and	r18, r19
    113a:	2b b9       	out	0x0b, r18	; 11
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <__stack+0x857>
    113e:	35 b1       	in	r19, 0x05	; 5
    1140:	27 70       	andi	r18, 0x07	; 7
    1142:	bc 01       	movw	r22, r24
    1144:	02 c0       	rjmp	.+4      	; 0x114a <__stack+0x84b>
    1146:	66 0f       	add	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	2a 95       	dec	r18
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <__stack+0x847>
    114e:	26 2f       	mov	r18, r22
    1150:	20 95       	com	r18
    1152:	23 23       	and	r18, r19
    1154:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    1156:	d8 01       	movw	r26, r16
    1158:	14 96       	adiw	r26, 0x04	; 4
    115a:	2c 91       	ld	r18, X
    115c:	28 30       	cpi	r18, 0x08	; 8
    115e:	68 f4       	brcc	.+26     	; 0x117a <__stack+0x87b>
    1160:	3b b1       	in	r19, 0x0b	; 11
    1162:	27 70       	andi	r18, 0x07	; 7
    1164:	bc 01       	movw	r22, r24
    1166:	02 c0       	rjmp	.+4      	; 0x116c <__stack+0x86d>
    1168:	66 0f       	add	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	2a 95       	dec	r18
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <__stack+0x869>
    1170:	26 2f       	mov	r18, r22
    1172:	20 95       	com	r18
    1174:	23 23       	and	r18, r19
    1176:	2b b9       	out	0x0b, r18	; 11
    1178:	0c c0       	rjmp	.+24     	; 0x1192 <__stack+0x893>
    117a:	35 b1       	in	r19, 0x05	; 5
    117c:	27 70       	andi	r18, 0x07	; 7
    117e:	bc 01       	movw	r22, r24
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <__stack+0x887>
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <__stack+0x883>
    118a:	26 2f       	mov	r18, r22
    118c:	20 95       	com	r18
    118e:	23 23       	and	r18, r19
    1190:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1192:	d8 01       	movw	r26, r16
    1194:	15 96       	adiw	r26, 0x05	; 5
    1196:	2c 91       	ld	r18, X
    1198:	28 30       	cpi	r18, 0x08	; 8
    119a:	68 f4       	brcc	.+26     	; 0x11b6 <__stack+0x8b7>
    119c:	3b b1       	in	r19, 0x0b	; 11
    119e:	27 70       	andi	r18, 0x07	; 7
    11a0:	bc 01       	movw	r22, r24
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <__stack+0x8a9>
    11a4:	66 0f       	add	r22, r22
    11a6:	77 1f       	adc	r23, r23
    11a8:	2a 95       	dec	r18
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <__stack+0x8a5>
    11ac:	26 2f       	mov	r18, r22
    11ae:	20 95       	com	r18
    11b0:	23 23       	and	r18, r19
    11b2:	2b b9       	out	0x0b, r18	; 11
    11b4:	0c c0       	rjmp	.+24     	; 0x11ce <__stack+0x8cf>
    11b6:	35 b1       	in	r19, 0x05	; 5
    11b8:	27 70       	andi	r18, 0x07	; 7
    11ba:	bc 01       	movw	r22, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <__stack+0x8c3>
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	2a 95       	dec	r18
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <__stack+0x8bf>
    11c6:	26 2f       	mov	r18, r22
    11c8:	20 95       	com	r18
    11ca:	23 23       	and	r18, r19
    11cc:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    11ce:	d8 01       	movw	r26, r16
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    11d4:	28 30       	cpi	r18, 0x08	; 8
    11d6:	60 f4       	brcc	.+24     	; 0x11f0 <__stack+0x8f1>
    11d8:	6b b1       	in	r22, 0x0b	; 11
    11da:	27 70       	andi	r18, 0x07	; 7
    11dc:	dc 01       	movw	r26, r24
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <__stack+0x8e5>
    11e0:	aa 0f       	add	r26, r26
    11e2:	bb 1f       	adc	r27, r27
    11e4:	2a 95       	dec	r18
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <__stack+0x8e1>
    11e8:	9d 01       	movw	r18, r26
    11ea:	26 2b       	or	r18, r22
    11ec:	2b b9       	out	0x0b, r18	; 11
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <__stack+0x907>
    11f0:	65 b1       	in	r22, 0x05	; 5
    11f2:	27 70       	andi	r18, 0x07	; 7
    11f4:	dc 01       	movw	r26, r24
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <__stack+0x8fd>
    11f8:	aa 0f       	add	r26, r26
    11fa:	bb 1f       	adc	r27, r27
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <__stack+0x8f9>
    1200:	9d 01       	movw	r18, r26
    1202:	26 2b       	or	r18, r22
    1204:	25 b9       	out	0x05, r18	; 5
    1206:	b5 e0       	ldi	r27, 0x05	; 5
    1208:	ba 95       	dec	r27
    120a:	f1 f7       	brne	.-4      	; 0x1208 <__stack+0x909>
    120c:	00 00       	nop
    120e:	d8 01       	movw	r26, r16
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1214:	28 30       	cpi	r18, 0x08	; 8
    1216:	68 f4       	brcc	.+26     	; 0x1232 <__stack+0x933>
    1218:	3b b1       	in	r19, 0x0b	; 11
    121a:	27 70       	andi	r18, 0x07	; 7
    121c:	bc 01       	movw	r22, r24
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <__stack+0x925>
    1220:	66 0f       	add	r22, r22
    1222:	77 1f       	adc	r23, r23
    1224:	2a 95       	dec	r18
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <__stack+0x921>
    1228:	26 2f       	mov	r18, r22
    122a:	20 95       	com	r18
    122c:	23 23       	and	r18, r19
    122e:	2b b9       	out	0x0b, r18	; 11
    1230:	0c c0       	rjmp	.+24     	; 0x124a <__stack+0x94b>
    1232:	35 b1       	in	r19, 0x05	; 5
    1234:	27 70       	andi	r18, 0x07	; 7
    1236:	bc 01       	movw	r22, r24
    1238:	02 c0       	rjmp	.+4      	; 0x123e <__stack+0x93f>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	2a 95       	dec	r18
    1240:	e2 f7       	brpl	.-8      	; 0x123a <__stack+0x93b>
    1242:	26 2f       	mov	r18, r22
    1244:	20 95       	com	r18
    1246:	23 23       	and	r18, r19
    1248:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    124a:	af e3       	ldi	r26, 0x3F	; 63
    124c:	bf e1       	ldi	r27, 0x1F	; 31
    124e:	11 97       	sbiw	r26, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <__stack+0x94f>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <__stack+0x955>
    1254:	00 00       	nop
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    1256:	21 91       	ld	r18, Z+
namespace zeduino {
	
	namespace util {
		
		inline uint8 get_bit(byte w, uint8 pos) {
			return _GET_BIT(w, pos);
    1258:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    125a:	d8 01       	movw	r26, r16
    125c:	12 96       	adiw	r26, 0x02	; 2
    125e:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1260:	24 ff       	sbrs	r18, 4
    1262:	18 c0       	rjmp	.+48     	; 0x1294 <__stack+0x995>
    1264:	38 30       	cpi	r19, 0x08	; 8
    1266:	58 f4       	brcc	.+22     	; 0x127e <__stack+0x97f>
    1268:	7b b1       	in	r23, 0x0b	; 11
    126a:	37 70       	andi	r19, 0x07	; 7
    126c:	dc 01       	movw	r26, r24
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <__stack+0x975>
    1270:	aa 0f       	add	r26, r26
    1272:	bb 1f       	adc	r27, r27
    1274:	3a 95       	dec	r19
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <__stack+0x971>
    1278:	a7 2b       	or	r26, r23
    127a:	ab b9       	out	0x0b, r26	; 11
    127c:	26 c0       	rjmp	.+76     	; 0x12ca <__stack+0x9cb>
    127e:	75 b1       	in	r23, 0x05	; 5
    1280:	37 70       	andi	r19, 0x07	; 7
    1282:	dc 01       	movw	r26, r24
    1284:	02 c0       	rjmp	.+4      	; 0x128a <__stack+0x98b>
    1286:	aa 0f       	add	r26, r26
    1288:	bb 1f       	adc	r27, r27
    128a:	3a 95       	dec	r19
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <__stack+0x987>
    128e:	a7 2b       	or	r26, r23
    1290:	a5 b9       	out	0x05, r26	; 5
    1292:	1b c0       	rjmp	.+54     	; 0x12ca <__stack+0x9cb>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1294:	38 30       	cpi	r19, 0x08	; 8
    1296:	68 f4       	brcc	.+26     	; 0x12b2 <__stack+0x9b3>
    1298:	7b b1       	in	r23, 0x0b	; 11
    129a:	37 70       	andi	r19, 0x07	; 7
    129c:	dc 01       	movw	r26, r24
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <__stack+0x9a5>
    12a0:	aa 0f       	add	r26, r26
    12a2:	bb 1f       	adc	r27, r27
    12a4:	3a 95       	dec	r19
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <__stack+0x9a1>
    12a8:	3a 2f       	mov	r19, r26
    12aa:	30 95       	com	r19
    12ac:	37 23       	and	r19, r23
    12ae:	3b b9       	out	0x0b, r19	; 11
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <__stack+0x9cb>
    12b2:	75 b1       	in	r23, 0x05	; 5
    12b4:	37 70       	andi	r19, 0x07	; 7
    12b6:	dc 01       	movw	r26, r24
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__stack+0x9bf>
    12ba:	aa 0f       	add	r26, r26
    12bc:	bb 1f       	adc	r27, r27
    12be:	3a 95       	dec	r19
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <__stack+0x9bb>
    12c2:	3a 2f       	mov	r19, r26
    12c4:	30 95       	com	r19
    12c6:	37 23       	and	r19, r23
    12c8:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    12ca:	d8 01       	movw	r26, r16
    12cc:	13 96       	adiw	r26, 0x03	; 3
    12ce:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    12d0:	25 ff       	sbrs	r18, 5
    12d2:	18 c0       	rjmp	.+48     	; 0x1304 <__stack+0xa05>
    12d4:	38 30       	cpi	r19, 0x08	; 8
    12d6:	58 f4       	brcc	.+22     	; 0x12ee <__stack+0x9ef>
    12d8:	7b b1       	in	r23, 0x0b	; 11
    12da:	37 70       	andi	r19, 0x07	; 7
    12dc:	dc 01       	movw	r26, r24
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <__stack+0x9e5>
    12e0:	aa 0f       	add	r26, r26
    12e2:	bb 1f       	adc	r27, r27
    12e4:	3a 95       	dec	r19
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <__stack+0x9e1>
    12e8:	a7 2b       	or	r26, r23
    12ea:	ab b9       	out	0x0b, r26	; 11
    12ec:	26 c0       	rjmp	.+76     	; 0x133a <__stack+0xa3b>
    12ee:	75 b1       	in	r23, 0x05	; 5
    12f0:	37 70       	andi	r19, 0x07	; 7
    12f2:	dc 01       	movw	r26, r24
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <__stack+0x9fb>
    12f6:	aa 0f       	add	r26, r26
    12f8:	bb 1f       	adc	r27, r27
    12fa:	3a 95       	dec	r19
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <__stack+0x9f7>
    12fe:	a7 2b       	or	r26, r23
    1300:	a5 b9       	out	0x05, r26	; 5
    1302:	1b c0       	rjmp	.+54     	; 0x133a <__stack+0xa3b>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1304:	38 30       	cpi	r19, 0x08	; 8
    1306:	68 f4       	brcc	.+26     	; 0x1322 <__stack+0xa23>
    1308:	7b b1       	in	r23, 0x0b	; 11
    130a:	37 70       	andi	r19, 0x07	; 7
    130c:	dc 01       	movw	r26, r24
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <__stack+0xa15>
    1310:	aa 0f       	add	r26, r26
    1312:	bb 1f       	adc	r27, r27
    1314:	3a 95       	dec	r19
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <__stack+0xa11>
    1318:	3a 2f       	mov	r19, r26
    131a:	30 95       	com	r19
    131c:	37 23       	and	r19, r23
    131e:	3b b9       	out	0x0b, r19	; 11
    1320:	0c c0       	rjmp	.+24     	; 0x133a <__stack+0xa3b>
    1322:	75 b1       	in	r23, 0x05	; 5
    1324:	37 70       	andi	r19, 0x07	; 7
    1326:	dc 01       	movw	r26, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <__stack+0xa2f>
    132a:	aa 0f       	add	r26, r26
    132c:	bb 1f       	adc	r27, r27
    132e:	3a 95       	dec	r19
    1330:	e2 f7       	brpl	.-8      	; 0x132a <__stack+0xa2b>
    1332:	3a 2f       	mov	r19, r26
    1334:	30 95       	com	r19
    1336:	37 23       	and	r19, r23
    1338:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    133a:	d8 01       	movw	r26, r16
    133c:	14 96       	adiw	r26, 0x04	; 4
    133e:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1340:	26 ff       	sbrs	r18, 6
    1342:	18 c0       	rjmp	.+48     	; 0x1374 <__stack+0xa75>
    1344:	38 30       	cpi	r19, 0x08	; 8
    1346:	58 f4       	brcc	.+22     	; 0x135e <__stack+0xa5f>
    1348:	7b b1       	in	r23, 0x0b	; 11
    134a:	37 70       	andi	r19, 0x07	; 7
    134c:	dc 01       	movw	r26, r24
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <__stack+0xa55>
    1350:	aa 0f       	add	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	3a 95       	dec	r19
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <__stack+0xa51>
    1358:	a7 2b       	or	r26, r23
    135a:	ab b9       	out	0x0b, r26	; 11
    135c:	26 c0       	rjmp	.+76     	; 0x13aa <__stack+0xaab>
    135e:	75 b1       	in	r23, 0x05	; 5
    1360:	37 70       	andi	r19, 0x07	; 7
    1362:	dc 01       	movw	r26, r24
    1364:	02 c0       	rjmp	.+4      	; 0x136a <__stack+0xa6b>
    1366:	aa 0f       	add	r26, r26
    1368:	bb 1f       	adc	r27, r27
    136a:	3a 95       	dec	r19
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <__stack+0xa67>
    136e:	a7 2b       	or	r26, r23
    1370:	a5 b9       	out	0x05, r26	; 5
    1372:	1b c0       	rjmp	.+54     	; 0x13aa <__stack+0xaab>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1374:	38 30       	cpi	r19, 0x08	; 8
    1376:	68 f4       	brcc	.+26     	; 0x1392 <__stack+0xa93>
    1378:	7b b1       	in	r23, 0x0b	; 11
    137a:	37 70       	andi	r19, 0x07	; 7
    137c:	dc 01       	movw	r26, r24
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <__stack+0xa85>
    1380:	aa 0f       	add	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	3a 95       	dec	r19
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <__stack+0xa81>
    1388:	3a 2f       	mov	r19, r26
    138a:	30 95       	com	r19
    138c:	37 23       	and	r19, r23
    138e:	3b b9       	out	0x0b, r19	; 11
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <__stack+0xaab>
    1392:	75 b1       	in	r23, 0x05	; 5
    1394:	37 70       	andi	r19, 0x07	; 7
    1396:	dc 01       	movw	r26, r24
    1398:	02 c0       	rjmp	.+4      	; 0x139e <__stack+0xa9f>
    139a:	aa 0f       	add	r26, r26
    139c:	bb 1f       	adc	r27, r27
    139e:	3a 95       	dec	r19
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <__stack+0xa9b>
    13a2:	3a 2f       	mov	r19, r26
    13a4:	30 95       	com	r19
    13a6:	37 23       	and	r19, r23
    13a8:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    13aa:	d8 01       	movw	r26, r16
    13ac:	15 96       	adiw	r26, 0x05	; 5
    13ae:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    13b0:	66 23       	and	r22, r22
    13b2:	c4 f4       	brge	.+48     	; 0x13e4 <__stack+0xae5>
    13b4:	38 30       	cpi	r19, 0x08	; 8
    13b6:	58 f4       	brcc	.+22     	; 0x13ce <__stack+0xacf>
    13b8:	ab b1       	in	r26, 0x0b	; 11
    13ba:	37 70       	andi	r19, 0x07	; 7
    13bc:	bc 01       	movw	r22, r24
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <__stack+0xac5>
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	3a 95       	dec	r19
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <__stack+0xac1>
    13c8:	6a 2b       	or	r22, r26
    13ca:	6b b9       	out	0x0b, r22	; 11
    13cc:	26 c0       	rjmp	.+76     	; 0x141a <__stack+0xb1b>
    13ce:	a5 b1       	in	r26, 0x05	; 5
    13d0:	37 70       	andi	r19, 0x07	; 7
    13d2:	bc 01       	movw	r22, r24
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <__stack+0xadb>
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	3a 95       	dec	r19
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <__stack+0xad7>
    13de:	6a 2b       	or	r22, r26
    13e0:	65 b9       	out	0x05, r22	; 5
    13e2:	1b c0       	rjmp	.+54     	; 0x141a <__stack+0xb1b>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    13e4:	38 30       	cpi	r19, 0x08	; 8
    13e6:	68 f4       	brcc	.+26     	; 0x1402 <__stack+0xb03>
    13e8:	6b b1       	in	r22, 0x0b	; 11
    13ea:	37 70       	andi	r19, 0x07	; 7
    13ec:	dc 01       	movw	r26, r24
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <__stack+0xaf5>
    13f0:	aa 0f       	add	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	3a 95       	dec	r19
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <__stack+0xaf1>
    13f8:	3a 2f       	mov	r19, r26
    13fa:	30 95       	com	r19
    13fc:	36 23       	and	r19, r22
    13fe:	3b b9       	out	0x0b, r19	; 11
    1400:	0c c0       	rjmp	.+24     	; 0x141a <__stack+0xb1b>
    1402:	65 b1       	in	r22, 0x05	; 5
    1404:	37 70       	andi	r19, 0x07	; 7
    1406:	dc 01       	movw	r26, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <__stack+0xb0f>
    140a:	aa 0f       	add	r26, r26
    140c:	bb 1f       	adc	r27, r27
    140e:	3a 95       	dec	r19
    1410:	e2 f7       	brpl	.-8      	; 0x140a <__stack+0xb0b>
    1412:	3a 2f       	mov	r19, r26
    1414:	30 95       	com	r19
    1416:	36 23       	and	r19, r22
    1418:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    141a:	d8 01       	movw	r26, r16
    141c:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    141e:	38 30       	cpi	r19, 0x08	; 8
    1420:	58 f4       	brcc	.+22     	; 0x1438 <__stack+0xb39>
    1422:	ab b1       	in	r26, 0x0b	; 11
    1424:	37 70       	andi	r19, 0x07	; 7
    1426:	bc 01       	movw	r22, r24
    1428:	02 c0       	rjmp	.+4      	; 0x142e <__stack+0xb2f>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	3a 95       	dec	r19
    1430:	e2 f7       	brpl	.-8      	; 0x142a <__stack+0xb2b>
    1432:	6a 2b       	or	r22, r26
    1434:	6b b9       	out	0x0b, r22	; 11
    1436:	0a c0       	rjmp	.+20     	; 0x144c <__stack+0xb4d>
    1438:	a5 b1       	in	r26, 0x05	; 5
    143a:	37 70       	andi	r19, 0x07	; 7
    143c:	bc 01       	movw	r22, r24
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <__stack+0xb45>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	3a 95       	dec	r19
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <__stack+0xb41>
    1448:	6a 2b       	or	r22, r26
    144a:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    144c:	d8 01       	movw	r26, r16
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	3c 91       	ld	r19, X
    1452:	38 30       	cpi	r19, 0x08	; 8
    1454:	58 f4       	brcc	.+22     	; 0x146c <__stack+0xb6d>
    1456:	ab b1       	in	r26, 0x0b	; 11
    1458:	37 70       	andi	r19, 0x07	; 7
    145a:	bc 01       	movw	r22, r24
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <__stack+0xb63>
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	3a 95       	dec	r19
    1464:	e2 f7       	brpl	.-8      	; 0x145e <__stack+0xb5f>
    1466:	6a 2b       	or	r22, r26
    1468:	6b b9       	out	0x0b, r22	; 11
    146a:	0a c0       	rjmp	.+20     	; 0x1480 <__stack+0xb81>
    146c:	a5 b1       	in	r26, 0x05	; 5
    146e:	37 70       	andi	r19, 0x07	; 7
    1470:	bc 01       	movw	r22, r24
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <__stack+0xb79>
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	3a 95       	dec	r19
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <__stack+0xb75>
    147c:	6a 2b       	or	r22, r26
    147e:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1480:	b5 e0       	ldi	r27, 0x05	; 5
    1482:	ba 95       	dec	r27
    1484:	f1 f7       	brne	.-4      	; 0x1482 <__stack+0xb83>
    1486:	00 00       	nop
    1488:	d8 01       	movw	r26, r16
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	3c 91       	ld	r19, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    148e:	38 30       	cpi	r19, 0x08	; 8
    1490:	68 f4       	brcc	.+26     	; 0x14ac <__stack+0xbad>
    1492:	6b b1       	in	r22, 0x0b	; 11
    1494:	37 70       	andi	r19, 0x07	; 7
    1496:	dc 01       	movw	r26, r24
    1498:	02 c0       	rjmp	.+4      	; 0x149e <__stack+0xb9f>
    149a:	aa 0f       	add	r26, r26
    149c:	bb 1f       	adc	r27, r27
    149e:	3a 95       	dec	r19
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <__stack+0xb9b>
    14a2:	3a 2f       	mov	r19, r26
    14a4:	30 95       	com	r19
    14a6:	36 23       	and	r19, r22
    14a8:	3b b9       	out	0x0b, r19	; 11
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <__stack+0xbc5>
    14ac:	65 b1       	in	r22, 0x05	; 5
    14ae:	37 70       	andi	r19, 0x07	; 7
    14b0:	dc 01       	movw	r26, r24
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <__stack+0xbb9>
    14b4:	aa 0f       	add	r26, r26
    14b6:	bb 1f       	adc	r27, r27
    14b8:	3a 95       	dec	r19
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <__stack+0xbb5>
    14bc:	3a 2f       	mov	r19, r26
    14be:	30 95       	com	r19
    14c0:	36 23       	and	r19, r22
    14c2:	35 b9       	out	0x05, r19	; 5
    14c4:	af e1       	ldi	r26, 0x1F	; 31
    14c6:	b3 e0       	ldi	r27, 0x03	; 3
    14c8:	11 97       	sbiw	r26, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <__stack+0xbc9>
    14cc:	00 c0       	rjmp	.+0      	; 0x14ce <__stack+0xbcf>
    14ce:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    14d0:	d8 01       	movw	r26, r16
    14d2:	12 96       	adiw	r26, 0x02	; 2
    14d4:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    14d6:	20 ff       	sbrs	r18, 0
    14d8:	18 c0       	rjmp	.+48     	; 0x150a <__stack+0xc0b>
    14da:	38 30       	cpi	r19, 0x08	; 8
    14dc:	58 f4       	brcc	.+22     	; 0x14f4 <__stack+0xbf5>
    14de:	ab b1       	in	r26, 0x0b	; 11
    14e0:	37 70       	andi	r19, 0x07	; 7
    14e2:	bc 01       	movw	r22, r24
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <__stack+0xbeb>
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	3a 95       	dec	r19
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <__stack+0xbe7>
    14ee:	6a 2b       	or	r22, r26
    14f0:	6b b9       	out	0x0b, r22	; 11
    14f2:	26 c0       	rjmp	.+76     	; 0x1540 <__stack+0xc41>
    14f4:	a5 b1       	in	r26, 0x05	; 5
    14f6:	37 70       	andi	r19, 0x07	; 7
    14f8:	bc 01       	movw	r22, r24
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <__stack+0xc01>
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	3a 95       	dec	r19
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <__stack+0xbfd>
    1504:	6a 2b       	or	r22, r26
    1506:	65 b9       	out	0x05, r22	; 5
    1508:	1b c0       	rjmp	.+54     	; 0x1540 <__stack+0xc41>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    150a:	38 30       	cpi	r19, 0x08	; 8
    150c:	68 f4       	brcc	.+26     	; 0x1528 <__stack+0xc29>
    150e:	6b b1       	in	r22, 0x0b	; 11
    1510:	37 70       	andi	r19, 0x07	; 7
    1512:	dc 01       	movw	r26, r24
    1514:	02 c0       	rjmp	.+4      	; 0x151a <__stack+0xc1b>
    1516:	aa 0f       	add	r26, r26
    1518:	bb 1f       	adc	r27, r27
    151a:	3a 95       	dec	r19
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <__stack+0xc17>
    151e:	3a 2f       	mov	r19, r26
    1520:	30 95       	com	r19
    1522:	36 23       	and	r19, r22
    1524:	3b b9       	out	0x0b, r19	; 11
    1526:	0c c0       	rjmp	.+24     	; 0x1540 <__stack+0xc41>
    1528:	65 b1       	in	r22, 0x05	; 5
    152a:	37 70       	andi	r19, 0x07	; 7
    152c:	dc 01       	movw	r26, r24
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <__stack+0xc35>
    1530:	aa 0f       	add	r26, r26
    1532:	bb 1f       	adc	r27, r27
    1534:	3a 95       	dec	r19
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <__stack+0xc31>
    1538:	3a 2f       	mov	r19, r26
    153a:	30 95       	com	r19
    153c:	36 23       	and	r19, r22
    153e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1540:	d8 01       	movw	r26, r16
    1542:	13 96       	adiw	r26, 0x03	; 3
    1544:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1546:	21 ff       	sbrs	r18, 1
    1548:	18 c0       	rjmp	.+48     	; 0x157a <__stack+0xc7b>
    154a:	38 30       	cpi	r19, 0x08	; 8
    154c:	58 f4       	brcc	.+22     	; 0x1564 <__stack+0xc65>
    154e:	ab b1       	in	r26, 0x0b	; 11
    1550:	37 70       	andi	r19, 0x07	; 7
    1552:	bc 01       	movw	r22, r24
    1554:	02 c0       	rjmp	.+4      	; 0x155a <__stack+0xc5b>
    1556:	66 0f       	add	r22, r22
    1558:	77 1f       	adc	r23, r23
    155a:	3a 95       	dec	r19
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <__stack+0xc57>
    155e:	6a 2b       	or	r22, r26
    1560:	6b b9       	out	0x0b, r22	; 11
    1562:	26 c0       	rjmp	.+76     	; 0x15b0 <__stack+0xcb1>
    1564:	a5 b1       	in	r26, 0x05	; 5
    1566:	37 70       	andi	r19, 0x07	; 7
    1568:	bc 01       	movw	r22, r24
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <__stack+0xc71>
    156c:	66 0f       	add	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	3a 95       	dec	r19
    1572:	e2 f7       	brpl	.-8      	; 0x156c <__stack+0xc6d>
    1574:	6a 2b       	or	r22, r26
    1576:	65 b9       	out	0x05, r22	; 5
    1578:	1b c0       	rjmp	.+54     	; 0x15b0 <__stack+0xcb1>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    157a:	38 30       	cpi	r19, 0x08	; 8
    157c:	68 f4       	brcc	.+26     	; 0x1598 <__stack+0xc99>
    157e:	6b b1       	in	r22, 0x0b	; 11
    1580:	37 70       	andi	r19, 0x07	; 7
    1582:	dc 01       	movw	r26, r24
    1584:	02 c0       	rjmp	.+4      	; 0x158a <__stack+0xc8b>
    1586:	aa 0f       	add	r26, r26
    1588:	bb 1f       	adc	r27, r27
    158a:	3a 95       	dec	r19
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <__stack+0xc87>
    158e:	3a 2f       	mov	r19, r26
    1590:	30 95       	com	r19
    1592:	36 23       	and	r19, r22
    1594:	3b b9       	out	0x0b, r19	; 11
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <__stack+0xcb1>
    1598:	65 b1       	in	r22, 0x05	; 5
    159a:	37 70       	andi	r19, 0x07	; 7
    159c:	dc 01       	movw	r26, r24
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <__stack+0xca5>
    15a0:	aa 0f       	add	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	3a 95       	dec	r19
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <__stack+0xca1>
    15a8:	3a 2f       	mov	r19, r26
    15aa:	30 95       	com	r19
    15ac:	36 23       	and	r19, r22
    15ae:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    15b0:	d8 01       	movw	r26, r16
    15b2:	14 96       	adiw	r26, 0x04	; 4
    15b4:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    15b6:	22 ff       	sbrs	r18, 2
    15b8:	18 c0       	rjmp	.+48     	; 0x15ea <__stack+0xceb>
    15ba:	38 30       	cpi	r19, 0x08	; 8
    15bc:	58 f4       	brcc	.+22     	; 0x15d4 <__stack+0xcd5>
    15be:	ab b1       	in	r26, 0x0b	; 11
    15c0:	37 70       	andi	r19, 0x07	; 7
    15c2:	bc 01       	movw	r22, r24
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <__stack+0xccb>
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	3a 95       	dec	r19
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <__stack+0xcc7>
    15ce:	6a 2b       	or	r22, r26
    15d0:	6b b9       	out	0x0b, r22	; 11
    15d2:	26 c0       	rjmp	.+76     	; 0x1620 <__stack+0xd21>
    15d4:	a5 b1       	in	r26, 0x05	; 5
    15d6:	37 70       	andi	r19, 0x07	; 7
    15d8:	bc 01       	movw	r22, r24
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <__stack+0xce1>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	3a 95       	dec	r19
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <__stack+0xcdd>
    15e4:	6a 2b       	or	r22, r26
    15e6:	65 b9       	out	0x05, r22	; 5
    15e8:	1b c0       	rjmp	.+54     	; 0x1620 <__stack+0xd21>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    15ea:	38 30       	cpi	r19, 0x08	; 8
    15ec:	68 f4       	brcc	.+26     	; 0x1608 <__stack+0xd09>
    15ee:	6b b1       	in	r22, 0x0b	; 11
    15f0:	37 70       	andi	r19, 0x07	; 7
    15f2:	dc 01       	movw	r26, r24
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <__stack+0xcfb>
    15f6:	aa 0f       	add	r26, r26
    15f8:	bb 1f       	adc	r27, r27
    15fa:	3a 95       	dec	r19
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <__stack+0xcf7>
    15fe:	3a 2f       	mov	r19, r26
    1600:	30 95       	com	r19
    1602:	36 23       	and	r19, r22
    1604:	3b b9       	out	0x0b, r19	; 11
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <__stack+0xd21>
    1608:	65 b1       	in	r22, 0x05	; 5
    160a:	37 70       	andi	r19, 0x07	; 7
    160c:	dc 01       	movw	r26, r24
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <__stack+0xd15>
    1610:	aa 0f       	add	r26, r26
    1612:	bb 1f       	adc	r27, r27
    1614:	3a 95       	dec	r19
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <__stack+0xd11>
    1618:	3a 2f       	mov	r19, r26
    161a:	30 95       	com	r19
    161c:	36 23       	and	r19, r22
    161e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1620:	d8 01       	movw	r26, r16
    1622:	15 96       	adiw	r26, 0x05	; 5
    1624:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1626:	23 ff       	sbrs	r18, 3
    1628:	1a c0       	rjmp	.+52     	; 0x165e <__stack+0xd5f>
    162a:	38 30       	cpi	r19, 0x08	; 8
    162c:	60 f4       	brcc	.+24     	; 0x1646 <__stack+0xd47>
    162e:	6b b1       	in	r22, 0x0b	; 11
    1630:	37 70       	andi	r19, 0x07	; 7
    1632:	dc 01       	movw	r26, r24
    1634:	02 c0       	rjmp	.+4      	; 0x163a <__stack+0xd3b>
    1636:	aa 0f       	add	r26, r26
    1638:	bb 1f       	adc	r27, r27
    163a:	3a 95       	dec	r19
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <__stack+0xd37>
    163e:	9d 01       	movw	r18, r26
    1640:	26 2b       	or	r18, r22
    1642:	2b b9       	out	0x0b, r18	; 11
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <__stack+0xd95>
    1646:	65 b1       	in	r22, 0x05	; 5
    1648:	37 70       	andi	r19, 0x07	; 7
    164a:	dc 01       	movw	r26, r24
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <__stack+0xd53>
    164e:	aa 0f       	add	r26, r26
    1650:	bb 1f       	adc	r27, r27
    1652:	3a 95       	dec	r19
    1654:	e2 f7       	brpl	.-8      	; 0x164e <__stack+0xd4f>
    1656:	9d 01       	movw	r18, r26
    1658:	26 2b       	or	r18, r22
    165a:	25 b9       	out	0x05, r18	; 5
    165c:	1b c0       	rjmp	.+54     	; 0x1694 <__stack+0xd95>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    165e:	38 30       	cpi	r19, 0x08	; 8
    1660:	68 f4       	brcc	.+26     	; 0x167c <__stack+0xd7d>
    1662:	6b b1       	in	r22, 0x0b	; 11
    1664:	37 70       	andi	r19, 0x07	; 7
    1666:	dc 01       	movw	r26, r24
    1668:	02 c0       	rjmp	.+4      	; 0x166e <__stack+0xd6f>
    166a:	aa 0f       	add	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	3a 95       	dec	r19
    1670:	e2 f7       	brpl	.-8      	; 0x166a <__stack+0xd6b>
    1672:	9d 01       	movw	r18, r26
    1674:	20 95       	com	r18
    1676:	26 23       	and	r18, r22
    1678:	2b b9       	out	0x0b, r18	; 11
    167a:	0c c0       	rjmp	.+24     	; 0x1694 <__stack+0xd95>
    167c:	65 b1       	in	r22, 0x05	; 5
    167e:	37 70       	andi	r19, 0x07	; 7
    1680:	dc 01       	movw	r26, r24
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <__stack+0xd89>
    1684:	aa 0f       	add	r26, r26
    1686:	bb 1f       	adc	r27, r27
    1688:	3a 95       	dec	r19
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <__stack+0xd85>
    168c:	9d 01       	movw	r18, r26
    168e:	20 95       	com	r18
    1690:	26 23       	and	r18, r22
    1692:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1694:	d8 01       	movw	r26, r16
    1696:	11 96       	adiw	r26, 0x01	; 1
    1698:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    169a:	28 30       	cpi	r18, 0x08	; 8
    169c:	60 f4       	brcc	.+24     	; 0x16b6 <__stack+0xdb7>
    169e:	6b b1       	in	r22, 0x0b	; 11
    16a0:	27 70       	andi	r18, 0x07	; 7
    16a2:	dc 01       	movw	r26, r24
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <__stack+0xdab>
    16a6:	aa 0f       	add	r26, r26
    16a8:	bb 1f       	adc	r27, r27
    16aa:	2a 95       	dec	r18
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <__stack+0xda7>
    16ae:	9d 01       	movw	r18, r26
    16b0:	26 2b       	or	r18, r22
    16b2:	2b b9       	out	0x0b, r18	; 11
    16b4:	0b c0       	rjmp	.+22     	; 0x16cc <__stack+0xdcd>
    16b6:	65 b1       	in	r22, 0x05	; 5
    16b8:	27 70       	andi	r18, 0x07	; 7
    16ba:	dc 01       	movw	r26, r24
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <__stack+0xdc3>
    16be:	aa 0f       	add	r26, r26
    16c0:	bb 1f       	adc	r27, r27
    16c2:	2a 95       	dec	r18
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <__stack+0xdbf>
    16c6:	9d 01       	movw	r18, r26
    16c8:	26 2b       	or	r18, r22
    16ca:	25 b9       	out	0x05, r18	; 5
    16cc:	b5 e0       	ldi	r27, 0x05	; 5
    16ce:	ba 95       	dec	r27
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <__stack+0xdcf>
    16d2:	00 00       	nop
    16d4:	d8 01       	movw	r26, r16
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    16da:	28 30       	cpi	r18, 0x08	; 8
    16dc:	68 f4       	brcc	.+26     	; 0x16f8 <__stack+0xdf9>
    16de:	3b b1       	in	r19, 0x0b	; 11
    16e0:	27 70       	andi	r18, 0x07	; 7
    16e2:	bc 01       	movw	r22, r24
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <__stack+0xdeb>
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	2a 95       	dec	r18
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <__stack+0xde7>
    16ee:	26 2f       	mov	r18, r22
    16f0:	20 95       	com	r18
    16f2:	23 23       	and	r18, r19
    16f4:	2b b9       	out	0x0b, r18	; 11
    16f6:	0c c0       	rjmp	.+24     	; 0x1710 <__stack+0xe11>
    16f8:	35 b1       	in	r19, 0x05	; 5
    16fa:	27 70       	andi	r18, 0x07	; 7
    16fc:	bc 01       	movw	r22, r24
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <__stack+0xe05>
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	2a 95       	dec	r18
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <__stack+0xe01>
    1708:	26 2f       	mov	r18, r22
    170a:	20 95       	com	r18
    170c:	23 23       	and	r18, r19
    170e:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1710:	af e3       	ldi	r26, 0x3F	; 63
    1712:	bf e1       	ldi	r27, 0x1F	; 31
    1714:	11 97       	sbiw	r26, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <__stack+0xe15>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <__stack+0xe1b>
    171a:	00 00       	nop
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    171c:	4f 5f       	subi	r20, 0xFF	; 255
    171e:	5f 4f       	sbci	r21, 0xFF	; 255
    1720:	40 32       	cpi	r20, 0x20	; 32
    1722:	51 05       	cpc	r21, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <__stack+0xe29>
    1726:	fc cb       	rjmp	.-2056   	; 0xf20 <__stack+0x621>
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <__stack+0xe33>
    172e:	42 e0       	ldi	r20, 0x02	; 2
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
	lcd->Write("Zeduino    DHT11Iniciando  ");
	
	for (int i = 0; i < 2; i++) {
		lcd->Write('.');
    1736:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <lcd>
    173a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	88 30       	cpi	r24, 0x08	; 8
    1742:	68 f4       	brcc	.+26     	; 0x175e <__stack+0xe5f>
    1744:	9b b1       	in	r25, 0x0b	; 11
    1746:	87 70       	andi	r24, 0x07	; 7
    1748:	b9 01       	movw	r22, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <__stack+0xe51>
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <__stack+0xe4d>
    1754:	86 2f       	mov	r24, r22
    1756:	80 95       	com	r24
    1758:	89 23       	and	r24, r25
    175a:	8b b9       	out	0x0b, r24	; 11
    175c:	0c c0       	rjmp	.+24     	; 0x1776 <__stack+0xe77>
    175e:	95 b1       	in	r25, 0x05	; 5
    1760:	87 70       	andi	r24, 0x07	; 7
    1762:	b9 01       	movw	r22, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <__stack+0xe6b>
    1766:	66 0f       	add	r22, r22
    1768:	77 1f       	adc	r23, r23
    176a:	8a 95       	dec	r24
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <__stack+0xe67>
    176e:	86 2f       	mov	r24, r22
    1770:	80 95       	com	r24
    1772:	89 23       	and	r24, r25
    1774:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    1776:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1778:	88 30       	cpi	r24, 0x08	; 8
    177a:	60 f4       	brcc	.+24     	; 0x1794 <__stack+0xe95>
    177c:	6b b1       	in	r22, 0x0b	; 11
    177e:	87 70       	andi	r24, 0x07	; 7
    1780:	d9 01       	movw	r26, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <__stack+0xe89>
    1784:	aa 0f       	add	r26, r26
    1786:	bb 1f       	adc	r27, r27
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <__stack+0xe85>
    178c:	cd 01       	movw	r24, r26
    178e:	86 2b       	or	r24, r22
    1790:	8b b9       	out	0x0b, r24	; 11
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <__stack+0xeab>
    1794:	65 b1       	in	r22, 0x05	; 5
    1796:	87 70       	andi	r24, 0x07	; 7
    1798:	d9 01       	movw	r26, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <__stack+0xea1>
    179c:	aa 0f       	add	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	8a 95       	dec	r24
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <__stack+0xe9d>
    17a4:	cd 01       	movw	r24, r26
    17a6:	86 2b       	or	r24, r22
    17a8:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    17aa:	84 81       	ldd	r24, Z+4	; 0x04
			else _CLEAR_BIT(fcrof(port), nmr(port));
    17ac:	88 30       	cpi	r24, 0x08	; 8
    17ae:	68 f4       	brcc	.+26     	; 0x17ca <__stack+0xecb>
    17b0:	9b b1       	in	r25, 0x0b	; 11
    17b2:	87 70       	andi	r24, 0x07	; 7
    17b4:	b9 01       	movw	r22, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <__stack+0xebd>
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <__stack+0xeb9>
    17c0:	86 2f       	mov	r24, r22
    17c2:	80 95       	com	r24
    17c4:	89 23       	and	r24, r25
    17c6:	8b b9       	out	0x0b, r24	; 11
    17c8:	0c c0       	rjmp	.+24     	; 0x17e2 <__stack+0xee3>
    17ca:	95 b1       	in	r25, 0x05	; 5
    17cc:	87 70       	andi	r24, 0x07	; 7
    17ce:	b9 01       	movw	r22, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <__stack+0xed7>
    17d2:	66 0f       	add	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	8a 95       	dec	r24
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <__stack+0xed3>
    17da:	86 2f       	mov	r24, r22
    17dc:	80 95       	com	r24
    17de:	89 23       	and	r24, r25
    17e0:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    17e2:	85 81       	ldd	r24, Z+5	; 0x05
    17e4:	88 30       	cpi	r24, 0x08	; 8
    17e6:	68 f4       	brcc	.+26     	; 0x1802 <__stack+0xf03>
    17e8:	9b b1       	in	r25, 0x0b	; 11
    17ea:	87 70       	andi	r24, 0x07	; 7
    17ec:	b9 01       	movw	r22, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <__stack+0xef5>
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	8a 95       	dec	r24
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <__stack+0xef1>
    17f8:	86 2f       	mov	r24, r22
    17fa:	80 95       	com	r24
    17fc:	89 23       	and	r24, r25
    17fe:	8b b9       	out	0x0b, r24	; 11
    1800:	0c c0       	rjmp	.+24     	; 0x181a <__stack+0xf1b>
    1802:	95 b1       	in	r25, 0x05	; 5
    1804:	87 70       	andi	r24, 0x07	; 7
    1806:	b9 01       	movw	r22, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <__stack+0xf0f>
    180a:	66 0f       	add	r22, r22
    180c:	77 1f       	adc	r23, r23
    180e:	8a 95       	dec	r24
    1810:	e2 f7       	brpl	.-8      	; 0x180a <__stack+0xf0b>
    1812:	86 2f       	mov	r24, r22
    1814:	80 95       	com	r24
    1816:	89 23       	and	r24, r25
    1818:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    181a:	80 81       	ld	r24, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    181c:	88 30       	cpi	r24, 0x08	; 8
    181e:	60 f4       	brcc	.+24     	; 0x1838 <__stack+0xf39>
    1820:	6b b1       	in	r22, 0x0b	; 11
    1822:	87 70       	andi	r24, 0x07	; 7
    1824:	d9 01       	movw	r26, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <__stack+0xf2d>
    1828:	aa 0f       	add	r26, r26
    182a:	bb 1f       	adc	r27, r27
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <__stack+0xf29>
    1830:	cd 01       	movw	r24, r26
    1832:	86 2b       	or	r24, r22
    1834:	8b b9       	out	0x0b, r24	; 11
    1836:	0b c0       	rjmp	.+22     	; 0x184e <__stack+0xf4f>
    1838:	65 b1       	in	r22, 0x05	; 5
    183a:	87 70       	andi	r24, 0x07	; 7
    183c:	d9 01       	movw	r26, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <__stack+0xf45>
    1840:	aa 0f       	add	r26, r26
    1842:	bb 1f       	adc	r27, r27
    1844:	8a 95       	dec	r24
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <__stack+0xf41>
    1848:	cd 01       	movw	r24, r26
    184a:	86 2b       	or	r24, r22
    184c:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    184e:	81 81       	ldd	r24, Z+1	; 0x01
    1850:	88 30       	cpi	r24, 0x08	; 8
    1852:	60 f4       	brcc	.+24     	; 0x186c <__stack+0xf6d>
    1854:	6b b1       	in	r22, 0x0b	; 11
    1856:	87 70       	andi	r24, 0x07	; 7
    1858:	d9 01       	movw	r26, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <__stack+0xf61>
    185c:	aa 0f       	add	r26, r26
    185e:	bb 1f       	adc	r27, r27
    1860:	8a 95       	dec	r24
    1862:	e2 f7       	brpl	.-8      	; 0x185c <__stack+0xf5d>
    1864:	cd 01       	movw	r24, r26
    1866:	86 2b       	or	r24, r22
    1868:	8b b9       	out	0x0b, r24	; 11
    186a:	0b c0       	rjmp	.+22     	; 0x1882 <__stack+0xf83>
    186c:	65 b1       	in	r22, 0x05	; 5
    186e:	87 70       	andi	r24, 0x07	; 7
    1870:	d9 01       	movw	r26, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <__stack+0xf79>
    1874:	aa 0f       	add	r26, r26
    1876:	bb 1f       	adc	r27, r27
    1878:	8a 95       	dec	r24
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <__stack+0xf75>
    187c:	cd 01       	movw	r24, r26
    187e:	86 2b       	or	r24, r22
    1880:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1882:	b5 e0       	ldi	r27, 0x05	; 5
    1884:	ba 95       	dec	r27
    1886:	f1 f7       	brne	.-4      	; 0x1884 <__stack+0xf85>
    1888:	00 00       	nop
    188a:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    188c:	88 30       	cpi	r24, 0x08	; 8
    188e:	68 f4       	brcc	.+26     	; 0x18aa <__stack+0xfab>
    1890:	9b b1       	in	r25, 0x0b	; 11
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	b9 01       	movw	r22, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <__stack+0xf9d>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	8a 95       	dec	r24
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <__stack+0xf99>
    18a0:	86 2f       	mov	r24, r22
    18a2:	80 95       	com	r24
    18a4:	89 23       	and	r24, r25
    18a6:	8b b9       	out	0x0b, r24	; 11
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <__stack+0xfc3>
    18aa:	95 b1       	in	r25, 0x05	; 5
    18ac:	87 70       	andi	r24, 0x07	; 7
    18ae:	b9 01       	movw	r22, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <__stack+0xfb7>
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	8a 95       	dec	r24
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <__stack+0xfb3>
    18ba:	86 2f       	mov	r24, r22
    18bc:	80 95       	com	r24
    18be:	89 23       	and	r24, r25
    18c0:	85 b9       	out	0x05, r24	; 5
    18c2:	8f e1       	ldi	r24, 0x1F	; 31
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <__stack+0xfc7>
    18ca:	00 c0       	rjmp	.+0      	; 0x18cc <__stack+0xfcd>
    18cc:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	68 f4       	brcc	.+26     	; 0x18ee <__stack+0xfef>
    18d4:	9b b1       	in	r25, 0x0b	; 11
    18d6:	87 70       	andi	r24, 0x07	; 7
    18d8:	b9 01       	movw	r22, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <__stack+0xfe1>
    18dc:	66 0f       	add	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	8a 95       	dec	r24
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <__stack+0xfdd>
    18e4:	86 2f       	mov	r24, r22
    18e6:	80 95       	com	r24
    18e8:	89 23       	and	r24, r25
    18ea:	8b b9       	out	0x0b, r24	; 11
    18ec:	0c c0       	rjmp	.+24     	; 0x1906 <__stack+0x1007>
    18ee:	95 b1       	in	r25, 0x05	; 5
    18f0:	87 70       	andi	r24, 0x07	; 7
    18f2:	b9 01       	movw	r22, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <__stack+0xffb>
    18f6:	66 0f       	add	r22, r22
    18f8:	77 1f       	adc	r23, r23
    18fa:	8a 95       	dec	r24
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <__stack+0xff7>
    18fe:	86 2f       	mov	r24, r22
    1900:	80 95       	com	r24
    1902:	89 23       	and	r24, r25
    1904:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1906:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1908:	88 30       	cpi	r24, 0x08	; 8
    190a:	60 f4       	brcc	.+24     	; 0x1924 <__stack+0x1025>
    190c:	6b b1       	in	r22, 0x0b	; 11
    190e:	87 70       	andi	r24, 0x07	; 7
    1910:	d9 01       	movw	r26, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <__stack+0x1019>
    1914:	aa 0f       	add	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	8a 95       	dec	r24
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <__stack+0x1015>
    191c:	cd 01       	movw	r24, r26
    191e:	86 2b       	or	r24, r22
    1920:	8b b9       	out	0x0b, r24	; 11
    1922:	0b c0       	rjmp	.+22     	; 0x193a <__stack+0x103b>
    1924:	65 b1       	in	r22, 0x05	; 5
    1926:	87 70       	andi	r24, 0x07	; 7
    1928:	d9 01       	movw	r26, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <__stack+0x1031>
    192c:	aa 0f       	add	r26, r26
    192e:	bb 1f       	adc	r27, r27
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <__stack+0x102d>
    1934:	cd 01       	movw	r24, r26
    1936:	86 2b       	or	r24, r22
    1938:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	88 30       	cpi	r24, 0x08	; 8
    193e:	60 f4       	brcc	.+24     	; 0x1958 <__stack+0x1059>
    1940:	6b b1       	in	r22, 0x0b	; 11
    1942:	87 70       	andi	r24, 0x07	; 7
    1944:	d9 01       	movw	r26, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <__stack+0x104d>
    1948:	aa 0f       	add	r26, r26
    194a:	bb 1f       	adc	r27, r27
    194c:	8a 95       	dec	r24
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <__stack+0x1049>
    1950:	cd 01       	movw	r24, r26
    1952:	86 2b       	or	r24, r22
    1954:	8b b9       	out	0x0b, r24	; 11
    1956:	0b c0       	rjmp	.+22     	; 0x196e <__stack+0x106f>
    1958:	65 b1       	in	r22, 0x05	; 5
    195a:	87 70       	andi	r24, 0x07	; 7
    195c:	d9 01       	movw	r26, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <__stack+0x1065>
    1960:	aa 0f       	add	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	8a 95       	dec	r24
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <__stack+0x1061>
    1968:	cd 01       	movw	r24, r26
    196a:	86 2b       	or	r24, r22
    196c:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    196e:	85 81       	ldd	r24, Z+5	; 0x05
    1970:	88 30       	cpi	r24, 0x08	; 8
    1972:	60 f4       	brcc	.+24     	; 0x198c <__stack+0x108d>
    1974:	6b b1       	in	r22, 0x0b	; 11
    1976:	87 70       	andi	r24, 0x07	; 7
    1978:	d9 01       	movw	r26, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <__stack+0x1081>
    197c:	aa 0f       	add	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	8a 95       	dec	r24
    1982:	e2 f7       	brpl	.-8      	; 0x197c <__stack+0x107d>
    1984:	cd 01       	movw	r24, r26
    1986:	86 2b       	or	r24, r22
    1988:	8b b9       	out	0x0b, r24	; 11
    198a:	0b c0       	rjmp	.+22     	; 0x19a2 <__stack+0x10a3>
    198c:	65 b1       	in	r22, 0x05	; 5
    198e:	87 70       	andi	r24, 0x07	; 7
    1990:	d9 01       	movw	r26, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <__stack+0x1099>
    1994:	aa 0f       	add	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	8a 95       	dec	r24
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <__stack+0x1095>
    199c:	cd 01       	movw	r24, r26
    199e:	86 2b       	or	r24, r22
    19a0:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    19a2:	81 81       	ldd	r24, Z+1	; 0x01
    19a4:	88 30       	cpi	r24, 0x08	; 8
    19a6:	60 f4       	brcc	.+24     	; 0x19c0 <__stack+0x10c1>
    19a8:	6b b1       	in	r22, 0x0b	; 11
    19aa:	87 70       	andi	r24, 0x07	; 7
    19ac:	d9 01       	movw	r26, r18
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <__stack+0x10b5>
    19b0:	aa 0f       	add	r26, r26
    19b2:	bb 1f       	adc	r27, r27
    19b4:	8a 95       	dec	r24
    19b6:	e2 f7       	brpl	.-8      	; 0x19b0 <__stack+0x10b1>
    19b8:	cd 01       	movw	r24, r26
    19ba:	86 2b       	or	r24, r22
    19bc:	8b b9       	out	0x0b, r24	; 11
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <__stack+0x10d7>
    19c0:	65 b1       	in	r22, 0x05	; 5
    19c2:	87 70       	andi	r24, 0x07	; 7
    19c4:	d9 01       	movw	r26, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <__stack+0x10cd>
    19c8:	aa 0f       	add	r26, r26
    19ca:	bb 1f       	adc	r27, r27
    19cc:	8a 95       	dec	r24
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <__stack+0x10c9>
    19d0:	cd 01       	movw	r24, r26
    19d2:	86 2b       	or	r24, r22
    19d4:	85 b9       	out	0x05, r24	; 5
    19d6:	b5 e0       	ldi	r27, 0x05	; 5
    19d8:	ba 95       	dec	r27
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <__stack+0x10d9>
    19dc:	00 00       	nop
    19de:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	68 f4       	brcc	.+26     	; 0x19fe <__stack+0x10ff>
    19e4:	9b b1       	in	r25, 0x0b	; 11
    19e6:	87 70       	andi	r24, 0x07	; 7
    19e8:	b9 01       	movw	r22, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <__stack+0x10f1>
    19ec:	66 0f       	add	r22, r22
    19ee:	77 1f       	adc	r23, r23
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <__stack+0x10ed>
    19f4:	86 2f       	mov	r24, r22
    19f6:	80 95       	com	r24
    19f8:	89 23       	and	r24, r25
    19fa:	8b b9       	out	0x0b, r24	; 11
    19fc:	0c c0       	rjmp	.+24     	; 0x1a16 <__stack+0x1117>
    19fe:	95 b1       	in	r25, 0x05	; 5
    1a00:	87 70       	andi	r24, 0x07	; 7
    1a02:	b9 01       	movw	r22, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <__stack+0x110b>
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <__stack+0x1107>
    1a0e:	86 2f       	mov	r24, r22
    1a10:	80 95       	com	r24
    1a12:	89 23       	and	r24, r25
    1a14:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a16:	ef e3       	ldi	r30, 0x3F	; 63
    1a18:	ff e1       	ldi	r31, 0x1F	; 31
    1a1a:	31 97       	sbiw	r30, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <__stack+0x111b>
    1a1e:	00 c0       	rjmp	.+0      	; 0x1a20 <__stack+0x1121>
    1a20:	00 00       	nop
    1a22:	84 ef       	ldi	r24, 0xF4	; 244
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	af e9       	ldi	r26, 0x9F	; 159
    1a28:	bf e0       	ldi	r27, 0x0F	; 15
    1a2a:	11 97       	sbiw	r26, 0x01	; 1
    1a2c:	f1 f7       	brne	.-4      	; 0x1a2a <__stack+0x112b>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <__stack+0x1131>
    1a30:	00 00       	nop
    1a32:	01 97       	sbiw	r24, 0x01	; 1
		inline uint8 clear_bit(byte w, uint8 pos) {
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			while (time > 0) {
    1a34:	c1 f7       	brne	.-16     	; 0x1a26 <__stack+0x1127>
    1a36:	41 50       	subi	r20, 0x01	; 1
    1a38:	51 09       	sbc	r21, r1
	
	EPort ports[] = {P5, P4, P3, P2};
	lcd = new component::DisplayLCD(P12, P11, ports);
	lcd->Write("Zeduino    DHT11Iniciando  ");
	
	for (int i = 0; i < 2; i++) {
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <__stack+0x113f>
    1a3c:	7c ce       	rjmp	.-776    	; 0x1736 <__stack+0xe37>
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int32_t int32;

void * operator new(size_t size) {
	return malloc(size);	
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 85 22 	call	0x450a	; 0x450a <malloc>
		
		class DHT11 : public Component {
			
			private: EPort _port;
		
			public: DHT11(EPort port) : _port(port) {}
    1a46:	2d e0       	ldi	r18, 0x0D	; 13
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 83       	st	Z, r18
		lcd->Write('.');
		util::delay_ms(500);
	}
	
	dht11 = new component::DHT11(P13);
    1a4c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__data_end+0x1>
    1a50:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
    1a54:	43 e0       	ldi	r20, 0x03	; 3
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	21 e0       	ldi	r18, 0x01	; 1
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
	
	for (int i = 0; i < 3; i++) {
		lcd->Write('.');
    1a5c:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <lcd>
    1a60:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	68 f4       	brcc	.+26     	; 0x1a84 <__stack+0x1185>
    1a6a:	9b b1       	in	r25, 0x0b	; 11
    1a6c:	87 70       	andi	r24, 0x07	; 7
    1a6e:	b9 01       	movw	r22, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <__stack+0x1177>
    1a72:	66 0f       	add	r22, r22
    1a74:	77 1f       	adc	r23, r23
    1a76:	8a 95       	dec	r24
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <__stack+0x1173>
    1a7a:	86 2f       	mov	r24, r22
    1a7c:	80 95       	com	r24
    1a7e:	89 23       	and	r24, r25
    1a80:	8b b9       	out	0x0b, r24	; 11
    1a82:	0c c0       	rjmp	.+24     	; 0x1a9c <__stack+0x119d>
    1a84:	95 b1       	in	r25, 0x05	; 5
    1a86:	87 70       	andi	r24, 0x07	; 7
    1a88:	b9 01       	movw	r22, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <__stack+0x1191>
    1a8c:	66 0f       	add	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	8a 95       	dec	r24
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <__stack+0x118d>
    1a94:	86 2f       	mov	r24, r22
    1a96:	80 95       	com	r24
    1a98:	89 23       	and	r24, r25
    1a9a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    1a9c:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	60 f4       	brcc	.+24     	; 0x1aba <__stack+0x11bb>
    1aa2:	6b b1       	in	r22, 0x0b	; 11
    1aa4:	87 70       	andi	r24, 0x07	; 7
    1aa6:	d9 01       	movw	r26, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <__stack+0x11af>
    1aaa:	aa 0f       	add	r26, r26
    1aac:	bb 1f       	adc	r27, r27
    1aae:	8a 95       	dec	r24
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <__stack+0x11ab>
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	86 2b       	or	r24, r22
    1ab6:	8b b9       	out	0x0b, r24	; 11
    1ab8:	0b c0       	rjmp	.+22     	; 0x1ad0 <__stack+0x11d1>
    1aba:	65 b1       	in	r22, 0x05	; 5
    1abc:	87 70       	andi	r24, 0x07	; 7
    1abe:	d9 01       	movw	r26, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <__stack+0x11c7>
    1ac2:	aa 0f       	add	r26, r26
    1ac4:	bb 1f       	adc	r27, r27
    1ac6:	8a 95       	dec	r24
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <__stack+0x11c3>
    1aca:	cd 01       	movw	r24, r26
    1acc:	86 2b       	or	r24, r22
    1ace:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    1ad0:	84 81       	ldd	r24, Z+4	; 0x04
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1ad2:	88 30       	cpi	r24, 0x08	; 8
    1ad4:	68 f4       	brcc	.+26     	; 0x1af0 <__stack+0x11f1>
    1ad6:	9b b1       	in	r25, 0x0b	; 11
    1ad8:	87 70       	andi	r24, 0x07	; 7
    1ada:	b9 01       	movw	r22, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <__stack+0x11e3>
    1ade:	66 0f       	add	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	8a 95       	dec	r24
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <__stack+0x11df>
    1ae6:	86 2f       	mov	r24, r22
    1ae8:	80 95       	com	r24
    1aea:	89 23       	and	r24, r25
    1aec:	8b b9       	out	0x0b, r24	; 11
    1aee:	0c c0       	rjmp	.+24     	; 0x1b08 <__stack+0x1209>
    1af0:	95 b1       	in	r25, 0x05	; 5
    1af2:	87 70       	andi	r24, 0x07	; 7
    1af4:	b9 01       	movw	r22, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <__stack+0x11fd>
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <__stack+0x11f9>
    1b00:	86 2f       	mov	r24, r22
    1b02:	80 95       	com	r24
    1b04:	89 23       	and	r24, r25
    1b06:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    1b08:	85 81       	ldd	r24, Z+5	; 0x05
    1b0a:	88 30       	cpi	r24, 0x08	; 8
    1b0c:	68 f4       	brcc	.+26     	; 0x1b28 <__stack+0x1229>
    1b0e:	9b b1       	in	r25, 0x0b	; 11
    1b10:	87 70       	andi	r24, 0x07	; 7
    1b12:	b9 01       	movw	r22, r18
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <__stack+0x121b>
    1b16:	66 0f       	add	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	8a 95       	dec	r24
    1b1c:	e2 f7       	brpl	.-8      	; 0x1b16 <__stack+0x1217>
    1b1e:	86 2f       	mov	r24, r22
    1b20:	80 95       	com	r24
    1b22:	89 23       	and	r24, r25
    1b24:	8b b9       	out	0x0b, r24	; 11
    1b26:	0c c0       	rjmp	.+24     	; 0x1b40 <__stack+0x1241>
    1b28:	95 b1       	in	r25, 0x05	; 5
    1b2a:	87 70       	andi	r24, 0x07	; 7
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <__stack+0x1235>
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	8a 95       	dec	r24
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <__stack+0x1231>
    1b38:	86 2f       	mov	r24, r22
    1b3a:	80 95       	com	r24
    1b3c:	89 23       	and	r24, r25
    1b3e:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    1b40:	80 81       	ld	r24, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1b42:	88 30       	cpi	r24, 0x08	; 8
    1b44:	60 f4       	brcc	.+24     	; 0x1b5e <__stack+0x125f>
    1b46:	6b b1       	in	r22, 0x0b	; 11
    1b48:	87 70       	andi	r24, 0x07	; 7
    1b4a:	d9 01       	movw	r26, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <__stack+0x1253>
    1b4e:	aa 0f       	add	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <__stack+0x124f>
    1b56:	cd 01       	movw	r24, r26
    1b58:	86 2b       	or	r24, r22
    1b5a:	8b b9       	out	0x0b, r24	; 11
    1b5c:	0b c0       	rjmp	.+22     	; 0x1b74 <__stack+0x1275>
    1b5e:	65 b1       	in	r22, 0x05	; 5
    1b60:	87 70       	andi	r24, 0x07	; 7
    1b62:	d9 01       	movw	r26, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <__stack+0x126b>
    1b66:	aa 0f       	add	r26, r26
    1b68:	bb 1f       	adc	r27, r27
    1b6a:	8a 95       	dec	r24
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <__stack+0x1267>
    1b6e:	cd 01       	movw	r24, r26
    1b70:	86 2b       	or	r24, r22
    1b72:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1b74:	81 81       	ldd	r24, Z+1	; 0x01
    1b76:	88 30       	cpi	r24, 0x08	; 8
    1b78:	60 f4       	brcc	.+24     	; 0x1b92 <__stack+0x1293>
    1b7a:	6b b1       	in	r22, 0x0b	; 11
    1b7c:	87 70       	andi	r24, 0x07	; 7
    1b7e:	d9 01       	movw	r26, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <__stack+0x1287>
    1b82:	aa 0f       	add	r26, r26
    1b84:	bb 1f       	adc	r27, r27
    1b86:	8a 95       	dec	r24
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <__stack+0x1283>
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	86 2b       	or	r24, r22
    1b8e:	8b b9       	out	0x0b, r24	; 11
    1b90:	0b c0       	rjmp	.+22     	; 0x1ba8 <__stack+0x12a9>
    1b92:	65 b1       	in	r22, 0x05	; 5
    1b94:	87 70       	andi	r24, 0x07	; 7
    1b96:	d9 01       	movw	r26, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <__stack+0x129f>
    1b9a:	aa 0f       	add	r26, r26
    1b9c:	bb 1f       	adc	r27, r27
    1b9e:	8a 95       	dec	r24
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <__stack+0x129b>
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	86 2b       	or	r24, r22
    1ba6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba8:	b5 e0       	ldi	r27, 0x05	; 5
    1baa:	ba 95       	dec	r27
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <__stack+0x12ab>
    1bae:	00 00       	nop
    1bb0:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	68 f4       	brcc	.+26     	; 0x1bd0 <__stack+0x12d1>
    1bb6:	9b b1       	in	r25, 0x0b	; 11
    1bb8:	87 70       	andi	r24, 0x07	; 7
    1bba:	b9 01       	movw	r22, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <__stack+0x12c3>
    1bbe:	66 0f       	add	r22, r22
    1bc0:	77 1f       	adc	r23, r23
    1bc2:	8a 95       	dec	r24
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <__stack+0x12bf>
    1bc6:	86 2f       	mov	r24, r22
    1bc8:	80 95       	com	r24
    1bca:	89 23       	and	r24, r25
    1bcc:	8b b9       	out	0x0b, r24	; 11
    1bce:	0c c0       	rjmp	.+24     	; 0x1be8 <__stack+0x12e9>
    1bd0:	95 b1       	in	r25, 0x05	; 5
    1bd2:	87 70       	andi	r24, 0x07	; 7
    1bd4:	b9 01       	movw	r22, r18
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <__stack+0x12dd>
    1bd8:	66 0f       	add	r22, r22
    1bda:	77 1f       	adc	r23, r23
    1bdc:	8a 95       	dec	r24
    1bde:	e2 f7       	brpl	.-8      	; 0x1bd8 <__stack+0x12d9>
    1be0:	86 2f       	mov	r24, r22
    1be2:	80 95       	com	r24
    1be4:	89 23       	and	r24, r25
    1be6:	85 b9       	out	0x05, r24	; 5
    1be8:	8f e1       	ldi	r24, 0x1F	; 31
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <__stack+0x12ed>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <__stack+0x12f3>
    1bf2:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	88 30       	cpi	r24, 0x08	; 8
    1bf8:	68 f4       	brcc	.+26     	; 0x1c14 <__stack+0x1315>
    1bfa:	9b b1       	in	r25, 0x0b	; 11
    1bfc:	87 70       	andi	r24, 0x07	; 7
    1bfe:	b9 01       	movw	r22, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <__stack+0x1307>
    1c02:	66 0f       	add	r22, r22
    1c04:	77 1f       	adc	r23, r23
    1c06:	8a 95       	dec	r24
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <__stack+0x1303>
    1c0a:	86 2f       	mov	r24, r22
    1c0c:	80 95       	com	r24
    1c0e:	89 23       	and	r24, r25
    1c10:	8b b9       	out	0x0b, r24	; 11
    1c12:	0c c0       	rjmp	.+24     	; 0x1c2c <__stack+0x132d>
    1c14:	95 b1       	in	r25, 0x05	; 5
    1c16:	87 70       	andi	r24, 0x07	; 7
    1c18:	b9 01       	movw	r22, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <__stack+0x1321>
    1c1c:	66 0f       	add	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <__stack+0x131d>
    1c24:	86 2f       	mov	r24, r22
    1c26:	80 95       	com	r24
    1c28:	89 23       	and	r24, r25
    1c2a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1c2c:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1c2e:	88 30       	cpi	r24, 0x08	; 8
    1c30:	60 f4       	brcc	.+24     	; 0x1c4a <__stack+0x134b>
    1c32:	6b b1       	in	r22, 0x0b	; 11
    1c34:	87 70       	andi	r24, 0x07	; 7
    1c36:	d9 01       	movw	r26, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <__stack+0x133f>
    1c3a:	aa 0f       	add	r26, r26
    1c3c:	bb 1f       	adc	r27, r27
    1c3e:	8a 95       	dec	r24
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <__stack+0x133b>
    1c42:	cd 01       	movw	r24, r26
    1c44:	86 2b       	or	r24, r22
    1c46:	8b b9       	out	0x0b, r24	; 11
    1c48:	0b c0       	rjmp	.+22     	; 0x1c60 <__stack+0x1361>
    1c4a:	65 b1       	in	r22, 0x05	; 5
    1c4c:	87 70       	andi	r24, 0x07	; 7
    1c4e:	d9 01       	movw	r26, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <__stack+0x1357>
    1c52:	aa 0f       	add	r26, r26
    1c54:	bb 1f       	adc	r27, r27
    1c56:	8a 95       	dec	r24
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <__stack+0x1353>
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	86 2b       	or	r24, r22
    1c5e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    1c60:	84 81       	ldd	r24, Z+4	; 0x04
    1c62:	88 30       	cpi	r24, 0x08	; 8
    1c64:	60 f4       	brcc	.+24     	; 0x1c7e <__stack+0x137f>
    1c66:	6b b1       	in	r22, 0x0b	; 11
    1c68:	87 70       	andi	r24, 0x07	; 7
    1c6a:	d9 01       	movw	r26, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <__stack+0x1373>
    1c6e:	aa 0f       	add	r26, r26
    1c70:	bb 1f       	adc	r27, r27
    1c72:	8a 95       	dec	r24
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <__stack+0x136f>
    1c76:	cd 01       	movw	r24, r26
    1c78:	86 2b       	or	r24, r22
    1c7a:	8b b9       	out	0x0b, r24	; 11
    1c7c:	0b c0       	rjmp	.+22     	; 0x1c94 <__stack+0x1395>
    1c7e:	65 b1       	in	r22, 0x05	; 5
    1c80:	87 70       	andi	r24, 0x07	; 7
    1c82:	d9 01       	movw	r26, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <__stack+0x138b>
    1c86:	aa 0f       	add	r26, r26
    1c88:	bb 1f       	adc	r27, r27
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <__stack+0x1387>
    1c8e:	cd 01       	movw	r24, r26
    1c90:	86 2b       	or	r24, r22
    1c92:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    1c94:	85 81       	ldd	r24, Z+5	; 0x05
    1c96:	88 30       	cpi	r24, 0x08	; 8
    1c98:	60 f4       	brcc	.+24     	; 0x1cb2 <__stack+0x13b3>
    1c9a:	6b b1       	in	r22, 0x0b	; 11
    1c9c:	87 70       	andi	r24, 0x07	; 7
    1c9e:	d9 01       	movw	r26, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <__stack+0x13a7>
    1ca2:	aa 0f       	add	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	8a 95       	dec	r24
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <__stack+0x13a3>
    1caa:	cd 01       	movw	r24, r26
    1cac:	86 2b       	or	r24, r22
    1cae:	8b b9       	out	0x0b, r24	; 11
    1cb0:	0b c0       	rjmp	.+22     	; 0x1cc8 <__stack+0x13c9>
    1cb2:	65 b1       	in	r22, 0x05	; 5
    1cb4:	87 70       	andi	r24, 0x07	; 7
    1cb6:	d9 01       	movw	r26, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <__stack+0x13bf>
    1cba:	aa 0f       	add	r26, r26
    1cbc:	bb 1f       	adc	r27, r27
    1cbe:	8a 95       	dec	r24
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <__stack+0x13bb>
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	86 2b       	or	r24, r22
    1cc6:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1cc8:	81 81       	ldd	r24, Z+1	; 0x01
    1cca:	88 30       	cpi	r24, 0x08	; 8
    1ccc:	60 f4       	brcc	.+24     	; 0x1ce6 <__stack+0x13e7>
    1cce:	6b b1       	in	r22, 0x0b	; 11
    1cd0:	87 70       	andi	r24, 0x07	; 7
    1cd2:	d9 01       	movw	r26, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <__stack+0x13db>
    1cd6:	aa 0f       	add	r26, r26
    1cd8:	bb 1f       	adc	r27, r27
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <__stack+0x13d7>
    1cde:	cd 01       	movw	r24, r26
    1ce0:	86 2b       	or	r24, r22
    1ce2:	8b b9       	out	0x0b, r24	; 11
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <__stack+0x13fd>
    1ce6:	65 b1       	in	r22, 0x05	; 5
    1ce8:	87 70       	andi	r24, 0x07	; 7
    1cea:	d9 01       	movw	r26, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <__stack+0x13f3>
    1cee:	aa 0f       	add	r26, r26
    1cf0:	bb 1f       	adc	r27, r27
    1cf2:	8a 95       	dec	r24
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <__stack+0x13ef>
    1cf6:	cd 01       	movw	r24, r26
    1cf8:	86 2b       	or	r24, r22
    1cfa:	85 b9       	out	0x05, r24	; 5
    1cfc:	b5 e0       	ldi	r27, 0x05	; 5
    1cfe:	ba 95       	dec	r27
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <__stack+0x13ff>
    1d02:	00 00       	nop
    1d04:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1d06:	88 30       	cpi	r24, 0x08	; 8
    1d08:	68 f4       	brcc	.+26     	; 0x1d24 <__stack+0x1425>
    1d0a:	9b b1       	in	r25, 0x0b	; 11
    1d0c:	87 70       	andi	r24, 0x07	; 7
    1d0e:	b9 01       	movw	r22, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <__stack+0x1417>
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	8a 95       	dec	r24
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <__stack+0x1413>
    1d1a:	86 2f       	mov	r24, r22
    1d1c:	80 95       	com	r24
    1d1e:	89 23       	and	r24, r25
    1d20:	8b b9       	out	0x0b, r24	; 11
    1d22:	0c c0       	rjmp	.+24     	; 0x1d3c <__stack+0x143d>
    1d24:	95 b1       	in	r25, 0x05	; 5
    1d26:	87 70       	andi	r24, 0x07	; 7
    1d28:	b9 01       	movw	r22, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <__stack+0x1431>
    1d2c:	66 0f       	add	r22, r22
    1d2e:	77 1f       	adc	r23, r23
    1d30:	8a 95       	dec	r24
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <__stack+0x142d>
    1d34:	86 2f       	mov	r24, r22
    1d36:	80 95       	com	r24
    1d38:	89 23       	and	r24, r25
    1d3a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d3c:	ef e3       	ldi	r30, 0x3F	; 63
    1d3e:	ff e1       	ldi	r31, 0x1F	; 31
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <__stack+0x1441>
    1d44:	00 c0       	rjmp	.+0      	; 0x1d46 <__stack+0x1447>
    1d46:	00 00       	nop
    1d48:	84 ef       	ldi	r24, 0xF4	; 244
    1d4a:	91 e0       	ldi	r25, 0x01	; 1
    1d4c:	af e9       	ldi	r26, 0x9F	; 159
    1d4e:	bf e0       	ldi	r27, 0x0F	; 15
    1d50:	11 97       	sbiw	r26, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <__stack+0x1451>
    1d54:	00 c0       	rjmp	.+0      	; 0x1d56 <__stack+0x1457>
    1d56:	00 00       	nop
    1d58:	01 97       	sbiw	r24, 0x01	; 1
		inline uint8 clear_bit(byte w, uint8 pos) {
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			while (time > 0) {
    1d5a:	c1 f7       	brne	.-16     	; 0x1d4c <__stack+0x144d>
    1d5c:	41 50       	subi	r20, 0x01	; 1
    1d5e:	51 09       	sbc	r21, r1
		util::delay_ms(500);
	}
	
	dht11 = new component::DHT11(P13);
	
	for (int i = 0; i < 3; i++) {
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <__stack+0x1465>
    1d62:	7c ce       	rjmp	.-776    	; 0x1a5c <__stack+0x115d>
		lcd->Write('.');
		util::delay_ms(500);
	}
	
	char str[40] = "Temp.        0 CHumidade     0 %%";
    1d64:	82 e2       	ldi	r24, 0x22	; 34
    1d66:	e6 e0       	ldi	r30, 0x06	; 6
    1d68:	f1 e0       	ldi	r31, 0x01	; 1
    1d6a:	de 01       	movw	r26, r28
    1d6c:	15 96       	adiw	r26, 0x05	; 5
    1d6e:	01 90       	ld	r0, Z+
    1d70:	0d 92       	st	X+, r0
    1d72:	8a 95       	dec	r24
    1d74:	e1 f7       	brne	.-8      	; 0x1d6e <__stack+0x146f>
    1d76:	fe 01       	movw	r30, r28
    1d78:	b7 96       	adiw	r30, 0x27	; 39
    1d7a:	86 e0       	ldi	r24, 0x06	; 6
    1d7c:	df 01       	movw	r26, r30
    1d7e:	1d 92       	st	X+, r1
    1d80:	8a 95       	dec	r24
    1d82:	e9 f7       	brne	.-6      	; 0x1d7e <__stack+0x147f>
	lcd->Write(str);
    1d84:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <lcd>
    1d88:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <lcd+0x1>
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			public: void ClearScreen() {
				SendCommand(0x01);
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
    1d94:	ef e3       	ldi	r30, 0x3F	; 63
    1d96:	ff e1       	ldi	r31, 0x1F	; 31
    1d98:	31 97       	sbiw	r30, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <__stack+0x1499>
    1d9c:	00 c0       	rjmp	.+0      	; 0x1d9e <__stack+0x149f>
    1d9e:	00 00       	nop
				util::delay_ms_static(2);
				SendCommand(0x80);
    1da0:	60 e8       	ldi	r22, 0x80	; 128
    1da2:	c8 01       	movw	r24, r16
    1da4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
			}
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
    1da8:	60 e8       	ldi	r22, 0x80	; 128
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    1db0:	2d 81       	ldd	r18, Y+5	; 0x05
    1db2:	22 23       	and	r18, r18
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <__stack+0x14b9>
    1db6:	0b c4       	rjmp	.+2070   	; 0x25ce <__stack+0x1ccf>
    1db8:	fe 01       	movw	r30, r28
    1dba:	35 96       	adiw	r30, 0x05	; 5
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <__stack+0x14cf>
    1dc6:	20 81       	ld	r18, Z
    1dc8:	22 23       	and	r18, r18
    1dca:	09 f4       	brne	.+2      	; 0x1dce <__stack+0x14cf>
    1dcc:	00 c4       	rjmp	.+2048   	; 0x25ce <__stack+0x1ccf>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
    1dce:	40 31       	cpi	r20, 0x10	; 16
    1dd0:	51 05       	cpc	r21, r1
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <__stack+0x14db>
    1dd4:	2a 30       	cpi	r18, 0x0A	; 10
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <__stack+0x14db>
    1dd8:	91 c1       	rjmp	.+802    	; 0x20fc <__stack+0x17fd>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    1dda:	d8 01       	movw	r26, r16
    1ddc:	12 96       	adiw	r26, 0x02	; 2
    1dde:	2c 91       	ld	r18, X
    1de0:	28 30       	cpi	r18, 0x08	; 8
    1de2:	68 f4       	brcc	.+26     	; 0x1dfe <__stack+0x14ff>
    1de4:	3b b1       	in	r19, 0x0b	; 11
    1de6:	27 70       	andi	r18, 0x07	; 7
    1de8:	bc 01       	movw	r22, r24
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <__stack+0x14f1>
    1dec:	66 0f       	add	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	2a 95       	dec	r18
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <__stack+0x14ed>
    1df4:	26 2f       	mov	r18, r22
    1df6:	20 95       	com	r18
    1df8:	23 23       	and	r18, r19
    1dfa:	2b b9       	out	0x0b, r18	; 11
    1dfc:	0c c0       	rjmp	.+24     	; 0x1e16 <__stack+0x1517>
    1dfe:	35 b1       	in	r19, 0x05	; 5
    1e00:	27 70       	andi	r18, 0x07	; 7
    1e02:	bc 01       	movw	r22, r24
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <__stack+0x150b>
    1e06:	66 0f       	add	r22, r22
    1e08:	77 1f       	adc	r23, r23
    1e0a:	2a 95       	dec	r18
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <__stack+0x1507>
    1e0e:	26 2f       	mov	r18, r22
    1e10:	20 95       	com	r18
    1e12:	23 23       	and	r18, r19
    1e14:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
    1e16:	d8 01       	movw	r26, r16
    1e18:	13 96       	adiw	r26, 0x03	; 3
    1e1a:	2c 91       	ld	r18, X
    1e1c:	28 30       	cpi	r18, 0x08	; 8
    1e1e:	68 f4       	brcc	.+26     	; 0x1e3a <__stack+0x153b>
    1e20:	3b b1       	in	r19, 0x0b	; 11
    1e22:	27 70       	andi	r18, 0x07	; 7
    1e24:	bc 01       	movw	r22, r24
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <__stack+0x152d>
    1e28:	66 0f       	add	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	2a 95       	dec	r18
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <__stack+0x1529>
    1e30:	26 2f       	mov	r18, r22
    1e32:	20 95       	com	r18
    1e34:	23 23       	and	r18, r19
    1e36:	2b b9       	out	0x0b, r18	; 11
    1e38:	0c c0       	rjmp	.+24     	; 0x1e52 <__stack+0x1553>
    1e3a:	35 b1       	in	r19, 0x05	; 5
    1e3c:	27 70       	andi	r18, 0x07	; 7
    1e3e:	bc 01       	movw	r22, r24
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <__stack+0x1547>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	2a 95       	dec	r18
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <__stack+0x1543>
    1e4a:	26 2f       	mov	r18, r22
    1e4c:	20 95       	com	r18
    1e4e:	23 23       	and	r18, r19
    1e50:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
    1e52:	d8 01       	movw	r26, r16
    1e54:	14 96       	adiw	r26, 0x04	; 4
    1e56:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1e58:	28 30       	cpi	r18, 0x08	; 8
    1e5a:	60 f4       	brcc	.+24     	; 0x1e74 <__stack+0x1575>
    1e5c:	6b b1       	in	r22, 0x0b	; 11
    1e5e:	27 70       	andi	r18, 0x07	; 7
    1e60:	dc 01       	movw	r26, r24
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <__stack+0x1569>
    1e64:	aa 0f       	add	r26, r26
    1e66:	bb 1f       	adc	r27, r27
    1e68:	2a 95       	dec	r18
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <__stack+0x1565>
    1e6c:	9d 01       	movw	r18, r26
    1e6e:	26 2b       	or	r18, r22
    1e70:	2b b9       	out	0x0b, r18	; 11
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <__stack+0x158b>
    1e74:	65 b1       	in	r22, 0x05	; 5
    1e76:	27 70       	andi	r18, 0x07	; 7
    1e78:	dc 01       	movw	r26, r24
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <__stack+0x1581>
    1e7c:	aa 0f       	add	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	2a 95       	dec	r18
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <__stack+0x157d>
    1e84:	9d 01       	movw	r18, r26
    1e86:	26 2b       	or	r18, r22
    1e88:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
    1e8a:	d8 01       	movw	r26, r16
    1e8c:	15 96       	adiw	r26, 0x05	; 5
    1e8e:	2c 91       	ld	r18, X
    1e90:	28 30       	cpi	r18, 0x08	; 8
    1e92:	60 f4       	brcc	.+24     	; 0x1eac <__stack+0x15ad>
    1e94:	6b b1       	in	r22, 0x0b	; 11
    1e96:	27 70       	andi	r18, 0x07	; 7
    1e98:	dc 01       	movw	r26, r24
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <__stack+0x15a1>
    1e9c:	aa 0f       	add	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	2a 95       	dec	r18
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <__stack+0x159d>
    1ea4:	9d 01       	movw	r18, r26
    1ea6:	26 2b       	or	r18, r22
    1ea8:	2b b9       	out	0x0b, r18	; 11
    1eaa:	0b c0       	rjmp	.+22     	; 0x1ec2 <__stack+0x15c3>
    1eac:	65 b1       	in	r22, 0x05	; 5
    1eae:	27 70       	andi	r18, 0x07	; 7
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <__stack+0x15b9>
    1eb4:	aa 0f       	add	r26, r26
    1eb6:	bb 1f       	adc	r27, r27
    1eb8:	2a 95       	dec	r18
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <__stack+0x15b5>
    1ebc:	9d 01       	movw	r18, r26
    1ebe:	26 2b       	or	r18, r22
    1ec0:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1ec6:	28 30       	cpi	r18, 0x08	; 8
    1ec8:	68 f4       	brcc	.+26     	; 0x1ee4 <__stack+0x15e5>
    1eca:	3b b1       	in	r19, 0x0b	; 11
    1ecc:	27 70       	andi	r18, 0x07	; 7
    1ece:	bc 01       	movw	r22, r24
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <__stack+0x15d7>
    1ed2:	66 0f       	add	r22, r22
    1ed4:	77 1f       	adc	r23, r23
    1ed6:	2a 95       	dec	r18
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <__stack+0x15d3>
    1eda:	26 2f       	mov	r18, r22
    1edc:	20 95       	com	r18
    1ede:	23 23       	and	r18, r19
    1ee0:	2b b9       	out	0x0b, r18	; 11
    1ee2:	0c c0       	rjmp	.+24     	; 0x1efc <__stack+0x15fd>
    1ee4:	35 b1       	in	r19, 0x05	; 5
    1ee6:	27 70       	andi	r18, 0x07	; 7
    1ee8:	bc 01       	movw	r22, r24
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <__stack+0x15f1>
    1eec:	66 0f       	add	r22, r22
    1eee:	77 1f       	adc	r23, r23
    1ef0:	2a 95       	dec	r18
    1ef2:	e2 f7       	brpl	.-8      	; 0x1eec <__stack+0x15ed>
    1ef4:	26 2f       	mov	r18, r22
    1ef6:	20 95       	com	r18
    1ef8:	23 23       	and	r18, r19
    1efa:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    1efc:	d8 01       	movw	r26, r16
    1efe:	11 96       	adiw	r26, 0x01	; 1
    1f00:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    1f02:	28 30       	cpi	r18, 0x08	; 8
    1f04:	60 f4       	brcc	.+24     	; 0x1f1e <__stack+0x161f>
    1f06:	6b b1       	in	r22, 0x0b	; 11
    1f08:	27 70       	andi	r18, 0x07	; 7
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <__stack+0x1613>
    1f0e:	aa 0f       	add	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	2a 95       	dec	r18
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <__stack+0x160f>
    1f16:	9d 01       	movw	r18, r26
    1f18:	26 2b       	or	r18, r22
    1f1a:	2b b9       	out	0x0b, r18	; 11
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <__stack+0x1635>
    1f1e:	65 b1       	in	r22, 0x05	; 5
    1f20:	27 70       	andi	r18, 0x07	; 7
    1f22:	dc 01       	movw	r26, r24
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <__stack+0x162b>
    1f26:	aa 0f       	add	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	2a 95       	dec	r18
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <__stack+0x1627>
    1f2e:	9d 01       	movw	r18, r26
    1f30:	26 2b       	or	r18, r22
    1f32:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f34:	b5 e0       	ldi	r27, 0x05	; 5
    1f36:	ba 95       	dec	r27
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <__stack+0x1637>
    1f3a:	00 00       	nop
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	11 96       	adiw	r26, 0x01	; 1
    1f40:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    1f42:	28 30       	cpi	r18, 0x08	; 8
    1f44:	68 f4       	brcc	.+26     	; 0x1f60 <__stack+0x1661>
    1f46:	3b b1       	in	r19, 0x0b	; 11
    1f48:	27 70       	andi	r18, 0x07	; 7
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <__stack+0x1653>
    1f4e:	66 0f       	add	r22, r22
    1f50:	77 1f       	adc	r23, r23
    1f52:	2a 95       	dec	r18
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <__stack+0x164f>
    1f56:	26 2f       	mov	r18, r22
    1f58:	20 95       	com	r18
    1f5a:	23 23       	and	r18, r19
    1f5c:	2b b9       	out	0x0b, r18	; 11
    1f5e:	0c c0       	rjmp	.+24     	; 0x1f78 <__stack+0x1679>
    1f60:	35 b1       	in	r19, 0x05	; 5
    1f62:	27 70       	andi	r18, 0x07	; 7
    1f64:	bc 01       	movw	r22, r24
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <__stack+0x166d>
    1f68:	66 0f       	add	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	2a 95       	dec	r18
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <__stack+0x1669>
    1f70:	26 2f       	mov	r18, r22
    1f72:	20 95       	com	r18
    1f74:	23 23       	and	r18, r19
    1f76:	25 b9       	out	0x05, r18	; 5
    1f78:	af e1       	ldi	r26, 0x1F	; 31
    1f7a:	b3 e0       	ldi	r27, 0x03	; 3
    1f7c:	11 97       	sbiw	r26, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <__stack+0x167d>
    1f80:	00 c0       	rjmp	.+0      	; 0x1f82 <__stack+0x1683>
    1f82:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    1f84:	d8 01       	movw	r26, r16
    1f86:	12 96       	adiw	r26, 0x02	; 2
    1f88:	2c 91       	ld	r18, X
    1f8a:	28 30       	cpi	r18, 0x08	; 8
    1f8c:	68 f4       	brcc	.+26     	; 0x1fa8 <__stack+0x16a9>
    1f8e:	3b b1       	in	r19, 0x0b	; 11
    1f90:	27 70       	andi	r18, 0x07	; 7
    1f92:	bc 01       	movw	r22, r24
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <__stack+0x169b>
    1f96:	66 0f       	add	r22, r22
    1f98:	77 1f       	adc	r23, r23
    1f9a:	2a 95       	dec	r18
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <__stack+0x1697>
    1f9e:	26 2f       	mov	r18, r22
    1fa0:	20 95       	com	r18
    1fa2:	23 23       	and	r18, r19
    1fa4:	2b b9       	out	0x0b, r18	; 11
    1fa6:	0c c0       	rjmp	.+24     	; 0x1fc0 <__stack+0x16c1>
    1fa8:	35 b1       	in	r19, 0x05	; 5
    1faa:	27 70       	andi	r18, 0x07	; 7
    1fac:	bc 01       	movw	r22, r24
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <__stack+0x16b5>
    1fb0:	66 0f       	add	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	2a 95       	dec	r18
    1fb6:	e2 f7       	brpl	.-8      	; 0x1fb0 <__stack+0x16b1>
    1fb8:	26 2f       	mov	r18, r22
    1fba:	20 95       	com	r18
    1fbc:	23 23       	and	r18, r19
    1fbe:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    1fc0:	d8 01       	movw	r26, r16
    1fc2:	13 96       	adiw	r26, 0x03	; 3
    1fc4:	2c 91       	ld	r18, X
    1fc6:	28 30       	cpi	r18, 0x08	; 8
    1fc8:	68 f4       	brcc	.+26     	; 0x1fe4 <__stack+0x16e5>
    1fca:	3b b1       	in	r19, 0x0b	; 11
    1fcc:	27 70       	andi	r18, 0x07	; 7
    1fce:	bc 01       	movw	r22, r24
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <__stack+0x16d7>
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	2a 95       	dec	r18
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <__stack+0x16d3>
    1fda:	26 2f       	mov	r18, r22
    1fdc:	20 95       	com	r18
    1fde:	23 23       	and	r18, r19
    1fe0:	2b b9       	out	0x0b, r18	; 11
    1fe2:	0c c0       	rjmp	.+24     	; 0x1ffc <__stack+0x16fd>
    1fe4:	35 b1       	in	r19, 0x05	; 5
    1fe6:	27 70       	andi	r18, 0x07	; 7
    1fe8:	bc 01       	movw	r22, r24
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <__stack+0x16f1>
    1fec:	66 0f       	add	r22, r22
    1fee:	77 1f       	adc	r23, r23
    1ff0:	2a 95       	dec	r18
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <__stack+0x16ed>
    1ff4:	26 2f       	mov	r18, r22
    1ff6:	20 95       	com	r18
    1ff8:	23 23       	and	r18, r19
    1ffa:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    1ffc:	d8 01       	movw	r26, r16
    1ffe:	14 96       	adiw	r26, 0x04	; 4
    2000:	2c 91       	ld	r18, X
    2002:	28 30       	cpi	r18, 0x08	; 8
    2004:	68 f4       	brcc	.+26     	; 0x2020 <__stack+0x1721>
    2006:	3b b1       	in	r19, 0x0b	; 11
    2008:	27 70       	andi	r18, 0x07	; 7
    200a:	bc 01       	movw	r22, r24
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <__stack+0x1713>
    200e:	66 0f       	add	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	2a 95       	dec	r18
    2014:	e2 f7       	brpl	.-8      	; 0x200e <__stack+0x170f>
    2016:	26 2f       	mov	r18, r22
    2018:	20 95       	com	r18
    201a:	23 23       	and	r18, r19
    201c:	2b b9       	out	0x0b, r18	; 11
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <__stack+0x1739>
    2020:	35 b1       	in	r19, 0x05	; 5
    2022:	27 70       	andi	r18, 0x07	; 7
    2024:	bc 01       	movw	r22, r24
    2026:	02 c0       	rjmp	.+4      	; 0x202c <__stack+0x172d>
    2028:	66 0f       	add	r22, r22
    202a:	77 1f       	adc	r23, r23
    202c:	2a 95       	dec	r18
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <__stack+0x1729>
    2030:	26 2f       	mov	r18, r22
    2032:	20 95       	com	r18
    2034:	23 23       	and	r18, r19
    2036:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    2038:	d8 01       	movw	r26, r16
    203a:	15 96       	adiw	r26, 0x05	; 5
    203c:	2c 91       	ld	r18, X
    203e:	28 30       	cpi	r18, 0x08	; 8
    2040:	68 f4       	brcc	.+26     	; 0x205c <__stack+0x175d>
    2042:	3b b1       	in	r19, 0x0b	; 11
    2044:	27 70       	andi	r18, 0x07	; 7
    2046:	bc 01       	movw	r22, r24
    2048:	02 c0       	rjmp	.+4      	; 0x204e <__stack+0x174f>
    204a:	66 0f       	add	r22, r22
    204c:	77 1f       	adc	r23, r23
    204e:	2a 95       	dec	r18
    2050:	e2 f7       	brpl	.-8      	; 0x204a <__stack+0x174b>
    2052:	26 2f       	mov	r18, r22
    2054:	20 95       	com	r18
    2056:	23 23       	and	r18, r19
    2058:	2b b9       	out	0x0b, r18	; 11
    205a:	0c c0       	rjmp	.+24     	; 0x2074 <__stack+0x1775>
    205c:	35 b1       	in	r19, 0x05	; 5
    205e:	27 70       	andi	r18, 0x07	; 7
    2060:	bc 01       	movw	r22, r24
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <__stack+0x1769>
    2064:	66 0f       	add	r22, r22
    2066:	77 1f       	adc	r23, r23
    2068:	2a 95       	dec	r18
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <__stack+0x1765>
    206c:	26 2f       	mov	r18, r22
    206e:	20 95       	com	r18
    2070:	23 23       	and	r18, r19
    2072:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2074:	d8 01       	movw	r26, r16
    2076:	11 96       	adiw	r26, 0x01	; 1
    2078:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    207a:	28 30       	cpi	r18, 0x08	; 8
    207c:	60 f4       	brcc	.+24     	; 0x2096 <__stack+0x1797>
    207e:	6b b1       	in	r22, 0x0b	; 11
    2080:	27 70       	andi	r18, 0x07	; 7
    2082:	dc 01       	movw	r26, r24
    2084:	02 c0       	rjmp	.+4      	; 0x208a <__stack+0x178b>
    2086:	aa 0f       	add	r26, r26
    2088:	bb 1f       	adc	r27, r27
    208a:	2a 95       	dec	r18
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <__stack+0x1787>
    208e:	9d 01       	movw	r18, r26
    2090:	26 2b       	or	r18, r22
    2092:	2b b9       	out	0x0b, r18	; 11
    2094:	0b c0       	rjmp	.+22     	; 0x20ac <__stack+0x17ad>
    2096:	65 b1       	in	r22, 0x05	; 5
    2098:	27 70       	andi	r18, 0x07	; 7
    209a:	dc 01       	movw	r26, r24
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <__stack+0x17a3>
    209e:	aa 0f       	add	r26, r26
    20a0:	bb 1f       	adc	r27, r27
    20a2:	2a 95       	dec	r18
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <__stack+0x179f>
    20a6:	9d 01       	movw	r18, r26
    20a8:	26 2b       	or	r18, r22
    20aa:	25 b9       	out	0x05, r18	; 5
    20ac:	b5 e0       	ldi	r27, 0x05	; 5
    20ae:	ba 95       	dec	r27
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <__stack+0x17af>
    20b2:	00 00       	nop
    20b4:	d8 01       	movw	r26, r16
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    20ba:	28 30       	cpi	r18, 0x08	; 8
    20bc:	68 f4       	brcc	.+26     	; 0x20d8 <__stack+0x17d9>
    20be:	3b b1       	in	r19, 0x0b	; 11
    20c0:	27 70       	andi	r18, 0x07	; 7
    20c2:	bc 01       	movw	r22, r24
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <__stack+0x17cb>
    20c6:	66 0f       	add	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	2a 95       	dec	r18
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <__stack+0x17c7>
    20ce:	26 2f       	mov	r18, r22
    20d0:	20 95       	com	r18
    20d2:	23 23       	and	r18, r19
    20d4:	2b b9       	out	0x0b, r18	; 11
    20d6:	0c c0       	rjmp	.+24     	; 0x20f0 <__stack+0x17f1>
    20d8:	35 b1       	in	r19, 0x05	; 5
    20da:	27 70       	andi	r18, 0x07	; 7
    20dc:	bc 01       	movw	r22, r24
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <__stack+0x17e5>
    20e0:	66 0f       	add	r22, r22
    20e2:	77 1f       	adc	r23, r23
    20e4:	2a 95       	dec	r18
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <__stack+0x17e1>
    20e8:	26 2f       	mov	r18, r22
    20ea:	20 95       	com	r18
    20ec:	23 23       	and	r18, r19
    20ee:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20f0:	af e3       	ldi	r26, 0x3F	; 63
    20f2:	bf e1       	ldi	r27, 0x1F	; 31
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <__stack+0x17f5>
    20f8:	00 c0       	rjmp	.+0      	; 0x20fa <__stack+0x17fb>
    20fa:	00 00       	nop
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    20fc:	21 91       	ld	r18, Z+
namespace zeduino {
	
	namespace util {
		
		inline uint8 get_bit(byte w, uint8 pos) {
			return _GET_BIT(w, pos);
    20fe:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2100:	d8 01       	movw	r26, r16
    2102:	12 96       	adiw	r26, 0x02	; 2
    2104:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2106:	24 ff       	sbrs	r18, 4
    2108:	18 c0       	rjmp	.+48     	; 0x213a <__stack+0x183b>
    210a:	38 30       	cpi	r19, 0x08	; 8
    210c:	58 f4       	brcc	.+22     	; 0x2124 <__stack+0x1825>
    210e:	7b b1       	in	r23, 0x0b	; 11
    2110:	37 70       	andi	r19, 0x07	; 7
    2112:	dc 01       	movw	r26, r24
    2114:	02 c0       	rjmp	.+4      	; 0x211a <__stack+0x181b>
    2116:	aa 0f       	add	r26, r26
    2118:	bb 1f       	adc	r27, r27
    211a:	3a 95       	dec	r19
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <__stack+0x1817>
    211e:	a7 2b       	or	r26, r23
    2120:	ab b9       	out	0x0b, r26	; 11
    2122:	26 c0       	rjmp	.+76     	; 0x2170 <__stack+0x1871>
    2124:	75 b1       	in	r23, 0x05	; 5
    2126:	37 70       	andi	r19, 0x07	; 7
    2128:	dc 01       	movw	r26, r24
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <__stack+0x1831>
    212c:	aa 0f       	add	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	3a 95       	dec	r19
    2132:	e2 f7       	brpl	.-8      	; 0x212c <__stack+0x182d>
    2134:	a7 2b       	or	r26, r23
    2136:	a5 b9       	out	0x05, r26	; 5
    2138:	1b c0       	rjmp	.+54     	; 0x2170 <__stack+0x1871>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    213a:	38 30       	cpi	r19, 0x08	; 8
    213c:	68 f4       	brcc	.+26     	; 0x2158 <__stack+0x1859>
    213e:	7b b1       	in	r23, 0x0b	; 11
    2140:	37 70       	andi	r19, 0x07	; 7
    2142:	dc 01       	movw	r26, r24
    2144:	02 c0       	rjmp	.+4      	; 0x214a <__stack+0x184b>
    2146:	aa 0f       	add	r26, r26
    2148:	bb 1f       	adc	r27, r27
    214a:	3a 95       	dec	r19
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <__stack+0x1847>
    214e:	3a 2f       	mov	r19, r26
    2150:	30 95       	com	r19
    2152:	37 23       	and	r19, r23
    2154:	3b b9       	out	0x0b, r19	; 11
    2156:	0c c0       	rjmp	.+24     	; 0x2170 <__stack+0x1871>
    2158:	75 b1       	in	r23, 0x05	; 5
    215a:	37 70       	andi	r19, 0x07	; 7
    215c:	dc 01       	movw	r26, r24
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <__stack+0x1865>
    2160:	aa 0f       	add	r26, r26
    2162:	bb 1f       	adc	r27, r27
    2164:	3a 95       	dec	r19
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <__stack+0x1861>
    2168:	3a 2f       	mov	r19, r26
    216a:	30 95       	com	r19
    216c:	37 23       	and	r19, r23
    216e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2170:	d8 01       	movw	r26, r16
    2172:	13 96       	adiw	r26, 0x03	; 3
    2174:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2176:	25 ff       	sbrs	r18, 5
    2178:	18 c0       	rjmp	.+48     	; 0x21aa <__stack+0x18ab>
    217a:	38 30       	cpi	r19, 0x08	; 8
    217c:	58 f4       	brcc	.+22     	; 0x2194 <__stack+0x1895>
    217e:	7b b1       	in	r23, 0x0b	; 11
    2180:	37 70       	andi	r19, 0x07	; 7
    2182:	dc 01       	movw	r26, r24
    2184:	02 c0       	rjmp	.+4      	; 0x218a <__stack+0x188b>
    2186:	aa 0f       	add	r26, r26
    2188:	bb 1f       	adc	r27, r27
    218a:	3a 95       	dec	r19
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <__stack+0x1887>
    218e:	a7 2b       	or	r26, r23
    2190:	ab b9       	out	0x0b, r26	; 11
    2192:	26 c0       	rjmp	.+76     	; 0x21e0 <__stack+0x18e1>
    2194:	75 b1       	in	r23, 0x05	; 5
    2196:	37 70       	andi	r19, 0x07	; 7
    2198:	dc 01       	movw	r26, r24
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <__stack+0x18a1>
    219c:	aa 0f       	add	r26, r26
    219e:	bb 1f       	adc	r27, r27
    21a0:	3a 95       	dec	r19
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <__stack+0x189d>
    21a4:	a7 2b       	or	r26, r23
    21a6:	a5 b9       	out	0x05, r26	; 5
    21a8:	1b c0       	rjmp	.+54     	; 0x21e0 <__stack+0x18e1>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    21aa:	38 30       	cpi	r19, 0x08	; 8
    21ac:	68 f4       	brcc	.+26     	; 0x21c8 <__stack+0x18c9>
    21ae:	7b b1       	in	r23, 0x0b	; 11
    21b0:	37 70       	andi	r19, 0x07	; 7
    21b2:	dc 01       	movw	r26, r24
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <__stack+0x18bb>
    21b6:	aa 0f       	add	r26, r26
    21b8:	bb 1f       	adc	r27, r27
    21ba:	3a 95       	dec	r19
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <__stack+0x18b7>
    21be:	3a 2f       	mov	r19, r26
    21c0:	30 95       	com	r19
    21c2:	37 23       	and	r19, r23
    21c4:	3b b9       	out	0x0b, r19	; 11
    21c6:	0c c0       	rjmp	.+24     	; 0x21e0 <__stack+0x18e1>
    21c8:	75 b1       	in	r23, 0x05	; 5
    21ca:	37 70       	andi	r19, 0x07	; 7
    21cc:	dc 01       	movw	r26, r24
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <__stack+0x18d5>
    21d0:	aa 0f       	add	r26, r26
    21d2:	bb 1f       	adc	r27, r27
    21d4:	3a 95       	dec	r19
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <__stack+0x18d1>
    21d8:	3a 2f       	mov	r19, r26
    21da:	30 95       	com	r19
    21dc:	37 23       	and	r19, r23
    21de:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    21e0:	d8 01       	movw	r26, r16
    21e2:	14 96       	adiw	r26, 0x04	; 4
    21e4:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    21e6:	26 ff       	sbrs	r18, 6
    21e8:	18 c0       	rjmp	.+48     	; 0x221a <__stack+0x191b>
    21ea:	38 30       	cpi	r19, 0x08	; 8
    21ec:	58 f4       	brcc	.+22     	; 0x2204 <__stack+0x1905>
    21ee:	7b b1       	in	r23, 0x0b	; 11
    21f0:	37 70       	andi	r19, 0x07	; 7
    21f2:	dc 01       	movw	r26, r24
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <__stack+0x18fb>
    21f6:	aa 0f       	add	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	3a 95       	dec	r19
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <__stack+0x18f7>
    21fe:	a7 2b       	or	r26, r23
    2200:	ab b9       	out	0x0b, r26	; 11
    2202:	26 c0       	rjmp	.+76     	; 0x2250 <__stack+0x1951>
    2204:	75 b1       	in	r23, 0x05	; 5
    2206:	37 70       	andi	r19, 0x07	; 7
    2208:	dc 01       	movw	r26, r24
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <__stack+0x1911>
    220c:	aa 0f       	add	r26, r26
    220e:	bb 1f       	adc	r27, r27
    2210:	3a 95       	dec	r19
    2212:	e2 f7       	brpl	.-8      	; 0x220c <__stack+0x190d>
    2214:	a7 2b       	or	r26, r23
    2216:	a5 b9       	out	0x05, r26	; 5
    2218:	1b c0       	rjmp	.+54     	; 0x2250 <__stack+0x1951>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    221a:	38 30       	cpi	r19, 0x08	; 8
    221c:	68 f4       	brcc	.+26     	; 0x2238 <__stack+0x1939>
    221e:	7b b1       	in	r23, 0x0b	; 11
    2220:	37 70       	andi	r19, 0x07	; 7
    2222:	dc 01       	movw	r26, r24
    2224:	02 c0       	rjmp	.+4      	; 0x222a <__stack+0x192b>
    2226:	aa 0f       	add	r26, r26
    2228:	bb 1f       	adc	r27, r27
    222a:	3a 95       	dec	r19
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <__stack+0x1927>
    222e:	3a 2f       	mov	r19, r26
    2230:	30 95       	com	r19
    2232:	37 23       	and	r19, r23
    2234:	3b b9       	out	0x0b, r19	; 11
    2236:	0c c0       	rjmp	.+24     	; 0x2250 <__stack+0x1951>
    2238:	75 b1       	in	r23, 0x05	; 5
    223a:	37 70       	andi	r19, 0x07	; 7
    223c:	dc 01       	movw	r26, r24
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <__stack+0x1945>
    2240:	aa 0f       	add	r26, r26
    2242:	bb 1f       	adc	r27, r27
    2244:	3a 95       	dec	r19
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <__stack+0x1941>
    2248:	3a 2f       	mov	r19, r26
    224a:	30 95       	com	r19
    224c:	37 23       	and	r19, r23
    224e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2250:	d8 01       	movw	r26, r16
    2252:	15 96       	adiw	r26, 0x05	; 5
    2254:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2256:	66 23       	and	r22, r22
    2258:	c4 f4       	brge	.+48     	; 0x228a <__stack+0x198b>
    225a:	38 30       	cpi	r19, 0x08	; 8
    225c:	58 f4       	brcc	.+22     	; 0x2274 <__stack+0x1975>
    225e:	ab b1       	in	r26, 0x0b	; 11
    2260:	37 70       	andi	r19, 0x07	; 7
    2262:	bc 01       	movw	r22, r24
    2264:	02 c0       	rjmp	.+4      	; 0x226a <__stack+0x196b>
    2266:	66 0f       	add	r22, r22
    2268:	77 1f       	adc	r23, r23
    226a:	3a 95       	dec	r19
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <__stack+0x1967>
    226e:	6a 2b       	or	r22, r26
    2270:	6b b9       	out	0x0b, r22	; 11
    2272:	26 c0       	rjmp	.+76     	; 0x22c0 <__stack+0x19c1>
    2274:	a5 b1       	in	r26, 0x05	; 5
    2276:	37 70       	andi	r19, 0x07	; 7
    2278:	bc 01       	movw	r22, r24
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <__stack+0x1981>
    227c:	66 0f       	add	r22, r22
    227e:	77 1f       	adc	r23, r23
    2280:	3a 95       	dec	r19
    2282:	e2 f7       	brpl	.-8      	; 0x227c <__stack+0x197d>
    2284:	6a 2b       	or	r22, r26
    2286:	65 b9       	out	0x05, r22	; 5
    2288:	1b c0       	rjmp	.+54     	; 0x22c0 <__stack+0x19c1>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    228a:	38 30       	cpi	r19, 0x08	; 8
    228c:	68 f4       	brcc	.+26     	; 0x22a8 <__stack+0x19a9>
    228e:	6b b1       	in	r22, 0x0b	; 11
    2290:	37 70       	andi	r19, 0x07	; 7
    2292:	dc 01       	movw	r26, r24
    2294:	02 c0       	rjmp	.+4      	; 0x229a <__stack+0x199b>
    2296:	aa 0f       	add	r26, r26
    2298:	bb 1f       	adc	r27, r27
    229a:	3a 95       	dec	r19
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <__stack+0x1997>
    229e:	3a 2f       	mov	r19, r26
    22a0:	30 95       	com	r19
    22a2:	36 23       	and	r19, r22
    22a4:	3b b9       	out	0x0b, r19	; 11
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <__stack+0x19c1>
    22a8:	65 b1       	in	r22, 0x05	; 5
    22aa:	37 70       	andi	r19, 0x07	; 7
    22ac:	dc 01       	movw	r26, r24
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <__stack+0x19b5>
    22b0:	aa 0f       	add	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	3a 95       	dec	r19
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <__stack+0x19b1>
    22b8:	3a 2f       	mov	r19, r26
    22ba:	30 95       	com	r19
    22bc:	36 23       	and	r19, r22
    22be:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    22c0:	d8 01       	movw	r26, r16
    22c2:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    22c4:	38 30       	cpi	r19, 0x08	; 8
    22c6:	58 f4       	brcc	.+22     	; 0x22de <__stack+0x19df>
    22c8:	ab b1       	in	r26, 0x0b	; 11
    22ca:	37 70       	andi	r19, 0x07	; 7
    22cc:	bc 01       	movw	r22, r24
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <__stack+0x19d5>
    22d0:	66 0f       	add	r22, r22
    22d2:	77 1f       	adc	r23, r23
    22d4:	3a 95       	dec	r19
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <__stack+0x19d1>
    22d8:	6a 2b       	or	r22, r26
    22da:	6b b9       	out	0x0b, r22	; 11
    22dc:	0a c0       	rjmp	.+20     	; 0x22f2 <__stack+0x19f3>
    22de:	a5 b1       	in	r26, 0x05	; 5
    22e0:	37 70       	andi	r19, 0x07	; 7
    22e2:	bc 01       	movw	r22, r24
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <__stack+0x19eb>
    22e6:	66 0f       	add	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	3a 95       	dec	r19
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <__stack+0x19e7>
    22ee:	6a 2b       	or	r22, r26
    22f0:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    22f2:	d8 01       	movw	r26, r16
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	3c 91       	ld	r19, X
    22f8:	38 30       	cpi	r19, 0x08	; 8
    22fa:	58 f4       	brcc	.+22     	; 0x2312 <__stack+0x1a13>
    22fc:	ab b1       	in	r26, 0x0b	; 11
    22fe:	37 70       	andi	r19, 0x07	; 7
    2300:	bc 01       	movw	r22, r24
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <__stack+0x1a09>
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	3a 95       	dec	r19
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <__stack+0x1a05>
    230c:	6a 2b       	or	r22, r26
    230e:	6b b9       	out	0x0b, r22	; 11
    2310:	0a c0       	rjmp	.+20     	; 0x2326 <__stack+0x1a27>
    2312:	a5 b1       	in	r26, 0x05	; 5
    2314:	37 70       	andi	r19, 0x07	; 7
    2316:	bc 01       	movw	r22, r24
    2318:	02 c0       	rjmp	.+4      	; 0x231e <__stack+0x1a1f>
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	3a 95       	dec	r19
    2320:	e2 f7       	brpl	.-8      	; 0x231a <__stack+0x1a1b>
    2322:	6a 2b       	or	r22, r26
    2324:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2326:	b5 e0       	ldi	r27, 0x05	; 5
    2328:	ba 95       	dec	r27
    232a:	f1 f7       	brne	.-4      	; 0x2328 <__stack+0x1a29>
    232c:	00 00       	nop
    232e:	d8 01       	movw	r26, r16
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	3c 91       	ld	r19, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2334:	38 30       	cpi	r19, 0x08	; 8
    2336:	68 f4       	brcc	.+26     	; 0x2352 <__stack+0x1a53>
    2338:	6b b1       	in	r22, 0x0b	; 11
    233a:	37 70       	andi	r19, 0x07	; 7
    233c:	dc 01       	movw	r26, r24
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <__stack+0x1a45>
    2340:	aa 0f       	add	r26, r26
    2342:	bb 1f       	adc	r27, r27
    2344:	3a 95       	dec	r19
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <__stack+0x1a41>
    2348:	3a 2f       	mov	r19, r26
    234a:	30 95       	com	r19
    234c:	36 23       	and	r19, r22
    234e:	3b b9       	out	0x0b, r19	; 11
    2350:	0c c0       	rjmp	.+24     	; 0x236a <__stack+0x1a6b>
    2352:	65 b1       	in	r22, 0x05	; 5
    2354:	37 70       	andi	r19, 0x07	; 7
    2356:	dc 01       	movw	r26, r24
    2358:	02 c0       	rjmp	.+4      	; 0x235e <__stack+0x1a5f>
    235a:	aa 0f       	add	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	3a 95       	dec	r19
    2360:	e2 f7       	brpl	.-8      	; 0x235a <__stack+0x1a5b>
    2362:	3a 2f       	mov	r19, r26
    2364:	30 95       	com	r19
    2366:	36 23       	and	r19, r22
    2368:	35 b9       	out	0x05, r19	; 5
    236a:	af e1       	ldi	r26, 0x1F	; 31
    236c:	b3 e0       	ldi	r27, 0x03	; 3
    236e:	11 97       	sbiw	r26, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <__stack+0x1a6f>
    2372:	00 c0       	rjmp	.+0      	; 0x2374 <__stack+0x1a75>
    2374:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2376:	d8 01       	movw	r26, r16
    2378:	12 96       	adiw	r26, 0x02	; 2
    237a:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    237c:	20 ff       	sbrs	r18, 0
    237e:	18 c0       	rjmp	.+48     	; 0x23b0 <__stack+0x1ab1>
    2380:	38 30       	cpi	r19, 0x08	; 8
    2382:	58 f4       	brcc	.+22     	; 0x239a <__stack+0x1a9b>
    2384:	ab b1       	in	r26, 0x0b	; 11
    2386:	37 70       	andi	r19, 0x07	; 7
    2388:	bc 01       	movw	r22, r24
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <__stack+0x1a91>
    238c:	66 0f       	add	r22, r22
    238e:	77 1f       	adc	r23, r23
    2390:	3a 95       	dec	r19
    2392:	e2 f7       	brpl	.-8      	; 0x238c <__stack+0x1a8d>
    2394:	6a 2b       	or	r22, r26
    2396:	6b b9       	out	0x0b, r22	; 11
    2398:	26 c0       	rjmp	.+76     	; 0x23e6 <__stack+0x1ae7>
    239a:	a5 b1       	in	r26, 0x05	; 5
    239c:	37 70       	andi	r19, 0x07	; 7
    239e:	bc 01       	movw	r22, r24
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <__stack+0x1aa7>
    23a2:	66 0f       	add	r22, r22
    23a4:	77 1f       	adc	r23, r23
    23a6:	3a 95       	dec	r19
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <__stack+0x1aa3>
    23aa:	6a 2b       	or	r22, r26
    23ac:	65 b9       	out	0x05, r22	; 5
    23ae:	1b c0       	rjmp	.+54     	; 0x23e6 <__stack+0x1ae7>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    23b0:	38 30       	cpi	r19, 0x08	; 8
    23b2:	68 f4       	brcc	.+26     	; 0x23ce <__stack+0x1acf>
    23b4:	6b b1       	in	r22, 0x0b	; 11
    23b6:	37 70       	andi	r19, 0x07	; 7
    23b8:	dc 01       	movw	r26, r24
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <__stack+0x1ac1>
    23bc:	aa 0f       	add	r26, r26
    23be:	bb 1f       	adc	r27, r27
    23c0:	3a 95       	dec	r19
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <__stack+0x1abd>
    23c4:	3a 2f       	mov	r19, r26
    23c6:	30 95       	com	r19
    23c8:	36 23       	and	r19, r22
    23ca:	3b b9       	out	0x0b, r19	; 11
    23cc:	0c c0       	rjmp	.+24     	; 0x23e6 <__stack+0x1ae7>
    23ce:	65 b1       	in	r22, 0x05	; 5
    23d0:	37 70       	andi	r19, 0x07	; 7
    23d2:	dc 01       	movw	r26, r24
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <__stack+0x1adb>
    23d6:	aa 0f       	add	r26, r26
    23d8:	bb 1f       	adc	r27, r27
    23da:	3a 95       	dec	r19
    23dc:	e2 f7       	brpl	.-8      	; 0x23d6 <__stack+0x1ad7>
    23de:	3a 2f       	mov	r19, r26
    23e0:	30 95       	com	r19
    23e2:	36 23       	and	r19, r22
    23e4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    23e6:	d8 01       	movw	r26, r16
    23e8:	13 96       	adiw	r26, 0x03	; 3
    23ea:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    23ec:	21 ff       	sbrs	r18, 1
    23ee:	18 c0       	rjmp	.+48     	; 0x2420 <__stack+0x1b21>
    23f0:	38 30       	cpi	r19, 0x08	; 8
    23f2:	58 f4       	brcc	.+22     	; 0x240a <__stack+0x1b0b>
    23f4:	ab b1       	in	r26, 0x0b	; 11
    23f6:	37 70       	andi	r19, 0x07	; 7
    23f8:	bc 01       	movw	r22, r24
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <__stack+0x1b01>
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	3a 95       	dec	r19
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <__stack+0x1afd>
    2404:	6a 2b       	or	r22, r26
    2406:	6b b9       	out	0x0b, r22	; 11
    2408:	26 c0       	rjmp	.+76     	; 0x2456 <__stack+0x1b57>
    240a:	a5 b1       	in	r26, 0x05	; 5
    240c:	37 70       	andi	r19, 0x07	; 7
    240e:	bc 01       	movw	r22, r24
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <__stack+0x1b17>
    2412:	66 0f       	add	r22, r22
    2414:	77 1f       	adc	r23, r23
    2416:	3a 95       	dec	r19
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <__stack+0x1b13>
    241a:	6a 2b       	or	r22, r26
    241c:	65 b9       	out	0x05, r22	; 5
    241e:	1b c0       	rjmp	.+54     	; 0x2456 <__stack+0x1b57>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2420:	38 30       	cpi	r19, 0x08	; 8
    2422:	68 f4       	brcc	.+26     	; 0x243e <__stack+0x1b3f>
    2424:	6b b1       	in	r22, 0x0b	; 11
    2426:	37 70       	andi	r19, 0x07	; 7
    2428:	dc 01       	movw	r26, r24
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <__stack+0x1b31>
    242c:	aa 0f       	add	r26, r26
    242e:	bb 1f       	adc	r27, r27
    2430:	3a 95       	dec	r19
    2432:	e2 f7       	brpl	.-8      	; 0x242c <__stack+0x1b2d>
    2434:	3a 2f       	mov	r19, r26
    2436:	30 95       	com	r19
    2438:	36 23       	and	r19, r22
    243a:	3b b9       	out	0x0b, r19	; 11
    243c:	0c c0       	rjmp	.+24     	; 0x2456 <__stack+0x1b57>
    243e:	65 b1       	in	r22, 0x05	; 5
    2440:	37 70       	andi	r19, 0x07	; 7
    2442:	dc 01       	movw	r26, r24
    2444:	02 c0       	rjmp	.+4      	; 0x244a <__stack+0x1b4b>
    2446:	aa 0f       	add	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	3a 95       	dec	r19
    244c:	e2 f7       	brpl	.-8      	; 0x2446 <__stack+0x1b47>
    244e:	3a 2f       	mov	r19, r26
    2450:	30 95       	com	r19
    2452:	36 23       	and	r19, r22
    2454:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    2456:	d8 01       	movw	r26, r16
    2458:	14 96       	adiw	r26, 0x04	; 4
    245a:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    245c:	22 ff       	sbrs	r18, 2
    245e:	18 c0       	rjmp	.+48     	; 0x2490 <__stack+0x1b91>
    2460:	38 30       	cpi	r19, 0x08	; 8
    2462:	58 f4       	brcc	.+22     	; 0x247a <__stack+0x1b7b>
    2464:	ab b1       	in	r26, 0x0b	; 11
    2466:	37 70       	andi	r19, 0x07	; 7
    2468:	bc 01       	movw	r22, r24
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <__stack+0x1b71>
    246c:	66 0f       	add	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	3a 95       	dec	r19
    2472:	e2 f7       	brpl	.-8      	; 0x246c <__stack+0x1b6d>
    2474:	6a 2b       	or	r22, r26
    2476:	6b b9       	out	0x0b, r22	; 11
    2478:	26 c0       	rjmp	.+76     	; 0x24c6 <__stack+0x1bc7>
    247a:	a5 b1       	in	r26, 0x05	; 5
    247c:	37 70       	andi	r19, 0x07	; 7
    247e:	bc 01       	movw	r22, r24
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <__stack+0x1b87>
    2482:	66 0f       	add	r22, r22
    2484:	77 1f       	adc	r23, r23
    2486:	3a 95       	dec	r19
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <__stack+0x1b83>
    248a:	6a 2b       	or	r22, r26
    248c:	65 b9       	out	0x05, r22	; 5
    248e:	1b c0       	rjmp	.+54     	; 0x24c6 <__stack+0x1bc7>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2490:	38 30       	cpi	r19, 0x08	; 8
    2492:	68 f4       	brcc	.+26     	; 0x24ae <__stack+0x1baf>
    2494:	6b b1       	in	r22, 0x0b	; 11
    2496:	37 70       	andi	r19, 0x07	; 7
    2498:	dc 01       	movw	r26, r24
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <__stack+0x1ba1>
    249c:	aa 0f       	add	r26, r26
    249e:	bb 1f       	adc	r27, r27
    24a0:	3a 95       	dec	r19
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <__stack+0x1b9d>
    24a4:	3a 2f       	mov	r19, r26
    24a6:	30 95       	com	r19
    24a8:	36 23       	and	r19, r22
    24aa:	3b b9       	out	0x0b, r19	; 11
    24ac:	0c c0       	rjmp	.+24     	; 0x24c6 <__stack+0x1bc7>
    24ae:	65 b1       	in	r22, 0x05	; 5
    24b0:	37 70       	andi	r19, 0x07	; 7
    24b2:	dc 01       	movw	r26, r24
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <__stack+0x1bbb>
    24b6:	aa 0f       	add	r26, r26
    24b8:	bb 1f       	adc	r27, r27
    24ba:	3a 95       	dec	r19
    24bc:	e2 f7       	brpl	.-8      	; 0x24b6 <__stack+0x1bb7>
    24be:	3a 2f       	mov	r19, r26
    24c0:	30 95       	com	r19
    24c2:	36 23       	and	r19, r22
    24c4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    24c6:	d8 01       	movw	r26, r16
    24c8:	15 96       	adiw	r26, 0x05	; 5
    24ca:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    24cc:	23 ff       	sbrs	r18, 3
    24ce:	1a c0       	rjmp	.+52     	; 0x2504 <__stack+0x1c05>
    24d0:	38 30       	cpi	r19, 0x08	; 8
    24d2:	60 f4       	brcc	.+24     	; 0x24ec <__stack+0x1bed>
    24d4:	6b b1       	in	r22, 0x0b	; 11
    24d6:	37 70       	andi	r19, 0x07	; 7
    24d8:	dc 01       	movw	r26, r24
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <__stack+0x1be1>
    24dc:	aa 0f       	add	r26, r26
    24de:	bb 1f       	adc	r27, r27
    24e0:	3a 95       	dec	r19
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <__stack+0x1bdd>
    24e4:	9d 01       	movw	r18, r26
    24e6:	26 2b       	or	r18, r22
    24e8:	2b b9       	out	0x0b, r18	; 11
    24ea:	27 c0       	rjmp	.+78     	; 0x253a <__stack+0x1c3b>
    24ec:	65 b1       	in	r22, 0x05	; 5
    24ee:	37 70       	andi	r19, 0x07	; 7
    24f0:	dc 01       	movw	r26, r24
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <__stack+0x1bf9>
    24f4:	aa 0f       	add	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	3a 95       	dec	r19
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <__stack+0x1bf5>
    24fc:	9d 01       	movw	r18, r26
    24fe:	26 2b       	or	r18, r22
    2500:	25 b9       	out	0x05, r18	; 5
    2502:	1b c0       	rjmp	.+54     	; 0x253a <__stack+0x1c3b>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2504:	38 30       	cpi	r19, 0x08	; 8
    2506:	68 f4       	brcc	.+26     	; 0x2522 <__stack+0x1c23>
    2508:	6b b1       	in	r22, 0x0b	; 11
    250a:	37 70       	andi	r19, 0x07	; 7
    250c:	dc 01       	movw	r26, r24
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <__stack+0x1c15>
    2510:	aa 0f       	add	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	3a 95       	dec	r19
    2516:	e2 f7       	brpl	.-8      	; 0x2510 <__stack+0x1c11>
    2518:	9d 01       	movw	r18, r26
    251a:	20 95       	com	r18
    251c:	26 23       	and	r18, r22
    251e:	2b b9       	out	0x0b, r18	; 11
    2520:	0c c0       	rjmp	.+24     	; 0x253a <__stack+0x1c3b>
    2522:	65 b1       	in	r22, 0x05	; 5
    2524:	37 70       	andi	r19, 0x07	; 7
    2526:	dc 01       	movw	r26, r24
    2528:	02 c0       	rjmp	.+4      	; 0x252e <__stack+0x1c2f>
    252a:	aa 0f       	add	r26, r26
    252c:	bb 1f       	adc	r27, r27
    252e:	3a 95       	dec	r19
    2530:	e2 f7       	brpl	.-8      	; 0x252a <__stack+0x1c2b>
    2532:	9d 01       	movw	r18, r26
    2534:	20 95       	com	r18
    2536:	26 23       	and	r18, r22
    2538:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    253a:	d8 01       	movw	r26, r16
    253c:	11 96       	adiw	r26, 0x01	; 1
    253e:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2540:	28 30       	cpi	r18, 0x08	; 8
    2542:	60 f4       	brcc	.+24     	; 0x255c <__stack+0x1c5d>
    2544:	6b b1       	in	r22, 0x0b	; 11
    2546:	27 70       	andi	r18, 0x07	; 7
    2548:	dc 01       	movw	r26, r24
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <__stack+0x1c51>
    254c:	aa 0f       	add	r26, r26
    254e:	bb 1f       	adc	r27, r27
    2550:	2a 95       	dec	r18
    2552:	e2 f7       	brpl	.-8      	; 0x254c <__stack+0x1c4d>
    2554:	9d 01       	movw	r18, r26
    2556:	26 2b       	or	r18, r22
    2558:	2b b9       	out	0x0b, r18	; 11
    255a:	0b c0       	rjmp	.+22     	; 0x2572 <__stack+0x1c73>
    255c:	65 b1       	in	r22, 0x05	; 5
    255e:	27 70       	andi	r18, 0x07	; 7
    2560:	dc 01       	movw	r26, r24
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <__stack+0x1c69>
    2564:	aa 0f       	add	r26, r26
    2566:	bb 1f       	adc	r27, r27
    2568:	2a 95       	dec	r18
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <__stack+0x1c65>
    256c:	9d 01       	movw	r18, r26
    256e:	26 2b       	or	r18, r22
    2570:	25 b9       	out	0x05, r18	; 5
    2572:	b5 e0       	ldi	r27, 0x05	; 5
    2574:	ba 95       	dec	r27
    2576:	f1 f7       	brne	.-4      	; 0x2574 <__stack+0x1c75>
    2578:	00 00       	nop
    257a:	d8 01       	movw	r26, r16
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2580:	28 30       	cpi	r18, 0x08	; 8
    2582:	68 f4       	brcc	.+26     	; 0x259e <__stack+0x1c9f>
    2584:	3b b1       	in	r19, 0x0b	; 11
    2586:	27 70       	andi	r18, 0x07	; 7
    2588:	bc 01       	movw	r22, r24
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <__stack+0x1c91>
    258c:	66 0f       	add	r22, r22
    258e:	77 1f       	adc	r23, r23
    2590:	2a 95       	dec	r18
    2592:	e2 f7       	brpl	.-8      	; 0x258c <__stack+0x1c8d>
    2594:	26 2f       	mov	r18, r22
    2596:	20 95       	com	r18
    2598:	23 23       	and	r18, r19
    259a:	2b b9       	out	0x0b, r18	; 11
    259c:	0c c0       	rjmp	.+24     	; 0x25b6 <__stack+0x1cb7>
    259e:	35 b1       	in	r19, 0x05	; 5
    25a0:	27 70       	andi	r18, 0x07	; 7
    25a2:	bc 01       	movw	r22, r24
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <__stack+0x1cab>
    25a6:	66 0f       	add	r22, r22
    25a8:	77 1f       	adc	r23, r23
    25aa:	2a 95       	dec	r18
    25ac:	e2 f7       	brpl	.-8      	; 0x25a6 <__stack+0x1ca7>
    25ae:	26 2f       	mov	r18, r22
    25b0:	20 95       	com	r18
    25b2:	23 23       	and	r18, r19
    25b4:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25b6:	af e3       	ldi	r26, 0x3F	; 63
    25b8:	bf e1       	ldi	r27, 0x1F	; 31
    25ba:	11 97       	sbiw	r26, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <__stack+0x1cbb>
    25be:	00 c0       	rjmp	.+0      	; 0x25c0 <__stack+0x1cc1>
    25c0:	00 00       	nop
			
				
			public: void Write(char str[]) {
				ClearScreen();
				SendCommand(0x80);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    25c2:	4f 5f       	subi	r20, 0xFF	; 255
    25c4:	5f 4f       	sbci	r21, 0xFF	; 255
    25c6:	40 32       	cpi	r20, 0x20	; 32
    25c8:	51 05       	cpc	r21, r1
    25ca:	09 f0       	breq	.+2      	; 0x25ce <__stack+0x1ccf>
    25cc:	fc cb       	rjmp	.-2056   	; 0x1dc6 <__stack+0x14c7>
	
}
    25ce:	ac 96       	adiw	r28, 0x2c	; 44
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	1f 91       	pop	r17
    25e0:	0f 91       	pop	r16
    25e2:	ff 90       	pop	r15
    25e4:	ef 90       	pop	r14
    25e6:	df 90       	pop	r13
    25e8:	cf 90       	pop	r12
    25ea:	bf 90       	pop	r11
    25ec:	af 90       	pop	r10
    25ee:	08 95       	ret

000025f0 <_Z4loopv>:

void loop() {
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	2a 97       	sbiw	r28, 0x0a	; 10
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61

	component::DHT11::Response response = dht11->Read();
    260c:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <__data_end>
    2610:	10 91 55 01 	lds	r17, 0x0155	; 0x800155 <__data_end+0x1>
				bool checksum;
			};
			
			private: inline void Request() {
			
				port::mode(_port, OUTPUT);	
    2614:	61 e0       	ldi	r22, 0x01	; 1
    2616:	d8 01       	movw	r26, r16
    2618:	8c 91       	ld	r24, X
    261a:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				enable(_port);
    261e:	f8 01       	movw	r30, r16
    2620:	80 81       	ld	r24, Z
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
    2622:	88 30       	cpi	r24, 0x08	; 8
    2624:	70 f4       	brcc	.+28     	; 0x2642 <_Z4loopv+0x52>
    2626:	4b b1       	in	r20, 0x0b	; 11
    2628:	87 70       	andi	r24, 0x07	; 7
    262a:	21 e0       	ldi	r18, 0x01	; 1
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	b9 01       	movw	r22, r18
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <_Z4loopv+0x46>
    2632:	66 0f       	add	r22, r22
    2634:	77 1f       	adc	r23, r23
    2636:	8a 95       	dec	r24
    2638:	e2 f7       	brpl	.-8      	; 0x2632 <_Z4loopv+0x42>
    263a:	cb 01       	movw	r24, r22
    263c:	84 2b       	or	r24, r20
    263e:	8b b9       	out	0x0b, r24	; 11
    2640:	0d c0       	rjmp	.+26     	; 0x265c <_Z4loopv+0x6c>
    2642:	45 b1       	in	r20, 0x05	; 5
    2644:	87 70       	andi	r24, 0x07	; 7
    2646:	21 e0       	ldi	r18, 0x01	; 1
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	d9 01       	movw	r26, r18
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <_Z4loopv+0x62>
    264e:	aa 0f       	add	r26, r26
    2650:	bb 1f       	adc	r27, r27
    2652:	8a 95       	dec	r24
    2654:	e2 f7       	brpl	.-8      	; 0x264e <_Z4loopv+0x5e>
    2656:	cd 01       	movw	r24, r26
    2658:	84 2b       	or	r24, r20
    265a:	85 b9       	out	0x05, r24	; 5
    265c:	bf ef       	ldi	r27, 0xFF	; 255
    265e:	e3 ed       	ldi	r30, 0xD3	; 211
    2660:	f0 e3       	ldi	r31, 0x30	; 48
    2662:	b1 50       	subi	r27, 0x01	; 1
    2664:	e0 40       	sbci	r30, 0x00	; 0
    2666:	f0 40       	sbci	r31, 0x00	; 0
    2668:	e1 f7       	brne	.-8      	; 0x2662 <_Z4loopv+0x72>
    266a:	00 c0       	rjmp	.+0      	; 0x266c <_Z4loopv+0x7c>
    266c:	00 00       	nop
				util::delay_ms_static(1000);
				disable(_port);
    266e:	d8 01       	movw	r26, r16
    2670:	8c 91       	ld	r24, X
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
    2672:	88 30       	cpi	r24, 0x08	; 8
    2674:	78 f4       	brcc	.+30     	; 0x2694 <_Z4loopv+0xa4>
    2676:	4b b1       	in	r20, 0x0b	; 11
    2678:	87 70       	andi	r24, 0x07	; 7
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	f9 01       	movw	r30, r18
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <_Z4loopv+0x96>
    2682:	ee 0f       	add	r30, r30
    2684:	ff 1f       	adc	r31, r31
    2686:	8a 95       	dec	r24
    2688:	e2 f7       	brpl	.-8      	; 0x2682 <_Z4loopv+0x92>
    268a:	cf 01       	movw	r24, r30
    268c:	80 95       	com	r24
    268e:	84 23       	and	r24, r20
    2690:	8b b9       	out	0x0b, r24	; 11
    2692:	0e c0       	rjmp	.+28     	; 0x26b0 <_Z4loopv+0xc0>
    2694:	45 b1       	in	r20, 0x05	; 5
    2696:	87 70       	andi	r24, 0x07	; 7
    2698:	21 e0       	ldi	r18, 0x01	; 1
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	b9 01       	movw	r22, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <_Z4loopv+0xb4>
    26a0:	66 0f       	add	r22, r22
    26a2:	77 1f       	adc	r23, r23
    26a4:	8a 95       	dec	r24
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <_Z4loopv+0xb0>
    26a8:	cb 01       	movw	r24, r22
    26aa:	80 95       	com	r24
    26ac:	84 23       	and	r24, r20
    26ae:	85 b9       	out	0x05, r24	; 5
    26b0:	7f ef       	ldi	r23, 0xFF	; 255
    26b2:	89 ef       	ldi	r24, 0xF9	; 249
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	71 50       	subi	r23, 0x01	; 1
    26b8:	80 40       	sbci	r24, 0x00	; 0
    26ba:	90 40       	sbci	r25, 0x00	; 0
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <_Z4loopv+0xc6>
    26be:	00 c0       	rjmp	.+0      	; 0x26c0 <_Z4loopv+0xd0>
    26c0:	00 00       	nop
				util::delay_ms_static(20);
				enable(_port);
    26c2:	d8 01       	movw	r26, r16
    26c4:	8c 91       	ld	r24, X
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
    26c6:	88 30       	cpi	r24, 0x08	; 8
    26c8:	70 f4       	brcc	.+28     	; 0x26e6 <_Z4loopv+0xf6>
    26ca:	4b b1       	in	r20, 0x0b	; 11
    26cc:	87 70       	andi	r24, 0x07	; 7
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	f9 01       	movw	r30, r18
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <_Z4loopv+0xea>
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	8a 95       	dec	r24
    26dc:	e2 f7       	brpl	.-8      	; 0x26d6 <_Z4loopv+0xe6>
    26de:	cf 01       	movw	r24, r30
    26e0:	84 2b       	or	r24, r20
    26e2:	8b b9       	out	0x0b, r24	; 11
    26e4:	0d c0       	rjmp	.+26     	; 0x2700 <_Z4loopv+0x110>
    26e6:	45 b1       	in	r20, 0x05	; 5
    26e8:	87 70       	andi	r24, 0x07	; 7
    26ea:	21 e0       	ldi	r18, 0x01	; 1
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	b9 01       	movw	r22, r18
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <_Z4loopv+0x106>
    26f2:	66 0f       	add	r22, r22
    26f4:	77 1f       	adc	r23, r23
    26f6:	8a 95       	dec	r24
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <_Z4loopv+0x102>
    26fa:	cb 01       	movw	r24, r22
    26fc:	84 2b       	or	r24, r20
    26fe:	85 b9       	out	0x05, r24	; 5
			
				port::mode(_port, INPUT);
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	d8 01       	movw	r26, r16
    2704:	8c 91       	ld	r24, X
    2706:	0e 94 6e 00 	call	0xdc	; 0xdc <_ZN7zeduino4port4modeENS0_5EPortENS0_5EModeE>
				while (read(_port));
    270a:	f8 01       	movw	r30, r16
    270c:	40 81       	ld	r20, Z
    270e:	84 2f       	mov	r24, r20
    2710:	87 70       	andi	r24, 0x07	; 7
    2712:	21 e0       	ldi	r18, 0x01	; 1
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	02 c0       	rjmp	.+4      	; 0x271c <_Z4loopv+0x12c>
    2718:	22 0f       	add	r18, r18
    271a:	33 1f       	adc	r19, r19
    271c:	8a 95       	dec	r24
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <_Z4loopv+0x128>
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
		}
		
		inline bool read(EPort port) {
			return _GET_BIT(fcrin(port), nmr(port));
    2720:	48 30       	cpi	r20, 0x08	; 8
    2722:	10 f4       	brcc	.+4      	; 0x2728 <_Z4loopv+0x138>
    2724:	89 b1       	in	r24, 0x09	; 9
    2726:	01 c0       	rjmp	.+2      	; 0x272a <_Z4loopv+0x13a>
    2728:	83 b1       	in	r24, 0x03	; 3
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	82 23       	and	r24, r18
    272e:	93 23       	and	r25, r19
    2730:	89 2b       	or	r24, r25
    2732:	b1 f7       	brne	.-20     	; 0x2720 <_Z4loopv+0x130>
    2734:	48 30       	cpi	r20, 0x08	; 8
    2736:	10 f4       	brcc	.+4      	; 0x273c <_Z4loopv+0x14c>
    2738:	89 b1       	in	r24, 0x09	; 9
    273a:	01 c0       	rjmp	.+2      	; 0x273e <_Z4loopv+0x14e>
    273c:	83 b1       	in	r24, 0x03	; 3
				while (!read(_port));
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	82 23       	and	r24, r18
    2742:	93 23       	and	r25, r19
    2744:	89 2b       	or	r24, r25
    2746:	b1 f3       	breq	.-20     	; 0x2734 <_Z4loopv+0x144>
    2748:	48 30       	cpi	r20, 0x08	; 8
    274a:	10 f4       	brcc	.+4      	; 0x2750 <_Z4loopv+0x160>
    274c:	89 b1       	in	r24, 0x09	; 9
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <_Z4loopv+0x162>
    2750:	83 b1       	in	r24, 0x03	; 3
				while (read(_port));
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	82 23       	and	r24, r18
    2756:	93 23       	and	r25, r19
    2758:	89 2b       	or	r24, r25
    275a:	b1 f7       	brne	.-20     	; 0x2748 <_Z4loopv+0x158>
    275c:	48 e0       	ldi	r20, 0x08	; 8
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	f1 2c       	mov	r15, r1
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	70 e0       	ldi	r23, 0x00	; 0
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
					while (!read(_port));
    2766:	d8 01       	movw	r26, r16
    2768:	2c 91       	ld	r18, X
    276a:	82 2f       	mov	r24, r18
    276c:	87 70       	andi	r24, 0x07	; 7
    276e:	fb 01       	movw	r30, r22
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <_Z4loopv+0x186>
    2772:	ee 0f       	add	r30, r30
    2774:	ff 1f       	adc	r31, r31
    2776:	8a 95       	dec	r24
    2778:	e2 f7       	brpl	.-8      	; 0x2772 <_Z4loopv+0x182>
    277a:	28 30       	cpi	r18, 0x08	; 8
    277c:	10 f4       	brcc	.+4      	; 0x2782 <_Z4loopv+0x192>
    277e:	89 b1       	in	r24, 0x09	; 9
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <_Z4loopv+0x194>
    2782:	83 b1       	in	r24, 0x03	; 3
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	8e 23       	and	r24, r30
    2788:	9f 23       	and	r25, r31
    278a:	89 2b       	or	r24, r25
    278c:	b1 f3       	breq	.-20     	; 0x277a <_Z4loopv+0x18a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    278e:	b0 ea       	ldi	r27, 0xA0	; 160
    2790:	ba 95       	dec	r27
    2792:	f1 f7       	brne	.-4      	; 0x2790 <_Z4loopv+0x1a0>
					util::delay_us_static(30);
					if (read(_port)) ret = (ret << 1) | (0x01);
    2794:	f8 01       	movw	r30, r16
    2796:	20 81       	ld	r18, Z
    2798:	28 30       	cpi	r18, 0x08	; 8
    279a:	10 f4       	brcc	.+4      	; 0x27a0 <_Z4loopv+0x1b0>
    279c:	89 b1       	in	r24, 0x09	; 9
    279e:	01 c0       	rjmp	.+2      	; 0x27a2 <_Z4loopv+0x1b2>
    27a0:	83 b1       	in	r24, 0x03	; 3
    27a2:	32 2f       	mov	r19, r18
    27a4:	37 70       	andi	r19, 0x07	; 7
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	03 2e       	mov	r0, r19
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <_Z4loopv+0x1c0>
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <_Z4loopv+0x1bc>
    27b4:	80 ff       	sbrs	r24, 0
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <_Z4loopv+0x1d2>
    27b8:	8f 2d       	mov	r24, r15
    27ba:	88 0f       	add	r24, r24
    27bc:	81 60       	ori	r24, 0x01	; 1
    27be:	f8 2e       	mov	r15, r24
    27c0:	01 c0       	rjmp	.+2      	; 0x27c4 <_Z4loopv+0x1d4>
					else ret = (ret << 1);
    27c2:	ff 0c       	add	r15, r15
    27c4:	fb 01       	movw	r30, r22
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <_Z4loopv+0x1dc>
    27c8:	ee 0f       	add	r30, r30
    27ca:	ff 1f       	adc	r31, r31
    27cc:	3a 95       	dec	r19
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <_Z4loopv+0x1d8>
    27d0:	28 30       	cpi	r18, 0x08	; 8
    27d2:	10 f4       	brcc	.+4      	; 0x27d8 <_Z4loopv+0x1e8>
    27d4:	89 b1       	in	r24, 0x09	; 9
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <_Z4loopv+0x1ea>
    27d8:	83 b1       	in	r24, 0x03	; 3
					while (read(_port));
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	8e 23       	and	r24, r30
    27de:	9f 23       	and	r25, r31
    27e0:	89 2b       	or	r24, r25
    27e2:	b1 f7       	brne	.-20     	; 0x27d0 <_Z4loopv+0x1e0>
    27e4:	41 50       	subi	r20, 0x01	; 1
    27e6:	51 09       	sbc	r21, r1
				
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
    27e8:	09 f0       	breq	.+2      	; 0x27ec <_Z4loopv+0x1fc>
    27ea:	bd cf       	rjmp	.-134    	; 0x2766 <_Z4loopv+0x176>
    27ec:	48 e0       	ldi	r20, 0x08	; 8
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	61 e0       	ldi	r22, 0x01	; 1
    27f4:	70 e0       	ldi	r23, 0x00	; 0
					while (!read(_port));
    27f6:	d8 01       	movw	r26, r16
    27f8:	3c 91       	ld	r19, X
    27fa:	83 2f       	mov	r24, r19
    27fc:	87 70       	andi	r24, 0x07	; 7
    27fe:	fb 01       	movw	r30, r22
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <_Z4loopv+0x216>
    2802:	ee 0f       	add	r30, r30
    2804:	ff 1f       	adc	r31, r31
    2806:	8a 95       	dec	r24
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <_Z4loopv+0x212>
    280a:	38 30       	cpi	r19, 0x08	; 8
    280c:	10 f4       	brcc	.+4      	; 0x2812 <_Z4loopv+0x222>
    280e:	89 b1       	in	r24, 0x09	; 9
    2810:	01 c0       	rjmp	.+2      	; 0x2814 <_Z4loopv+0x224>
    2812:	83 b1       	in	r24, 0x03	; 3
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	8e 23       	and	r24, r30
    2818:	9f 23       	and	r25, r31
    281a:	89 2b       	or	r24, r25
    281c:	b1 f3       	breq	.-20     	; 0x280a <_Z4loopv+0x21a>
    281e:	b0 ea       	ldi	r27, 0xA0	; 160
    2820:	ba 95       	dec	r27
    2822:	f1 f7       	brne	.-4      	; 0x2820 <_Z4loopv+0x230>
					util::delay_us_static(30);
					if (read(_port)) ret = (ret << 1) | (0x01);
    2824:	f8 01       	movw	r30, r16
    2826:	30 81       	ld	r19, Z
    2828:	38 30       	cpi	r19, 0x08	; 8
    282a:	10 f4       	brcc	.+4      	; 0x2830 <_Z4loopv+0x240>
    282c:	89 b1       	in	r24, 0x09	; 9
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <_Z4loopv+0x242>
    2830:	83 b1       	in	r24, 0x03	; 3
    2832:	e3 2f       	mov	r30, r19
    2834:	e7 70       	andi	r30, 0x07	; 7
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 2e       	mov	r0, r30
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <_Z4loopv+0x250>
    283c:	95 95       	asr	r25
    283e:	87 95       	ror	r24
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <_Z4loopv+0x24c>
    2844:	80 ff       	sbrs	r24, 0
    2846:	03 c0       	rjmp	.+6      	; 0x284e <_Z4loopv+0x25e>
    2848:	22 0f       	add	r18, r18
    284a:	21 60       	ori	r18, 0x01	; 1
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <_Z4loopv+0x260>
					else ret = (ret << 1);
    284e:	22 0f       	add	r18, r18
    2850:	cb 01       	movw	r24, r22
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <_Z4loopv+0x268>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	ea 95       	dec	r30
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <_Z4loopv+0x264>
    285c:	fc 01       	movw	r30, r24
    285e:	38 30       	cpi	r19, 0x08	; 8
    2860:	10 f4       	brcc	.+4      	; 0x2866 <_Z4loopv+0x276>
    2862:	89 b1       	in	r24, 0x09	; 9
    2864:	01 c0       	rjmp	.+2      	; 0x2868 <_Z4loopv+0x278>
    2866:	83 b1       	in	r24, 0x03	; 3
					while (read(_port));
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	8e 23       	and	r24, r30
    286c:	9f 23       	and	r25, r31
    286e:	89 2b       	or	r24, r25
    2870:	b1 f7       	brne	.-20     	; 0x285e <_Z4loopv+0x26e>
    2872:	41 50       	subi	r20, 0x01	; 1
    2874:	51 09       	sbc	r21, r1
				
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
    2876:	09 f0       	breq	.+2      	; 0x287a <_Z4loopv+0x28a>
    2878:	be cf       	rjmp	.-132    	; 0x27f6 <_Z4loopv+0x206>
    287a:	48 e0       	ldi	r20, 0x08	; 8
    287c:	50 e0       	ldi	r21, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	61 e0       	ldi	r22, 0x01	; 1
    2882:	70 e0       	ldi	r23, 0x00	; 0
					while (!read(_port));
    2884:	d8 01       	movw	r26, r16
    2886:	ec 91       	ld	r30, X
    2888:	8e 2f       	mov	r24, r30
    288a:	87 70       	andi	r24, 0x07	; 7
    288c:	db 01       	movw	r26, r22
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <_Z4loopv+0x2a4>
    2890:	aa 0f       	add	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	8a 95       	dec	r24
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <_Z4loopv+0x2a0>
    2898:	e8 30       	cpi	r30, 0x08	; 8
    289a:	10 f4       	brcc	.+4      	; 0x28a0 <_Z4loopv+0x2b0>
    289c:	89 b1       	in	r24, 0x09	; 9
    289e:	01 c0       	rjmp	.+2      	; 0x28a2 <_Z4loopv+0x2b2>
    28a0:	83 b1       	in	r24, 0x03	; 3
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	8a 23       	and	r24, r26
    28a6:	9b 23       	and	r25, r27
    28a8:	89 2b       	or	r24, r25
    28aa:	b1 f3       	breq	.-20     	; 0x2898 <_Z4loopv+0x2a8>
    28ac:	b0 ea       	ldi	r27, 0xA0	; 160
    28ae:	ba 95       	dec	r27
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <_Z4loopv+0x2be>
					util::delay_us_static(30);
					if (read(_port)) ret = (ret << 1) | (0x01);
    28b2:	d8 01       	movw	r26, r16
    28b4:	ec 91       	ld	r30, X
    28b6:	e8 30       	cpi	r30, 0x08	; 8
    28b8:	10 f4       	brcc	.+4      	; 0x28be <_Z4loopv+0x2ce>
    28ba:	89 b1       	in	r24, 0x09	; 9
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <_Z4loopv+0x2d0>
    28be:	83 b1       	in	r24, 0x03	; 3
    28c0:	fe 2f       	mov	r31, r30
    28c2:	f7 70       	andi	r31, 0x07	; 7
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0f 2e       	mov	r0, r31
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <_Z4loopv+0x2de>
    28ca:	95 95       	asr	r25
    28cc:	87 95       	ror	r24
    28ce:	0a 94       	dec	r0
    28d0:	e2 f7       	brpl	.-8      	; 0x28ca <_Z4loopv+0x2da>
    28d2:	80 ff       	sbrs	r24, 0
    28d4:	03 c0       	rjmp	.+6      	; 0x28dc <_Z4loopv+0x2ec>
    28d6:	33 0f       	add	r19, r19
    28d8:	31 60       	ori	r19, 0x01	; 1
    28da:	01 c0       	rjmp	.+2      	; 0x28de <_Z4loopv+0x2ee>
					else ret = (ret << 1);
    28dc:	33 0f       	add	r19, r19
    28de:	db 01       	movw	r26, r22
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <_Z4loopv+0x2f6>
    28e2:	aa 0f       	add	r26, r26
    28e4:	bb 1f       	adc	r27, r27
    28e6:	fa 95       	dec	r31
    28e8:	e2 f7       	brpl	.-8      	; 0x28e2 <_Z4loopv+0x2f2>
    28ea:	e8 30       	cpi	r30, 0x08	; 8
    28ec:	10 f4       	brcc	.+4      	; 0x28f2 <_Z4loopv+0x302>
    28ee:	89 b1       	in	r24, 0x09	; 9
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <_Z4loopv+0x304>
    28f2:	83 b1       	in	r24, 0x03	; 3
					while (read(_port));
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	8a 23       	and	r24, r26
    28f8:	9b 23       	and	r25, r27
    28fa:	89 2b       	or	r24, r25
    28fc:	b1 f7       	brne	.-20     	; 0x28ea <_Z4loopv+0x2fa>
    28fe:	41 50       	subi	r20, 0x01	; 1
    2900:	51 09       	sbc	r21, r1
				
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
    2902:	09 f0       	breq	.+2      	; 0x2906 <_Z4loopv+0x316>
    2904:	bf cf       	rjmp	.-130    	; 0x2884 <_Z4loopv+0x294>
    2906:	48 e0       	ldi	r20, 0x08	; 8
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	e0 e0       	ldi	r30, 0x00	; 0
    290c:	61 e0       	ldi	r22, 0x01	; 1
    290e:	70 e0       	ldi	r23, 0x00	; 0
					while (!read(_port));
    2910:	d8 01       	movw	r26, r16
    2912:	fc 91       	ld	r31, X
    2914:	8f 2f       	mov	r24, r31
    2916:	87 70       	andi	r24, 0x07	; 7
    2918:	db 01       	movw	r26, r22
    291a:	02 c0       	rjmp	.+4      	; 0x2920 <_Z4loopv+0x330>
    291c:	aa 0f       	add	r26, r26
    291e:	bb 1f       	adc	r27, r27
    2920:	8a 95       	dec	r24
    2922:	e2 f7       	brpl	.-8      	; 0x291c <_Z4loopv+0x32c>
    2924:	f8 30       	cpi	r31, 0x08	; 8
    2926:	10 f4       	brcc	.+4      	; 0x292c <_Z4loopv+0x33c>
    2928:	89 b1       	in	r24, 0x09	; 9
    292a:	01 c0       	rjmp	.+2      	; 0x292e <_Z4loopv+0x33e>
    292c:	83 b1       	in	r24, 0x03	; 3
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	8a 23       	and	r24, r26
    2932:	9b 23       	and	r25, r27
    2934:	89 2b       	or	r24, r25
    2936:	b1 f3       	breq	.-20     	; 0x2924 <_Z4loopv+0x334>
    2938:	b0 ea       	ldi	r27, 0xA0	; 160
    293a:	ba 95       	dec	r27
    293c:	f1 f7       	brne	.-4      	; 0x293a <_Z4loopv+0x34a>
					util::delay_us_static(30);
					if (read(_port)) ret = (ret << 1) | (0x01);
    293e:	d8 01       	movw	r26, r16
    2940:	fc 91       	ld	r31, X
    2942:	f8 30       	cpi	r31, 0x08	; 8
    2944:	10 f4       	brcc	.+4      	; 0x294a <_Z4loopv+0x35a>
    2946:	89 b1       	in	r24, 0x09	; 9
    2948:	01 c0       	rjmp	.+2      	; 0x294c <_Z4loopv+0x35c>
    294a:	83 b1       	in	r24, 0x03	; 3
    294c:	af 2f       	mov	r26, r31
    294e:	a7 70       	andi	r26, 0x07	; 7
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0a 2e       	mov	r0, r26
    2954:	02 c0       	rjmp	.+4      	; 0x295a <_Z4loopv+0x36a>
    2956:	95 95       	asr	r25
    2958:	87 95       	ror	r24
    295a:	0a 94       	dec	r0
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <_Z4loopv+0x366>
    295e:	80 ff       	sbrs	r24, 0
    2960:	03 c0       	rjmp	.+6      	; 0x2968 <_Z4loopv+0x378>
    2962:	ee 0f       	add	r30, r30
    2964:	e1 60       	ori	r30, 0x01	; 1
    2966:	01 c0       	rjmp	.+2      	; 0x296a <_Z4loopv+0x37a>
					else ret = (ret << 1);
    2968:	ee 0f       	add	r30, r30
    296a:	cb 01       	movw	r24, r22
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <_Z4loopv+0x382>
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	aa 95       	dec	r26
    2974:	e2 f7       	brpl	.-8      	; 0x296e <_Z4loopv+0x37e>
    2976:	dc 01       	movw	r26, r24
    2978:	f8 30       	cpi	r31, 0x08	; 8
    297a:	10 f4       	brcc	.+4      	; 0x2980 <_Z4loopv+0x390>
    297c:	89 b1       	in	r24, 0x09	; 9
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <_Z4loopv+0x392>
    2980:	83 b1       	in	r24, 0x03	; 3
					while (read(_port));
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	8a 23       	and	r24, r26
    2986:	9b 23       	and	r25, r27
    2988:	89 2b       	or	r24, r25
    298a:	b1 f7       	brne	.-20     	; 0x2978 <_Z4loopv+0x388>
    298c:	41 50       	subi	r20, 0x01	; 1
    298e:	51 09       	sbc	r21, r1
				
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
    2990:	09 f0       	breq	.+2      	; 0x2994 <_Z4loopv+0x3a4>
    2992:	be cf       	rjmp	.-132    	; 0x2910 <_Z4loopv+0x320>
    2994:	48 e0       	ldi	r20, 0x08	; 8
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	e1 2c       	mov	r14, r1
    299a:	61 e0       	ldi	r22, 0x01	; 1
    299c:	70 e0       	ldi	r23, 0x00	; 0
					while (!read(_port));
    299e:	d8 01       	movw	r26, r16
    29a0:	fc 91       	ld	r31, X
    29a2:	8f 2f       	mov	r24, r31
    29a4:	87 70       	andi	r24, 0x07	; 7
    29a6:	db 01       	movw	r26, r22
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <_Z4loopv+0x3be>
    29aa:	aa 0f       	add	r26, r26
    29ac:	bb 1f       	adc	r27, r27
    29ae:	8a 95       	dec	r24
    29b0:	e2 f7       	brpl	.-8      	; 0x29aa <_Z4loopv+0x3ba>
    29b2:	f8 30       	cpi	r31, 0x08	; 8
    29b4:	10 f4       	brcc	.+4      	; 0x29ba <_Z4loopv+0x3ca>
    29b6:	89 b1       	in	r24, 0x09	; 9
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <_Z4loopv+0x3cc>
    29ba:	83 b1       	in	r24, 0x03	; 3
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	8a 23       	and	r24, r26
    29c0:	9b 23       	and	r25, r27
    29c2:	89 2b       	or	r24, r25
    29c4:	b1 f3       	breq	.-20     	; 0x29b2 <_Z4loopv+0x3c2>
    29c6:	b0 ea       	ldi	r27, 0xA0	; 160
    29c8:	ba 95       	dec	r27
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <_Z4loopv+0x3d8>
					util::delay_us_static(30);
					if (read(_port)) ret = (ret << 1) | (0x01);
    29cc:	d8 01       	movw	r26, r16
    29ce:	fc 91       	ld	r31, X
    29d0:	f8 30       	cpi	r31, 0x08	; 8
    29d2:	10 f4       	brcc	.+4      	; 0x29d8 <_Z4loopv+0x3e8>
    29d4:	89 b1       	in	r24, 0x09	; 9
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <_Z4loopv+0x3ea>
    29d8:	83 b1       	in	r24, 0x03	; 3
    29da:	af 2f       	mov	r26, r31
    29dc:	a7 70       	andi	r26, 0x07	; 7
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	0a 2e       	mov	r0, r26
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <_Z4loopv+0x3f8>
    29e4:	95 95       	asr	r25
    29e6:	87 95       	ror	r24
    29e8:	0a 94       	dec	r0
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <_Z4loopv+0x3f4>
    29ec:	80 ff       	sbrs	r24, 0
    29ee:	05 c0       	rjmp	.+10     	; 0x29fa <_Z4loopv+0x40a>
    29f0:	8e 2d       	mov	r24, r14
    29f2:	88 0f       	add	r24, r24
    29f4:	81 60       	ori	r24, 0x01	; 1
    29f6:	e8 2e       	mov	r14, r24
    29f8:	01 c0       	rjmp	.+2      	; 0x29fc <_Z4loopv+0x40c>
					else ret = (ret << 1);
    29fa:	ee 0c       	add	r14, r14
    29fc:	cb 01       	movw	r24, r22
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <_Z4loopv+0x414>
    2a00:	88 0f       	add	r24, r24
    2a02:	99 1f       	adc	r25, r25
    2a04:	aa 95       	dec	r26
    2a06:	e2 f7       	brpl	.-8      	; 0x2a00 <_Z4loopv+0x410>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	f8 30       	cpi	r31, 0x08	; 8
    2a0c:	10 f4       	brcc	.+4      	; 0x2a12 <_Z4loopv+0x422>
    2a0e:	89 b1       	in	r24, 0x09	; 9
    2a10:	01 c0       	rjmp	.+2      	; 0x2a14 <_Z4loopv+0x424>
    2a12:	83 b1       	in	r24, 0x03	; 3
					while (read(_port));
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	8a 23       	and	r24, r26
    2a18:	9b 23       	and	r25, r27
    2a1a:	89 2b       	or	r24, r25
    2a1c:	b1 f7       	brne	.-20     	; 0x2a0a <_Z4loopv+0x41a>
    2a1e:	41 50       	subi	r20, 0x01	; 1
    2a20:	51 09       	sbc	r21, r1
				
			}
			
			private: inline uint8 Receive() {
				uint8 ret = 0;
				for (int i = 0; i < 8; i++) {
    2a22:	09 f0       	breq	.+2      	; 0x2a26 <_Z4loopv+0x436>
    2a24:	bc cf       	rjmp	.-136    	; 0x299e <_Z4loopv+0x3ae>
	
	char tempStr[5], humStr[5];
	
	if (response.checksum) {
    2a26:	82 2f       	mov	r24, r18
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	8f 0d       	add	r24, r15
    2a2c:	91 1d       	adc	r25, r1
    2a2e:	83 0f       	add	r24, r19
    2a30:	91 1d       	adc	r25, r1
    2a32:	8e 0f       	add	r24, r30
    2a34:	91 1d       	adc	r25, r1
    2a36:	4e 2d       	mov	r20, r14
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	84 17       	cp	r24, r20
    2a3c:	95 07       	cpc	r25, r21
    2a3e:	01 f5       	brne	.+64     	; 0x2a80 <_Z4loopv+0x490>
		sprintf(tempStr, "%4d", response.temperature);
    2a40:	1f 92       	push	r1
    2a42:	1f 92       	push	r1
    2a44:	1f 92       	push	r1
    2a46:	3f 93       	push	r19
    2a48:	0a e4       	ldi	r16, 0x4A	; 74
    2a4a:	11 e0       	ldi	r17, 0x01	; 1
    2a4c:	1f 93       	push	r17
    2a4e:	0f 93       	push	r16
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	9f 93       	push	r25
    2a56:	8f 93       	push	r24
    2a58:	0e 94 a6 23 	call	0x474c	; 0x474c <sprintf>
		sprintf(humStr, "%4d", response.humidity);
    2a5c:	1f 92       	push	r1
    2a5e:	1f 92       	push	r1
    2a60:	1f 92       	push	r1
    2a62:	ff 92       	push	r15
    2a64:	1f 93       	push	r17
    2a66:	0f 93       	push	r16
    2a68:	ce 01       	movw	r24, r28
    2a6a:	06 96       	adiw	r24, 0x06	; 6
    2a6c:	9f 93       	push	r25
    2a6e:	8f 93       	push	r24
    2a70:	0e 94 a6 23 	call	0x474c	; 0x474c <sprintf>
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	12 c0       	rjmp	.+36     	; 0x2aa4 <_Z4loopv+0x4b4>
	} else {
		sprintf(tempStr, "ERRO");
    2a80:	85 e0       	ldi	r24, 0x05	; 5
    2a82:	ee e4       	ldi	r30, 0x4E	; 78
    2a84:	f1 e0       	ldi	r31, 0x01	; 1
    2a86:	de 01       	movw	r26, r28
    2a88:	11 96       	adiw	r26, 0x01	; 1
    2a8a:	01 90       	ld	r0, Z+
    2a8c:	0d 92       	st	X+, r0
    2a8e:	8a 95       	dec	r24
    2a90:	e1 f7       	brne	.-8      	; 0x2a8a <_Z4loopv+0x49a>
		sprintf(humStr, "ERRO");
    2a92:	85 e0       	ldi	r24, 0x05	; 5
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f1 e0       	ldi	r31, 0x01	; 1
    2a98:	de 01       	movw	r26, r28
    2a9a:	16 96       	adiw	r26, 0x06	; 6
    2a9c:	01 90       	ld	r0, Z+
    2a9e:	0d 92       	st	X+, r0
    2aa0:	8a 95       	dec	r24
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <_Z4loopv+0x4ac>
	}

	lcd->Write(tempStr, 0, 10);
    2aa4:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <lcd>
    2aa8:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2aae:	88 30       	cpi	r24, 0x08	; 8
    2ab0:	78 f4       	brcc	.+30     	; 0x2ad0 <_Z4loopv+0x4e0>
    2ab2:	4b b1       	in	r20, 0x0b	; 11
    2ab4:	87 70       	andi	r24, 0x07	; 7
    2ab6:	21 e0       	ldi	r18, 0x01	; 1
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	89 01       	movw	r16, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <_Z4loopv+0x4d2>
    2abe:	00 0f       	add	r16, r16
    2ac0:	11 1f       	adc	r17, r17
    2ac2:	8a 95       	dec	r24
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <_Z4loopv+0x4ce>
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	80 95       	com	r24
    2aca:	84 23       	and	r24, r20
    2acc:	8b b9       	out	0x0b, r24	; 11
    2ace:	0e c0       	rjmp	.+28     	; 0x2aec <_Z4loopv+0x4fc>
    2ad0:	45 b1       	in	r20, 0x05	; 5
    2ad2:	87 70       	andi	r24, 0x07	; 7
    2ad4:	21 e0       	ldi	r18, 0x01	; 1
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	b9 01       	movw	r22, r18
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <_Z4loopv+0x4f0>
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	8a 95       	dec	r24
    2ae2:	e2 f7       	brpl	.-8      	; 0x2adc <_Z4loopv+0x4ec>
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	80 95       	com	r24
    2ae8:	84 23       	and	r24, r20
    2aea:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2aec:	83 81       	ldd	r24, Z+3	; 0x03
    2aee:	88 30       	cpi	r24, 0x08	; 8
    2af0:	78 f4       	brcc	.+30     	; 0x2b10 <_Z4loopv+0x520>
    2af2:	4b b1       	in	r20, 0x0b	; 11
    2af4:	87 70       	andi	r24, 0x07	; 7
    2af6:	21 e0       	ldi	r18, 0x01	; 1
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	d9 01       	movw	r26, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <_Z4loopv+0x512>
    2afe:	aa 0f       	add	r26, r26
    2b00:	bb 1f       	adc	r27, r27
    2b02:	8a 95       	dec	r24
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <_Z4loopv+0x50e>
    2b06:	cd 01       	movw	r24, r26
    2b08:	80 95       	com	r24
    2b0a:	84 23       	and	r24, r20
    2b0c:	8b b9       	out	0x0b, r24	; 11
    2b0e:	0e c0       	rjmp	.+28     	; 0x2b2c <_Z4loopv+0x53c>
    2b10:	45 b1       	in	r20, 0x05	; 5
    2b12:	87 70       	andi	r24, 0x07	; 7
    2b14:	21 e0       	ldi	r18, 0x01	; 1
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	89 01       	movw	r16, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <_Z4loopv+0x530>
    2b1c:	00 0f       	add	r16, r16
    2b1e:	11 1f       	adc	r17, r17
    2b20:	8a 95       	dec	r24
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <_Z4loopv+0x52c>
    2b24:	c8 01       	movw	r24, r16
    2b26:	80 95       	com	r24
    2b28:	84 23       	and	r24, r20
    2b2a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    2b2c:	84 81       	ldd	r24, Z+4	; 0x04
    2b2e:	88 30       	cpi	r24, 0x08	; 8
    2b30:	78 f4       	brcc	.+30     	; 0x2b50 <_Z4loopv+0x560>
    2b32:	4b b1       	in	r20, 0x0b	; 11
    2b34:	87 70       	andi	r24, 0x07	; 7
    2b36:	21 e0       	ldi	r18, 0x01	; 1
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	b9 01       	movw	r22, r18
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <_Z4loopv+0x552>
    2b3e:	66 0f       	add	r22, r22
    2b40:	77 1f       	adc	r23, r23
    2b42:	8a 95       	dec	r24
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <_Z4loopv+0x54e>
    2b46:	cb 01       	movw	r24, r22
    2b48:	80 95       	com	r24
    2b4a:	84 23       	and	r24, r20
    2b4c:	8b b9       	out	0x0b, r24	; 11
    2b4e:	0e c0       	rjmp	.+28     	; 0x2b6c <_Z4loopv+0x57c>
    2b50:	45 b1       	in	r20, 0x05	; 5
    2b52:	87 70       	andi	r24, 0x07	; 7
    2b54:	21 e0       	ldi	r18, 0x01	; 1
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	d9 01       	movw	r26, r18
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <_Z4loopv+0x570>
    2b5c:	aa 0f       	add	r26, r26
    2b5e:	bb 1f       	adc	r27, r27
    2b60:	8a 95       	dec	r24
    2b62:	e2 f7       	brpl	.-8      	; 0x2b5c <_Z4loopv+0x56c>
    2b64:	cd 01       	movw	r24, r26
    2b66:	80 95       	com	r24
    2b68:	84 23       	and	r24, r20
    2b6a:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2b6c:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2b6e:	88 30       	cpi	r24, 0x08	; 8
    2b70:	70 f4       	brcc	.+28     	; 0x2b8e <_Z4loopv+0x59e>
    2b72:	4b b1       	in	r20, 0x0b	; 11
    2b74:	87 70       	andi	r24, 0x07	; 7
    2b76:	21 e0       	ldi	r18, 0x01	; 1
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	89 01       	movw	r16, r18
    2b7c:	02 c0       	rjmp	.+4      	; 0x2b82 <_Z4loopv+0x592>
    2b7e:	00 0f       	add	r16, r16
    2b80:	11 1f       	adc	r17, r17
    2b82:	8a 95       	dec	r24
    2b84:	e2 f7       	brpl	.-8      	; 0x2b7e <_Z4loopv+0x58e>
    2b86:	c8 01       	movw	r24, r16
    2b88:	84 2b       	or	r24, r20
    2b8a:	8b b9       	out	0x0b, r24	; 11
    2b8c:	0d c0       	rjmp	.+26     	; 0x2ba8 <_Z4loopv+0x5b8>
    2b8e:	45 b1       	in	r20, 0x05	; 5
    2b90:	87 70       	andi	r24, 0x07	; 7
    2b92:	21 e0       	ldi	r18, 0x01	; 1
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	b9 01       	movw	r22, r18
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <_Z4loopv+0x5ae>
    2b9a:	66 0f       	add	r22, r22
    2b9c:	77 1f       	adc	r23, r23
    2b9e:	8a 95       	dec	r24
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <_Z4loopv+0x5aa>
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	84 2b       	or	r24, r20
    2ba6:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2ba8:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2baa:	88 30       	cpi	r24, 0x08	; 8
    2bac:	78 f4       	brcc	.+30     	; 0x2bcc <_Z4loopv+0x5dc>
    2bae:	4b b1       	in	r20, 0x0b	; 11
    2bb0:	87 70       	andi	r24, 0x07	; 7
    2bb2:	21 e0       	ldi	r18, 0x01	; 1
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	d9 01       	movw	r26, r18
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <_Z4loopv+0x5ce>
    2bba:	aa 0f       	add	r26, r26
    2bbc:	bb 1f       	adc	r27, r27
    2bbe:	8a 95       	dec	r24
    2bc0:	e2 f7       	brpl	.-8      	; 0x2bba <_Z4loopv+0x5ca>
    2bc2:	cd 01       	movw	r24, r26
    2bc4:	80 95       	com	r24
    2bc6:	84 23       	and	r24, r20
    2bc8:	8b b9       	out	0x0b, r24	; 11
    2bca:	0e c0       	rjmp	.+28     	; 0x2be8 <_Z4loopv+0x5f8>
    2bcc:	45 b1       	in	r20, 0x05	; 5
    2bce:	87 70       	andi	r24, 0x07	; 7
    2bd0:	21 e0       	ldi	r18, 0x01	; 1
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	89 01       	movw	r16, r18
    2bd6:	02 c0       	rjmp	.+4      	; 0x2bdc <_Z4loopv+0x5ec>
    2bd8:	00 0f       	add	r16, r16
    2bda:	11 1f       	adc	r17, r17
    2bdc:	8a 95       	dec	r24
    2bde:	e2 f7       	brpl	.-8      	; 0x2bd8 <_Z4loopv+0x5e8>
    2be0:	c8 01       	movw	r24, r16
    2be2:	80 95       	com	r24
    2be4:	84 23       	and	r24, r20
    2be6:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2be8:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2bea:	88 30       	cpi	r24, 0x08	; 8
    2bec:	70 f4       	brcc	.+28     	; 0x2c0a <_Z4loopv+0x61a>
    2bee:	4b b1       	in	r20, 0x0b	; 11
    2bf0:	87 70       	andi	r24, 0x07	; 7
    2bf2:	21 e0       	ldi	r18, 0x01	; 1
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <_Z4loopv+0x60e>
    2bfa:	66 0f       	add	r22, r22
    2bfc:	77 1f       	adc	r23, r23
    2bfe:	8a 95       	dec	r24
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <_Z4loopv+0x60a>
    2c02:	cb 01       	movw	r24, r22
    2c04:	84 2b       	or	r24, r20
    2c06:	8b b9       	out	0x0b, r24	; 11
    2c08:	0d c0       	rjmp	.+26     	; 0x2c24 <_Z4loopv+0x634>
    2c0a:	45 b1       	in	r20, 0x05	; 5
    2c0c:	87 70       	andi	r24, 0x07	; 7
    2c0e:	21 e0       	ldi	r18, 0x01	; 1
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	d9 01       	movw	r26, r18
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <_Z4loopv+0x62a>
    2c16:	aa 0f       	add	r26, r26
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	8a 95       	dec	r24
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <_Z4loopv+0x626>
    2c1e:	cd 01       	movw	r24, r26
    2c20:	84 2b       	or	r24, r20
    2c22:	85 b9       	out	0x05, r24	; 5
    2c24:	b5 e0       	ldi	r27, 0x05	; 5
    2c26:	ba 95       	dec	r27
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <_Z4loopv+0x636>
    2c2a:	00 00       	nop
    2c2c:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2c2e:	88 30       	cpi	r24, 0x08	; 8
    2c30:	78 f4       	brcc	.+30     	; 0x2c50 <_Z4loopv+0x660>
    2c32:	4b b1       	in	r20, 0x0b	; 11
    2c34:	87 70       	andi	r24, 0x07	; 7
    2c36:	21 e0       	ldi	r18, 0x01	; 1
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	89 01       	movw	r16, r18
    2c3c:	02 c0       	rjmp	.+4      	; 0x2c42 <_Z4loopv+0x652>
    2c3e:	00 0f       	add	r16, r16
    2c40:	11 1f       	adc	r17, r17
    2c42:	8a 95       	dec	r24
    2c44:	e2 f7       	brpl	.-8      	; 0x2c3e <_Z4loopv+0x64e>
    2c46:	c8 01       	movw	r24, r16
    2c48:	80 95       	com	r24
    2c4a:	84 23       	and	r24, r20
    2c4c:	8b b9       	out	0x0b, r24	; 11
    2c4e:	0e c0       	rjmp	.+28     	; 0x2c6c <_Z4loopv+0x67c>
    2c50:	45 b1       	in	r20, 0x05	; 5
    2c52:	87 70       	andi	r24, 0x07	; 7
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	b9 01       	movw	r22, r18
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <_Z4loopv+0x670>
    2c5c:	66 0f       	add	r22, r22
    2c5e:	77 1f       	adc	r23, r23
    2c60:	8a 95       	dec	r24
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <_Z4loopv+0x66c>
    2c64:	cb 01       	movw	r24, r22
    2c66:	80 95       	com	r24
    2c68:	84 23       	and	r24, r20
    2c6a:	85 b9       	out	0x05, r24	; 5
    2c6c:	8f e1       	ldi	r24, 0x1F	; 31
    2c6e:	93 e0       	ldi	r25, 0x03	; 3
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <_Z4loopv+0x680>
    2c74:	00 c0       	rjmp	.+0      	; 0x2c76 <_Z4loopv+0x686>
    2c76:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	88 30       	cpi	r24, 0x08	; 8
    2c7c:	78 f4       	brcc	.+30     	; 0x2c9c <_Z4loopv+0x6ac>
    2c7e:	4b b1       	in	r20, 0x0b	; 11
    2c80:	87 70       	andi	r24, 0x07	; 7
    2c82:	21 e0       	ldi	r18, 0x01	; 1
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	d9 01       	movw	r26, r18
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <_Z4loopv+0x69e>
    2c8a:	aa 0f       	add	r26, r26
    2c8c:	bb 1f       	adc	r27, r27
    2c8e:	8a 95       	dec	r24
    2c90:	e2 f7       	brpl	.-8      	; 0x2c8a <_Z4loopv+0x69a>
    2c92:	cd 01       	movw	r24, r26
    2c94:	80 95       	com	r24
    2c96:	84 23       	and	r24, r20
    2c98:	8b b9       	out	0x0b, r24	; 11
    2c9a:	0e c0       	rjmp	.+28     	; 0x2cb8 <_Z4loopv+0x6c8>
    2c9c:	45 b1       	in	r20, 0x05	; 5
    2c9e:	87 70       	andi	r24, 0x07	; 7
    2ca0:	21 e0       	ldi	r18, 0x01	; 1
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	89 01       	movw	r16, r18
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <_Z4loopv+0x6bc>
    2ca8:	00 0f       	add	r16, r16
    2caa:	11 1f       	adc	r17, r17
    2cac:	8a 95       	dec	r24
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <_Z4loopv+0x6b8>
    2cb0:	c8 01       	movw	r24, r16
    2cb2:	80 95       	com	r24
    2cb4:	84 23       	and	r24, r20
    2cb6:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    2cb8:	83 81       	ldd	r24, Z+3	; 0x03
    2cba:	88 30       	cpi	r24, 0x08	; 8
    2cbc:	78 f4       	brcc	.+30     	; 0x2cdc <_Z4loopv+0x6ec>
    2cbe:	4b b1       	in	r20, 0x0b	; 11
    2cc0:	87 70       	andi	r24, 0x07	; 7
    2cc2:	21 e0       	ldi	r18, 0x01	; 1
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <_Z4loopv+0x6de>
    2cca:	66 0f       	add	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	8a 95       	dec	r24
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <_Z4loopv+0x6da>
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	80 95       	com	r24
    2cd6:	84 23       	and	r24, r20
    2cd8:	8b b9       	out	0x0b, r24	; 11
    2cda:	0e c0       	rjmp	.+28     	; 0x2cf8 <_Z4loopv+0x708>
    2cdc:	45 b1       	in	r20, 0x05	; 5
    2cde:	87 70       	andi	r24, 0x07	; 7
    2ce0:	21 e0       	ldi	r18, 0x01	; 1
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	d9 01       	movw	r26, r18
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <_Z4loopv+0x6fc>
    2ce8:	aa 0f       	add	r26, r26
    2cea:	bb 1f       	adc	r27, r27
    2cec:	8a 95       	dec	r24
    2cee:	e2 f7       	brpl	.-8      	; 0x2ce8 <_Z4loopv+0x6f8>
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	80 95       	com	r24
    2cf4:	84 23       	and	r24, r20
    2cf6:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    2cf8:	84 81       	ldd	r24, Z+4	; 0x04
    2cfa:	88 30       	cpi	r24, 0x08	; 8
    2cfc:	78 f4       	brcc	.+30     	; 0x2d1c <_Z4loopv+0x72c>
    2cfe:	4b b1       	in	r20, 0x0b	; 11
    2d00:	87 70       	andi	r24, 0x07	; 7
    2d02:	21 e0       	ldi	r18, 0x01	; 1
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	89 01       	movw	r16, r18
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <_Z4loopv+0x71e>
    2d0a:	00 0f       	add	r16, r16
    2d0c:	11 1f       	adc	r17, r17
    2d0e:	8a 95       	dec	r24
    2d10:	e2 f7       	brpl	.-8      	; 0x2d0a <_Z4loopv+0x71a>
    2d12:	c8 01       	movw	r24, r16
    2d14:	80 95       	com	r24
    2d16:	84 23       	and	r24, r20
    2d18:	8b b9       	out	0x0b, r24	; 11
    2d1a:	0e c0       	rjmp	.+28     	; 0x2d38 <_Z4loopv+0x748>
    2d1c:	45 b1       	in	r20, 0x05	; 5
    2d1e:	87 70       	andi	r24, 0x07	; 7
    2d20:	21 e0       	ldi	r18, 0x01	; 1
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	b9 01       	movw	r22, r18
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <_Z4loopv+0x73c>
    2d28:	66 0f       	add	r22, r22
    2d2a:	77 1f       	adc	r23, r23
    2d2c:	8a 95       	dec	r24
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <_Z4loopv+0x738>
    2d30:	cb 01       	movw	r24, r22
    2d32:	80 95       	com	r24
    2d34:	84 23       	and	r24, r20
    2d36:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    2d38:	85 81       	ldd	r24, Z+5	; 0x05
    2d3a:	88 30       	cpi	r24, 0x08	; 8
    2d3c:	78 f4       	brcc	.+30     	; 0x2d5c <_Z4loopv+0x76c>
    2d3e:	4b b1       	in	r20, 0x0b	; 11
    2d40:	87 70       	andi	r24, 0x07	; 7
    2d42:	21 e0       	ldi	r18, 0x01	; 1
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	d9 01       	movw	r26, r18
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <_Z4loopv+0x75e>
    2d4a:	aa 0f       	add	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	8a 95       	dec	r24
    2d50:	e2 f7       	brpl	.-8      	; 0x2d4a <_Z4loopv+0x75a>
    2d52:	cd 01       	movw	r24, r26
    2d54:	80 95       	com	r24
    2d56:	84 23       	and	r24, r20
    2d58:	8b b9       	out	0x0b, r24	; 11
    2d5a:	0e c0       	rjmp	.+28     	; 0x2d78 <_Z4loopv+0x788>
    2d5c:	45 b1       	in	r20, 0x05	; 5
    2d5e:	87 70       	andi	r24, 0x07	; 7
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	89 01       	movw	r16, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <_Z4loopv+0x77c>
    2d68:	00 0f       	add	r16, r16
    2d6a:	11 1f       	adc	r17, r17
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <_Z4loopv+0x778>
    2d70:	c8 01       	movw	r24, r16
    2d72:	80 95       	com	r24
    2d74:	84 23       	and	r24, r20
    2d76:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2d78:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2d7a:	88 30       	cpi	r24, 0x08	; 8
    2d7c:	70 f4       	brcc	.+28     	; 0x2d9a <_Z4loopv+0x7aa>
    2d7e:	4b b1       	in	r20, 0x0b	; 11
    2d80:	87 70       	andi	r24, 0x07	; 7
    2d82:	21 e0       	ldi	r18, 0x01	; 1
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	b9 01       	movw	r22, r18
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <_Z4loopv+0x79e>
    2d8a:	66 0f       	add	r22, r22
    2d8c:	77 1f       	adc	r23, r23
    2d8e:	8a 95       	dec	r24
    2d90:	e2 f7       	brpl	.-8      	; 0x2d8a <_Z4loopv+0x79a>
    2d92:	cb 01       	movw	r24, r22
    2d94:	84 2b       	or	r24, r20
    2d96:	8b b9       	out	0x0b, r24	; 11
    2d98:	0d c0       	rjmp	.+26     	; 0x2db4 <_Z4loopv+0x7c4>
    2d9a:	45 b1       	in	r20, 0x05	; 5
    2d9c:	87 70       	andi	r24, 0x07	; 7
    2d9e:	21 e0       	ldi	r18, 0x01	; 1
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	d9 01       	movw	r26, r18
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <_Z4loopv+0x7ba>
    2da6:	aa 0f       	add	r26, r26
    2da8:	bb 1f       	adc	r27, r27
    2daa:	8a 95       	dec	r24
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <_Z4loopv+0x7b6>
    2dae:	cd 01       	movw	r24, r26
    2db0:	84 2b       	or	r24, r20
    2db2:	85 b9       	out	0x05, r24	; 5
    2db4:	b5 e0       	ldi	r27, 0x05	; 5
    2db6:	ba 95       	dec	r27
    2db8:	f1 f7       	brne	.-4      	; 0x2db6 <_Z4loopv+0x7c6>
    2dba:	00 00       	nop
    2dbc:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2dbe:	88 30       	cpi	r24, 0x08	; 8
    2dc0:	78 f4       	brcc	.+30     	; 0x2de0 <_Z4loopv+0x7f0>
    2dc2:	4b b1       	in	r20, 0x0b	; 11
    2dc4:	87 70       	andi	r24, 0x07	; 7
    2dc6:	21 e0       	ldi	r18, 0x01	; 1
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	89 01       	movw	r16, r18
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <_Z4loopv+0x7e2>
    2dce:	00 0f       	add	r16, r16
    2dd0:	11 1f       	adc	r17, r17
    2dd2:	8a 95       	dec	r24
    2dd4:	e2 f7       	brpl	.-8      	; 0x2dce <_Z4loopv+0x7de>
    2dd6:	c8 01       	movw	r24, r16
    2dd8:	80 95       	com	r24
    2dda:	84 23       	and	r24, r20
    2ddc:	8b b9       	out	0x0b, r24	; 11
    2dde:	0e c0       	rjmp	.+28     	; 0x2dfc <_Z4loopv+0x80c>
    2de0:	45 b1       	in	r20, 0x05	; 5
    2de2:	87 70       	andi	r24, 0x07	; 7
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	b9 01       	movw	r22, r18
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <_Z4loopv+0x800>
    2dec:	66 0f       	add	r22, r22
    2dee:	77 1f       	adc	r23, r23
    2df0:	8a 95       	dec	r24
    2df2:	e2 f7       	brpl	.-8      	; 0x2dec <_Z4loopv+0x7fc>
    2df4:	cb 01       	movw	r24, r22
    2df6:	80 95       	com	r24
    2df8:	84 23       	and	r24, r20
    2dfa:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2dfc:	8f e3       	ldi	r24, 0x3F	; 63
    2dfe:	9f e1       	ldi	r25, 0x1F	; 31
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <_Z4loopv+0x810>
    2e04:	00 c0       	rjmp	.+0      	; 0x2e06 <_Z4loopv+0x816>
    2e06:	00 00       	nop
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    2e08:	82 81       	ldd	r24, Z+2	; 0x02
    2e0a:	88 30       	cpi	r24, 0x08	; 8
    2e0c:	78 f4       	brcc	.+30     	; 0x2e2c <_Z4loopv+0x83c>
    2e0e:	4b b1       	in	r20, 0x0b	; 11
    2e10:	87 70       	andi	r24, 0x07	; 7
    2e12:	21 e0       	ldi	r18, 0x01	; 1
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	d9 01       	movw	r26, r18
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <_Z4loopv+0x82e>
    2e1a:	aa 0f       	add	r26, r26
    2e1c:	bb 1f       	adc	r27, r27
    2e1e:	8a 95       	dec	r24
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <_Z4loopv+0x82a>
    2e22:	cd 01       	movw	r24, r26
    2e24:	80 95       	com	r24
    2e26:	84 23       	and	r24, r20
    2e28:	8b b9       	out	0x0b, r24	; 11
    2e2a:	0e c0       	rjmp	.+28     	; 0x2e48 <_Z4loopv+0x858>
    2e2c:	45 b1       	in	r20, 0x05	; 5
    2e2e:	87 70       	andi	r24, 0x07	; 7
    2e30:	21 e0       	ldi	r18, 0x01	; 1
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	89 01       	movw	r16, r18
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <_Z4loopv+0x84c>
    2e38:	00 0f       	add	r16, r16
    2e3a:	11 1f       	adc	r17, r17
    2e3c:	8a 95       	dec	r24
    2e3e:	e2 f7       	brpl	.-8      	; 0x2e38 <_Z4loopv+0x848>
    2e40:	c8 01       	movw	r24, r16
    2e42:	80 95       	com	r24
    2e44:	84 23       	and	r24, r20
    2e46:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    2e48:	83 81       	ldd	r24, Z+3	; 0x03
    2e4a:	88 30       	cpi	r24, 0x08	; 8
    2e4c:	78 f4       	brcc	.+30     	; 0x2e6c <_Z4loopv+0x87c>
    2e4e:	4b b1       	in	r20, 0x0b	; 11
    2e50:	87 70       	andi	r24, 0x07	; 7
    2e52:	21 e0       	ldi	r18, 0x01	; 1
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	b9 01       	movw	r22, r18
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <_Z4loopv+0x86e>
    2e5a:	66 0f       	add	r22, r22
    2e5c:	77 1f       	adc	r23, r23
    2e5e:	8a 95       	dec	r24
    2e60:	e2 f7       	brpl	.-8      	; 0x2e5a <_Z4loopv+0x86a>
    2e62:	cb 01       	movw	r24, r22
    2e64:	80 95       	com	r24
    2e66:	84 23       	and	r24, r20
    2e68:	8b b9       	out	0x0b, r24	; 11
    2e6a:	0e c0       	rjmp	.+28     	; 0x2e88 <_Z4loopv+0x898>
    2e6c:	45 b1       	in	r20, 0x05	; 5
    2e6e:	87 70       	andi	r24, 0x07	; 7
    2e70:	21 e0       	ldi	r18, 0x01	; 1
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	d9 01       	movw	r26, r18
    2e76:	02 c0       	rjmp	.+4      	; 0x2e7c <_Z4loopv+0x88c>
    2e78:	aa 0f       	add	r26, r26
    2e7a:	bb 1f       	adc	r27, r27
    2e7c:	8a 95       	dec	r24
    2e7e:	e2 f7       	brpl	.-8      	; 0x2e78 <_Z4loopv+0x888>
    2e80:	cd 01       	movw	r24, r26
    2e82:	80 95       	com	r24
    2e84:	84 23       	and	r24, r20
    2e86:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    2e88:	84 81       	ldd	r24, Z+4	; 0x04
    2e8a:	88 30       	cpi	r24, 0x08	; 8
    2e8c:	78 f4       	brcc	.+30     	; 0x2eac <_Z4loopv+0x8bc>
    2e8e:	4b b1       	in	r20, 0x0b	; 11
    2e90:	87 70       	andi	r24, 0x07	; 7
    2e92:	21 e0       	ldi	r18, 0x01	; 1
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	89 01       	movw	r16, r18
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <_Z4loopv+0x8ae>
    2e9a:	00 0f       	add	r16, r16
    2e9c:	11 1f       	adc	r17, r17
    2e9e:	8a 95       	dec	r24
    2ea0:	e2 f7       	brpl	.-8      	; 0x2e9a <_Z4loopv+0x8aa>
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	80 95       	com	r24
    2ea6:	84 23       	and	r24, r20
    2ea8:	8b b9       	out	0x0b, r24	; 11
    2eaa:	0e c0       	rjmp	.+28     	; 0x2ec8 <_Z4loopv+0x8d8>
    2eac:	45 b1       	in	r20, 0x05	; 5
    2eae:	87 70       	andi	r24, 0x07	; 7
    2eb0:	21 e0       	ldi	r18, 0x01	; 1
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	b9 01       	movw	r22, r18
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <_Z4loopv+0x8cc>
    2eb8:	66 0f       	add	r22, r22
    2eba:	77 1f       	adc	r23, r23
    2ebc:	8a 95       	dec	r24
    2ebe:	e2 f7       	brpl	.-8      	; 0x2eb8 <_Z4loopv+0x8c8>
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	80 95       	com	r24
    2ec4:	84 23       	and	r24, r20
    2ec6:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    2ec8:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2eca:	88 30       	cpi	r24, 0x08	; 8
    2ecc:	70 f4       	brcc	.+28     	; 0x2eea <_Z4loopv+0x8fa>
    2ece:	4b b1       	in	r20, 0x0b	; 11
    2ed0:	87 70       	andi	r24, 0x07	; 7
    2ed2:	21 e0       	ldi	r18, 0x01	; 1
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	d9 01       	movw	r26, r18
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <_Z4loopv+0x8ee>
    2eda:	aa 0f       	add	r26, r26
    2edc:	bb 1f       	adc	r27, r27
    2ede:	8a 95       	dec	r24
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <_Z4loopv+0x8ea>
    2ee2:	cd 01       	movw	r24, r26
    2ee4:	84 2b       	or	r24, r20
    2ee6:	8b b9       	out	0x0b, r24	; 11
    2ee8:	0d c0       	rjmp	.+26     	; 0x2f04 <_Z4loopv+0x914>
    2eea:	45 b1       	in	r20, 0x05	; 5
    2eec:	87 70       	andi	r24, 0x07	; 7
    2eee:	21 e0       	ldi	r18, 0x01	; 1
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	89 01       	movw	r16, r18
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <_Z4loopv+0x90a>
    2ef6:	00 0f       	add	r16, r16
    2ef8:	11 1f       	adc	r17, r17
    2efa:	8a 95       	dec	r24
    2efc:	e2 f7       	brpl	.-8      	; 0x2ef6 <_Z4loopv+0x906>
    2efe:	c8 01       	movw	r24, r16
    2f00:	84 2b       	or	r24, r20
    2f02:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    2f04:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2f06:	88 30       	cpi	r24, 0x08	; 8
    2f08:	78 f4       	brcc	.+30     	; 0x2f28 <_Z4loopv+0x938>
    2f0a:	4b b1       	in	r20, 0x0b	; 11
    2f0c:	87 70       	andi	r24, 0x07	; 7
    2f0e:	21 e0       	ldi	r18, 0x01	; 1
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	b9 01       	movw	r22, r18
    2f14:	02 c0       	rjmp	.+4      	; 0x2f1a <_Z4loopv+0x92a>
    2f16:	66 0f       	add	r22, r22
    2f18:	77 1f       	adc	r23, r23
    2f1a:	8a 95       	dec	r24
    2f1c:	e2 f7       	brpl	.-8      	; 0x2f16 <_Z4loopv+0x926>
    2f1e:	cb 01       	movw	r24, r22
    2f20:	80 95       	com	r24
    2f22:	84 23       	and	r24, r20
    2f24:	8b b9       	out	0x0b, r24	; 11
    2f26:	0e c0       	rjmp	.+28     	; 0x2f44 <_Z4loopv+0x954>
    2f28:	45 b1       	in	r20, 0x05	; 5
    2f2a:	87 70       	andi	r24, 0x07	; 7
    2f2c:	21 e0       	ldi	r18, 0x01	; 1
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	d9 01       	movw	r26, r18
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <_Z4loopv+0x948>
    2f34:	aa 0f       	add	r26, r26
    2f36:	bb 1f       	adc	r27, r27
    2f38:	8a 95       	dec	r24
    2f3a:	e2 f7       	brpl	.-8      	; 0x2f34 <_Z4loopv+0x944>
    2f3c:	cd 01       	movw	r24, r26
    2f3e:	80 95       	com	r24
    2f40:	84 23       	and	r24, r20
    2f42:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    2f44:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    2f46:	88 30       	cpi	r24, 0x08	; 8
    2f48:	70 f4       	brcc	.+28     	; 0x2f66 <_Z4loopv+0x976>
    2f4a:	4b b1       	in	r20, 0x0b	; 11
    2f4c:	87 70       	andi	r24, 0x07	; 7
    2f4e:	21 e0       	ldi	r18, 0x01	; 1
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	89 01       	movw	r16, r18
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <_Z4loopv+0x96a>
    2f56:	00 0f       	add	r16, r16
    2f58:	11 1f       	adc	r17, r17
    2f5a:	8a 95       	dec	r24
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <_Z4loopv+0x966>
    2f5e:	c8 01       	movw	r24, r16
    2f60:	84 2b       	or	r24, r20
    2f62:	8b b9       	out	0x0b, r24	; 11
    2f64:	0d c0       	rjmp	.+26     	; 0x2f80 <_Z4loopv+0x990>
    2f66:	45 b1       	in	r20, 0x05	; 5
    2f68:	87 70       	andi	r24, 0x07	; 7
    2f6a:	21 e0       	ldi	r18, 0x01	; 1
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	b9 01       	movw	r22, r18
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <_Z4loopv+0x986>
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	8a 95       	dec	r24
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <_Z4loopv+0x982>
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	84 2b       	or	r24, r20
    2f7e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f80:	75 e0       	ldi	r23, 0x05	; 5
    2f82:	7a 95       	dec	r23
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <_Z4loopv+0x992>
    2f86:	00 00       	nop
    2f88:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    2f8a:	88 30       	cpi	r24, 0x08	; 8
    2f8c:	78 f4       	brcc	.+30     	; 0x2fac <_Z4loopv+0x9bc>
    2f8e:	4b b1       	in	r20, 0x0b	; 11
    2f90:	87 70       	andi	r24, 0x07	; 7
    2f92:	21 e0       	ldi	r18, 0x01	; 1
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	d9 01       	movw	r26, r18
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <_Z4loopv+0x9ae>
    2f9a:	aa 0f       	add	r26, r26
    2f9c:	bb 1f       	adc	r27, r27
    2f9e:	8a 95       	dec	r24
    2fa0:	e2 f7       	brpl	.-8      	; 0x2f9a <_Z4loopv+0x9aa>
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	80 95       	com	r24
    2fa6:	84 23       	and	r24, r20
    2fa8:	8b b9       	out	0x0b, r24	; 11
    2faa:	0e c0       	rjmp	.+28     	; 0x2fc8 <_Z4loopv+0x9d8>
    2fac:	45 b1       	in	r20, 0x05	; 5
    2fae:	87 70       	andi	r24, 0x07	; 7
    2fb0:	21 e0       	ldi	r18, 0x01	; 1
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	89 01       	movw	r16, r18
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <_Z4loopv+0x9cc>
    2fb8:	00 0f       	add	r16, r16
    2fba:	11 1f       	adc	r17, r17
    2fbc:	8a 95       	dec	r24
    2fbe:	e2 f7       	brpl	.-8      	; 0x2fb8 <_Z4loopv+0x9c8>
    2fc0:	c8 01       	movw	r24, r16
    2fc2:	80 95       	com	r24
    2fc4:	84 23       	and	r24, r20
    2fc6:	85 b9       	out	0x05, r24	; 5
    2fc8:	8f e1       	ldi	r24, 0x1F	; 31
    2fca:	93 e0       	ldi	r25, 0x03	; 3
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <_Z4loopv+0x9dc>
    2fd0:	00 c0       	rjmp	.+0      	; 0x2fd2 <_Z4loopv+0x9e2>
    2fd2:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    2fd4:	82 81       	ldd	r24, Z+2	; 0x02
    2fd6:	88 30       	cpi	r24, 0x08	; 8
    2fd8:	78 f4       	brcc	.+30     	; 0x2ff8 <_Z4loopv+0xa08>
    2fda:	4b b1       	in	r20, 0x0b	; 11
    2fdc:	87 70       	andi	r24, 0x07	; 7
    2fde:	21 e0       	ldi	r18, 0x01	; 1
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	d9 01       	movw	r26, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <_Z4loopv+0x9fa>
    2fe6:	aa 0f       	add	r26, r26
    2fe8:	bb 1f       	adc	r27, r27
    2fea:	8a 95       	dec	r24
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <_Z4loopv+0x9f6>
    2fee:	cd 01       	movw	r24, r26
    2ff0:	80 95       	com	r24
    2ff2:	84 23       	and	r24, r20
    2ff4:	8b b9       	out	0x0b, r24	; 11
    2ff6:	0e c0       	rjmp	.+28     	; 0x3014 <_Z4loopv+0xa24>
    2ff8:	45 b1       	in	r20, 0x05	; 5
    2ffa:	87 70       	andi	r24, 0x07	; 7
    2ffc:	21 e0       	ldi	r18, 0x01	; 1
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	89 01       	movw	r16, r18
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <_Z4loopv+0xa18>
    3004:	00 0f       	add	r16, r16
    3006:	11 1f       	adc	r17, r17
    3008:	8a 95       	dec	r24
    300a:	e2 f7       	brpl	.-8      	; 0x3004 <_Z4loopv+0xa14>
    300c:	c8 01       	movw	r24, r16
    300e:	80 95       	com	r24
    3010:	84 23       	and	r24, r20
    3012:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3014:	83 81       	ldd	r24, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3016:	88 30       	cpi	r24, 0x08	; 8
    3018:	70 f4       	brcc	.+28     	; 0x3036 <_Z4loopv+0xa46>
    301a:	4b b1       	in	r20, 0x0b	; 11
    301c:	87 70       	andi	r24, 0x07	; 7
    301e:	21 e0       	ldi	r18, 0x01	; 1
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	b9 01       	movw	r22, r18
    3024:	02 c0       	rjmp	.+4      	; 0x302a <_Z4loopv+0xa3a>
    3026:	66 0f       	add	r22, r22
    3028:	77 1f       	adc	r23, r23
    302a:	8a 95       	dec	r24
    302c:	e2 f7       	brpl	.-8      	; 0x3026 <_Z4loopv+0xa36>
    302e:	cb 01       	movw	r24, r22
    3030:	84 2b       	or	r24, r20
    3032:	8b b9       	out	0x0b, r24	; 11
    3034:	0d c0       	rjmp	.+26     	; 0x3050 <_Z4loopv+0xa60>
    3036:	45 b1       	in	r20, 0x05	; 5
    3038:	87 70       	andi	r24, 0x07	; 7
    303a:	21 e0       	ldi	r18, 0x01	; 1
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	d9 01       	movw	r26, r18
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <_Z4loopv+0xa56>
    3042:	aa 0f       	add	r26, r26
    3044:	bb 1f       	adc	r27, r27
    3046:	8a 95       	dec	r24
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <_Z4loopv+0xa52>
    304a:	cd 01       	movw	r24, r26
    304c:	84 2b       	or	r24, r20
    304e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    3050:	84 81       	ldd	r24, Z+4	; 0x04
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3052:	88 30       	cpi	r24, 0x08	; 8
    3054:	78 f4       	brcc	.+30     	; 0x3074 <_Z4loopv+0xa84>
    3056:	4b b1       	in	r20, 0x0b	; 11
    3058:	87 70       	andi	r24, 0x07	; 7
    305a:	21 e0       	ldi	r18, 0x01	; 1
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	89 01       	movw	r16, r18
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <_Z4loopv+0xa76>
    3062:	00 0f       	add	r16, r16
    3064:	11 1f       	adc	r17, r17
    3066:	8a 95       	dec	r24
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <_Z4loopv+0xa72>
    306a:	c8 01       	movw	r24, r16
    306c:	80 95       	com	r24
    306e:	84 23       	and	r24, r20
    3070:	8b b9       	out	0x0b, r24	; 11
    3072:	0e c0       	rjmp	.+28     	; 0x3090 <_Z4loopv+0xaa0>
    3074:	45 b1       	in	r20, 0x05	; 5
    3076:	87 70       	andi	r24, 0x07	; 7
    3078:	21 e0       	ldi	r18, 0x01	; 1
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	b9 01       	movw	r22, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <_Z4loopv+0xa94>
    3080:	66 0f       	add	r22, r22
    3082:	77 1f       	adc	r23, r23
    3084:	8a 95       	dec	r24
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <_Z4loopv+0xa90>
    3088:	cb 01       	movw	r24, r22
    308a:	80 95       	com	r24
    308c:	84 23       	and	r24, r20
    308e:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    3090:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3092:	88 30       	cpi	r24, 0x08	; 8
    3094:	70 f4       	brcc	.+28     	; 0x30b2 <_Z4loopv+0xac2>
    3096:	4b b1       	in	r20, 0x0b	; 11
    3098:	87 70       	andi	r24, 0x07	; 7
    309a:	21 e0       	ldi	r18, 0x01	; 1
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	d9 01       	movw	r26, r18
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <_Z4loopv+0xab6>
    30a2:	aa 0f       	add	r26, r26
    30a4:	bb 1f       	adc	r27, r27
    30a6:	8a 95       	dec	r24
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <_Z4loopv+0xab2>
    30aa:	cd 01       	movw	r24, r26
    30ac:	84 2b       	or	r24, r20
    30ae:	8b b9       	out	0x0b, r24	; 11
    30b0:	0d c0       	rjmp	.+26     	; 0x30cc <_Z4loopv+0xadc>
    30b2:	45 b1       	in	r20, 0x05	; 5
    30b4:	87 70       	andi	r24, 0x07	; 7
    30b6:	21 e0       	ldi	r18, 0x01	; 1
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	89 01       	movw	r16, r18
    30bc:	02 c0       	rjmp	.+4      	; 0x30c2 <_Z4loopv+0xad2>
    30be:	00 0f       	add	r16, r16
    30c0:	11 1f       	adc	r17, r17
    30c2:	8a 95       	dec	r24
    30c4:	e2 f7       	brpl	.-8      	; 0x30be <_Z4loopv+0xace>
    30c6:	c8 01       	movw	r24, r16
    30c8:	84 2b       	or	r24, r20
    30ca:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    30cc:	81 81       	ldd	r24, Z+1	; 0x01
    30ce:	88 30       	cpi	r24, 0x08	; 8
    30d0:	70 f4       	brcc	.+28     	; 0x30ee <_Z4loopv+0xafe>
    30d2:	4b b1       	in	r20, 0x0b	; 11
    30d4:	87 70       	andi	r24, 0x07	; 7
    30d6:	21 e0       	ldi	r18, 0x01	; 1
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	b9 01       	movw	r22, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <_Z4loopv+0xaf2>
    30de:	66 0f       	add	r22, r22
    30e0:	77 1f       	adc	r23, r23
    30e2:	8a 95       	dec	r24
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <_Z4loopv+0xaee>
    30e6:	cb 01       	movw	r24, r22
    30e8:	84 2b       	or	r24, r20
    30ea:	8b b9       	out	0x0b, r24	; 11
    30ec:	0d c0       	rjmp	.+26     	; 0x3108 <_Z4loopv+0xb18>
    30ee:	45 b1       	in	r20, 0x05	; 5
    30f0:	87 70       	andi	r24, 0x07	; 7
    30f2:	21 e0       	ldi	r18, 0x01	; 1
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	d9 01       	movw	r26, r18
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <_Z4loopv+0xb0e>
    30fa:	aa 0f       	add	r26, r26
    30fc:	bb 1f       	adc	r27, r27
    30fe:	8a 95       	dec	r24
    3100:	e2 f7       	brpl	.-8      	; 0x30fa <_Z4loopv+0xb0a>
    3102:	cd 01       	movw	r24, r26
    3104:	84 2b       	or	r24, r20
    3106:	85 b9       	out	0x05, r24	; 5
    3108:	b5 e0       	ldi	r27, 0x05	; 5
    310a:	ba 95       	dec	r27
    310c:	f1 f7       	brne	.-4      	; 0x310a <_Z4loopv+0xb1a>
    310e:	00 00       	nop
    3110:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3112:	88 30       	cpi	r24, 0x08	; 8
    3114:	78 f4       	brcc	.+30     	; 0x3134 <_Z4loopv+0xb44>
    3116:	4b b1       	in	r20, 0x0b	; 11
    3118:	87 70       	andi	r24, 0x07	; 7
    311a:	21 e0       	ldi	r18, 0x01	; 1
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	89 01       	movw	r16, r18
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <_Z4loopv+0xb36>
    3122:	00 0f       	add	r16, r16
    3124:	11 1f       	adc	r17, r17
    3126:	8a 95       	dec	r24
    3128:	e2 f7       	brpl	.-8      	; 0x3122 <_Z4loopv+0xb32>
    312a:	c8 01       	movw	r24, r16
    312c:	80 95       	com	r24
    312e:	84 23       	and	r24, r20
    3130:	8b b9       	out	0x0b, r24	; 11
    3132:	0e c0       	rjmp	.+28     	; 0x3150 <_Z4loopv+0xb60>
    3134:	45 b1       	in	r20, 0x05	; 5
    3136:	87 70       	andi	r24, 0x07	; 7
    3138:	21 e0       	ldi	r18, 0x01	; 1
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	b9 01       	movw	r22, r18
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <_Z4loopv+0xb54>
    3140:	66 0f       	add	r22, r22
    3142:	77 1f       	adc	r23, r23
    3144:	8a 95       	dec	r24
    3146:	e2 f7       	brpl	.-8      	; 0x3140 <_Z4loopv+0xb50>
    3148:	cb 01       	movw	r24, r22
    314a:	80 95       	com	r24
    314c:	84 23       	and	r24, r20
    314e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3150:	8f e3       	ldi	r24, 0x3F	; 63
    3152:	9f e1       	ldi	r25, 0x1F	; 31
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <_Z4loopv+0xb64>
    3158:	00 c0       	rjmp	.+0      	; 0x315a <_Z4loopv+0xb6a>
    315a:	00 00       	nop
			
			public: void Write(char str[], uint8 row, uint8 pos) {
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    315c:	29 81       	ldd	r18, Y+1	; 0x01
    315e:	22 23       	and	r18, r18
    3160:	09 f4       	brne	.+2      	; 0x3164 <_Z4loopv+0xb74>
    3162:	dd c3       	rjmp	.+1978   	; 0x391e <_Z4loopv+0x132e>
    3164:	de 01       	movw	r26, r28
    3166:	11 96       	adiw	r26, 0x01	; 1
    3168:	7d 01       	movw	r14, r26
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	50 e0       	ldi	r21, 0x00	; 0
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	05 c0       	rjmp	.+10     	; 0x317e <_Z4loopv+0xb8e>
    3174:	d7 01       	movw	r26, r14
    3176:	2c 91       	ld	r18, X
    3178:	22 23       	and	r18, r18
    317a:	09 f4       	brne	.+2      	; 0x317e <_Z4loopv+0xb8e>
    317c:	d0 c3       	rjmp	.+1952   	; 0x391e <_Z4loopv+0x132e>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
    317e:	40 31       	cpi	r20, 0x10	; 16
    3180:	51 05       	cpc	r21, r1
    3182:	19 f0       	breq	.+6      	; 0x318a <_Z4loopv+0xb9a>
    3184:	2a 30       	cpi	r18, 0x0A	; 10
    3186:	09 f0       	breq	.+2      	; 0x318a <_Z4loopv+0xb9a>
    3188:	78 c1       	rjmp	.+752    	; 0x347a <_Z4loopv+0xe8a>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    318a:	22 81       	ldd	r18, Z+2	; 0x02
    318c:	28 30       	cpi	r18, 0x08	; 8
    318e:	68 f4       	brcc	.+26     	; 0x31aa <_Z4loopv+0xbba>
    3190:	3b b1       	in	r19, 0x0b	; 11
    3192:	27 70       	andi	r18, 0x07	; 7
    3194:	bc 01       	movw	r22, r24
    3196:	02 c0       	rjmp	.+4      	; 0x319c <_Z4loopv+0xbac>
    3198:	66 0f       	add	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	2a 95       	dec	r18
    319e:	e2 f7       	brpl	.-8      	; 0x3198 <_Z4loopv+0xba8>
    31a0:	26 2f       	mov	r18, r22
    31a2:	20 95       	com	r18
    31a4:	23 23       	and	r18, r19
    31a6:	2b b9       	out	0x0b, r18	; 11
    31a8:	0c c0       	rjmp	.+24     	; 0x31c2 <_Z4loopv+0xbd2>
    31aa:	35 b1       	in	r19, 0x05	; 5
    31ac:	27 70       	andi	r18, 0x07	; 7
    31ae:	bc 01       	movw	r22, r24
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <_Z4loopv+0xbc6>
    31b2:	66 0f       	add	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	2a 95       	dec	r18
    31b8:	e2 f7       	brpl	.-8      	; 0x31b2 <_Z4loopv+0xbc2>
    31ba:	26 2f       	mov	r18, r22
    31bc:	20 95       	com	r18
    31be:	23 23       	and	r18, r19
    31c0:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
    31c2:	23 81       	ldd	r18, Z+3	; 0x03
    31c4:	28 30       	cpi	r18, 0x08	; 8
    31c6:	68 f4       	brcc	.+26     	; 0x31e2 <_Z4loopv+0xbf2>
    31c8:	3b b1       	in	r19, 0x0b	; 11
    31ca:	27 70       	andi	r18, 0x07	; 7
    31cc:	bc 01       	movw	r22, r24
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <_Z4loopv+0xbe4>
    31d0:	66 0f       	add	r22, r22
    31d2:	77 1f       	adc	r23, r23
    31d4:	2a 95       	dec	r18
    31d6:	e2 f7       	brpl	.-8      	; 0x31d0 <_Z4loopv+0xbe0>
    31d8:	26 2f       	mov	r18, r22
    31da:	20 95       	com	r18
    31dc:	23 23       	and	r18, r19
    31de:	2b b9       	out	0x0b, r18	; 11
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <_Z4loopv+0xc0a>
    31e2:	35 b1       	in	r19, 0x05	; 5
    31e4:	27 70       	andi	r18, 0x07	; 7
    31e6:	bc 01       	movw	r22, r24
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <_Z4loopv+0xbfe>
    31ea:	66 0f       	add	r22, r22
    31ec:	77 1f       	adc	r23, r23
    31ee:	2a 95       	dec	r18
    31f0:	e2 f7       	brpl	.-8      	; 0x31ea <_Z4loopv+0xbfa>
    31f2:	26 2f       	mov	r18, r22
    31f4:	20 95       	com	r18
    31f6:	23 23       	and	r18, r19
    31f8:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
    31fa:	24 81       	ldd	r18, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    31fc:	28 30       	cpi	r18, 0x08	; 8
    31fe:	60 f4       	brcc	.+24     	; 0x3218 <_Z4loopv+0xc28>
    3200:	6b b1       	in	r22, 0x0b	; 11
    3202:	27 70       	andi	r18, 0x07	; 7
    3204:	8c 01       	movw	r16, r24
    3206:	02 c0       	rjmp	.+4      	; 0x320c <_Z4loopv+0xc1c>
    3208:	00 0f       	add	r16, r16
    320a:	11 1f       	adc	r17, r17
    320c:	2a 95       	dec	r18
    320e:	e2 f7       	brpl	.-8      	; 0x3208 <_Z4loopv+0xc18>
    3210:	98 01       	movw	r18, r16
    3212:	26 2b       	or	r18, r22
    3214:	2b b9       	out	0x0b, r18	; 11
    3216:	0b c0       	rjmp	.+22     	; 0x322e <_Z4loopv+0xc3e>
    3218:	65 b1       	in	r22, 0x05	; 5
    321a:	27 70       	andi	r18, 0x07	; 7
    321c:	dc 01       	movw	r26, r24
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <_Z4loopv+0xc34>
    3220:	aa 0f       	add	r26, r26
    3222:	bb 1f       	adc	r27, r27
    3224:	2a 95       	dec	r18
    3226:	e2 f7       	brpl	.-8      	; 0x3220 <_Z4loopv+0xc30>
    3228:	9d 01       	movw	r18, r26
    322a:	26 2b       	or	r18, r22
    322c:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
    322e:	25 81       	ldd	r18, Z+5	; 0x05
    3230:	28 30       	cpi	r18, 0x08	; 8
    3232:	60 f4       	brcc	.+24     	; 0x324c <_Z4loopv+0xc5c>
    3234:	6b b1       	in	r22, 0x0b	; 11
    3236:	27 70       	andi	r18, 0x07	; 7
    3238:	8c 01       	movw	r16, r24
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <_Z4loopv+0xc50>
    323c:	00 0f       	add	r16, r16
    323e:	11 1f       	adc	r17, r17
    3240:	2a 95       	dec	r18
    3242:	e2 f7       	brpl	.-8      	; 0x323c <_Z4loopv+0xc4c>
    3244:	98 01       	movw	r18, r16
    3246:	26 2b       	or	r18, r22
    3248:	2b b9       	out	0x0b, r18	; 11
    324a:	0b c0       	rjmp	.+22     	; 0x3262 <_Z4loopv+0xc72>
    324c:	65 b1       	in	r22, 0x05	; 5
    324e:	27 70       	andi	r18, 0x07	; 7
    3250:	dc 01       	movw	r26, r24
    3252:	02 c0       	rjmp	.+4      	; 0x3258 <_Z4loopv+0xc68>
    3254:	aa 0f       	add	r26, r26
    3256:	bb 1f       	adc	r27, r27
    3258:	2a 95       	dec	r18
    325a:	e2 f7       	brpl	.-8      	; 0x3254 <_Z4loopv+0xc64>
    325c:	9d 01       	movw	r18, r26
    325e:	26 2b       	or	r18, r22
    3260:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    3262:	20 81       	ld	r18, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3264:	28 30       	cpi	r18, 0x08	; 8
    3266:	68 f4       	brcc	.+26     	; 0x3282 <_Z4loopv+0xc92>
    3268:	3b b1       	in	r19, 0x0b	; 11
    326a:	27 70       	andi	r18, 0x07	; 7
    326c:	bc 01       	movw	r22, r24
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <_Z4loopv+0xc84>
    3270:	66 0f       	add	r22, r22
    3272:	77 1f       	adc	r23, r23
    3274:	2a 95       	dec	r18
    3276:	e2 f7       	brpl	.-8      	; 0x3270 <_Z4loopv+0xc80>
    3278:	26 2f       	mov	r18, r22
    327a:	20 95       	com	r18
    327c:	23 23       	and	r18, r19
    327e:	2b b9       	out	0x0b, r18	; 11
    3280:	0c c0       	rjmp	.+24     	; 0x329a <_Z4loopv+0xcaa>
    3282:	35 b1       	in	r19, 0x05	; 5
    3284:	27 70       	andi	r18, 0x07	; 7
    3286:	bc 01       	movw	r22, r24
    3288:	02 c0       	rjmp	.+4      	; 0x328e <_Z4loopv+0xc9e>
    328a:	66 0f       	add	r22, r22
    328c:	77 1f       	adc	r23, r23
    328e:	2a 95       	dec	r18
    3290:	e2 f7       	brpl	.-8      	; 0x328a <_Z4loopv+0xc9a>
    3292:	26 2f       	mov	r18, r22
    3294:	20 95       	com	r18
    3296:	23 23       	and	r18, r19
    3298:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    329a:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    329c:	28 30       	cpi	r18, 0x08	; 8
    329e:	60 f4       	brcc	.+24     	; 0x32b8 <_Z4loopv+0xcc8>
    32a0:	6b b1       	in	r22, 0x0b	; 11
    32a2:	27 70       	andi	r18, 0x07	; 7
    32a4:	8c 01       	movw	r16, r24
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <_Z4loopv+0xcbc>
    32a8:	00 0f       	add	r16, r16
    32aa:	11 1f       	adc	r17, r17
    32ac:	2a 95       	dec	r18
    32ae:	e2 f7       	brpl	.-8      	; 0x32a8 <_Z4loopv+0xcb8>
    32b0:	98 01       	movw	r18, r16
    32b2:	26 2b       	or	r18, r22
    32b4:	2b b9       	out	0x0b, r18	; 11
    32b6:	0b c0       	rjmp	.+22     	; 0x32ce <_Z4loopv+0xcde>
    32b8:	65 b1       	in	r22, 0x05	; 5
    32ba:	27 70       	andi	r18, 0x07	; 7
    32bc:	dc 01       	movw	r26, r24
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <_Z4loopv+0xcd4>
    32c0:	aa 0f       	add	r26, r26
    32c2:	bb 1f       	adc	r27, r27
    32c4:	2a 95       	dec	r18
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <_Z4loopv+0xcd0>
    32c8:	9d 01       	movw	r18, r26
    32ca:	26 2b       	or	r18, r22
    32cc:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    32ce:	b5 e0       	ldi	r27, 0x05	; 5
    32d0:	ba 95       	dec	r27
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <_Z4loopv+0xce0>
    32d4:	00 00       	nop
    32d6:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    32d8:	28 30       	cpi	r18, 0x08	; 8
    32da:	68 f4       	brcc	.+26     	; 0x32f6 <_Z4loopv+0xd06>
    32dc:	3b b1       	in	r19, 0x0b	; 11
    32de:	27 70       	andi	r18, 0x07	; 7
    32e0:	bc 01       	movw	r22, r24
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <_Z4loopv+0xcf8>
    32e4:	66 0f       	add	r22, r22
    32e6:	77 1f       	adc	r23, r23
    32e8:	2a 95       	dec	r18
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <_Z4loopv+0xcf4>
    32ec:	26 2f       	mov	r18, r22
    32ee:	20 95       	com	r18
    32f0:	23 23       	and	r18, r19
    32f2:	2b b9       	out	0x0b, r18	; 11
    32f4:	0c c0       	rjmp	.+24     	; 0x330e <_Z4loopv+0xd1e>
    32f6:	35 b1       	in	r19, 0x05	; 5
    32f8:	27 70       	andi	r18, 0x07	; 7
    32fa:	bc 01       	movw	r22, r24
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <_Z4loopv+0xd12>
    32fe:	66 0f       	add	r22, r22
    3300:	77 1f       	adc	r23, r23
    3302:	2a 95       	dec	r18
    3304:	e2 f7       	brpl	.-8      	; 0x32fe <_Z4loopv+0xd0e>
    3306:	26 2f       	mov	r18, r22
    3308:	20 95       	com	r18
    330a:	23 23       	and	r18, r19
    330c:	25 b9       	out	0x05, r18	; 5
    330e:	af e1       	ldi	r26, 0x1F	; 31
    3310:	b3 e0       	ldi	r27, 0x03	; 3
    3312:	11 97       	sbiw	r26, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <_Z4loopv+0xd22>
    3316:	00 c0       	rjmp	.+0      	; 0x3318 <_Z4loopv+0xd28>
    3318:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    331a:	22 81       	ldd	r18, Z+2	; 0x02
    331c:	28 30       	cpi	r18, 0x08	; 8
    331e:	68 f4       	brcc	.+26     	; 0x333a <_Z4loopv+0xd4a>
    3320:	3b b1       	in	r19, 0x0b	; 11
    3322:	27 70       	andi	r18, 0x07	; 7
    3324:	bc 01       	movw	r22, r24
    3326:	02 c0       	rjmp	.+4      	; 0x332c <_Z4loopv+0xd3c>
    3328:	66 0f       	add	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	2a 95       	dec	r18
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <_Z4loopv+0xd38>
    3330:	26 2f       	mov	r18, r22
    3332:	20 95       	com	r18
    3334:	23 23       	and	r18, r19
    3336:	2b b9       	out	0x0b, r18	; 11
    3338:	0c c0       	rjmp	.+24     	; 0x3352 <_Z4loopv+0xd62>
    333a:	35 b1       	in	r19, 0x05	; 5
    333c:	27 70       	andi	r18, 0x07	; 7
    333e:	bc 01       	movw	r22, r24
    3340:	02 c0       	rjmp	.+4      	; 0x3346 <_Z4loopv+0xd56>
    3342:	66 0f       	add	r22, r22
    3344:	77 1f       	adc	r23, r23
    3346:	2a 95       	dec	r18
    3348:	e2 f7       	brpl	.-8      	; 0x3342 <_Z4loopv+0xd52>
    334a:	26 2f       	mov	r18, r22
    334c:	20 95       	com	r18
    334e:	23 23       	and	r18, r19
    3350:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3352:	23 81       	ldd	r18, Z+3	; 0x03
    3354:	28 30       	cpi	r18, 0x08	; 8
    3356:	68 f4       	brcc	.+26     	; 0x3372 <_Z4loopv+0xd82>
    3358:	3b b1       	in	r19, 0x0b	; 11
    335a:	27 70       	andi	r18, 0x07	; 7
    335c:	bc 01       	movw	r22, r24
    335e:	02 c0       	rjmp	.+4      	; 0x3364 <_Z4loopv+0xd74>
    3360:	66 0f       	add	r22, r22
    3362:	77 1f       	adc	r23, r23
    3364:	2a 95       	dec	r18
    3366:	e2 f7       	brpl	.-8      	; 0x3360 <_Z4loopv+0xd70>
    3368:	26 2f       	mov	r18, r22
    336a:	20 95       	com	r18
    336c:	23 23       	and	r18, r19
    336e:	2b b9       	out	0x0b, r18	; 11
    3370:	0c c0       	rjmp	.+24     	; 0x338a <_Z4loopv+0xd9a>
    3372:	35 b1       	in	r19, 0x05	; 5
    3374:	27 70       	andi	r18, 0x07	; 7
    3376:	bc 01       	movw	r22, r24
    3378:	02 c0       	rjmp	.+4      	; 0x337e <_Z4loopv+0xd8e>
    337a:	66 0f       	add	r22, r22
    337c:	77 1f       	adc	r23, r23
    337e:	2a 95       	dec	r18
    3380:	e2 f7       	brpl	.-8      	; 0x337a <_Z4loopv+0xd8a>
    3382:	26 2f       	mov	r18, r22
    3384:	20 95       	com	r18
    3386:	23 23       	and	r18, r19
    3388:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    338a:	24 81       	ldd	r18, Z+4	; 0x04
    338c:	28 30       	cpi	r18, 0x08	; 8
    338e:	68 f4       	brcc	.+26     	; 0x33aa <_Z4loopv+0xdba>
    3390:	3b b1       	in	r19, 0x0b	; 11
    3392:	27 70       	andi	r18, 0x07	; 7
    3394:	bc 01       	movw	r22, r24
    3396:	02 c0       	rjmp	.+4      	; 0x339c <_Z4loopv+0xdac>
    3398:	66 0f       	add	r22, r22
    339a:	77 1f       	adc	r23, r23
    339c:	2a 95       	dec	r18
    339e:	e2 f7       	brpl	.-8      	; 0x3398 <_Z4loopv+0xda8>
    33a0:	26 2f       	mov	r18, r22
    33a2:	20 95       	com	r18
    33a4:	23 23       	and	r18, r19
    33a6:	2b b9       	out	0x0b, r18	; 11
    33a8:	0c c0       	rjmp	.+24     	; 0x33c2 <_Z4loopv+0xdd2>
    33aa:	35 b1       	in	r19, 0x05	; 5
    33ac:	27 70       	andi	r18, 0x07	; 7
    33ae:	bc 01       	movw	r22, r24
    33b0:	02 c0       	rjmp	.+4      	; 0x33b6 <_Z4loopv+0xdc6>
    33b2:	66 0f       	add	r22, r22
    33b4:	77 1f       	adc	r23, r23
    33b6:	2a 95       	dec	r18
    33b8:	e2 f7       	brpl	.-8      	; 0x33b2 <_Z4loopv+0xdc2>
    33ba:	26 2f       	mov	r18, r22
    33bc:	20 95       	com	r18
    33be:	23 23       	and	r18, r19
    33c0:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    33c2:	25 81       	ldd	r18, Z+5	; 0x05
    33c4:	28 30       	cpi	r18, 0x08	; 8
    33c6:	68 f4       	brcc	.+26     	; 0x33e2 <_Z4loopv+0xdf2>
    33c8:	3b b1       	in	r19, 0x0b	; 11
    33ca:	27 70       	andi	r18, 0x07	; 7
    33cc:	bc 01       	movw	r22, r24
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <_Z4loopv+0xde4>
    33d0:	66 0f       	add	r22, r22
    33d2:	77 1f       	adc	r23, r23
    33d4:	2a 95       	dec	r18
    33d6:	e2 f7       	brpl	.-8      	; 0x33d0 <_Z4loopv+0xde0>
    33d8:	26 2f       	mov	r18, r22
    33da:	20 95       	com	r18
    33dc:	23 23       	and	r18, r19
    33de:	2b b9       	out	0x0b, r18	; 11
    33e0:	0c c0       	rjmp	.+24     	; 0x33fa <_Z4loopv+0xe0a>
    33e2:	35 b1       	in	r19, 0x05	; 5
    33e4:	27 70       	andi	r18, 0x07	; 7
    33e6:	bc 01       	movw	r22, r24
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <_Z4loopv+0xdfe>
    33ea:	66 0f       	add	r22, r22
    33ec:	77 1f       	adc	r23, r23
    33ee:	2a 95       	dec	r18
    33f0:	e2 f7       	brpl	.-8      	; 0x33ea <_Z4loopv+0xdfa>
    33f2:	26 2f       	mov	r18, r22
    33f4:	20 95       	com	r18
    33f6:	23 23       	and	r18, r19
    33f8:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    33fa:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    33fc:	28 30       	cpi	r18, 0x08	; 8
    33fe:	60 f4       	brcc	.+24     	; 0x3418 <_Z4loopv+0xe28>
    3400:	6b b1       	in	r22, 0x0b	; 11
    3402:	27 70       	andi	r18, 0x07	; 7
    3404:	8c 01       	movw	r16, r24
    3406:	02 c0       	rjmp	.+4      	; 0x340c <_Z4loopv+0xe1c>
    3408:	00 0f       	add	r16, r16
    340a:	11 1f       	adc	r17, r17
    340c:	2a 95       	dec	r18
    340e:	e2 f7       	brpl	.-8      	; 0x3408 <_Z4loopv+0xe18>
    3410:	98 01       	movw	r18, r16
    3412:	26 2b       	or	r18, r22
    3414:	2b b9       	out	0x0b, r18	; 11
    3416:	0b c0       	rjmp	.+22     	; 0x342e <_Z4loopv+0xe3e>
    3418:	65 b1       	in	r22, 0x05	; 5
    341a:	27 70       	andi	r18, 0x07	; 7
    341c:	dc 01       	movw	r26, r24
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <_Z4loopv+0xe34>
    3420:	aa 0f       	add	r26, r26
    3422:	bb 1f       	adc	r27, r27
    3424:	2a 95       	dec	r18
    3426:	e2 f7       	brpl	.-8      	; 0x3420 <_Z4loopv+0xe30>
    3428:	9d 01       	movw	r18, r26
    342a:	26 2b       	or	r18, r22
    342c:	25 b9       	out	0x05, r18	; 5
    342e:	b5 e0       	ldi	r27, 0x05	; 5
    3430:	ba 95       	dec	r27
    3432:	f1 f7       	brne	.-4      	; 0x3430 <_Z4loopv+0xe40>
    3434:	00 00       	nop
    3436:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3438:	28 30       	cpi	r18, 0x08	; 8
    343a:	68 f4       	brcc	.+26     	; 0x3456 <_Z4loopv+0xe66>
    343c:	3b b1       	in	r19, 0x0b	; 11
    343e:	27 70       	andi	r18, 0x07	; 7
    3440:	bc 01       	movw	r22, r24
    3442:	02 c0       	rjmp	.+4      	; 0x3448 <_Z4loopv+0xe58>
    3444:	66 0f       	add	r22, r22
    3446:	77 1f       	adc	r23, r23
    3448:	2a 95       	dec	r18
    344a:	e2 f7       	brpl	.-8      	; 0x3444 <_Z4loopv+0xe54>
    344c:	26 2f       	mov	r18, r22
    344e:	20 95       	com	r18
    3450:	23 23       	and	r18, r19
    3452:	2b b9       	out	0x0b, r18	; 11
    3454:	0c c0       	rjmp	.+24     	; 0x346e <_Z4loopv+0xe7e>
    3456:	35 b1       	in	r19, 0x05	; 5
    3458:	27 70       	andi	r18, 0x07	; 7
    345a:	bc 01       	movw	r22, r24
    345c:	02 c0       	rjmp	.+4      	; 0x3462 <_Z4loopv+0xe72>
    345e:	66 0f       	add	r22, r22
    3460:	77 1f       	adc	r23, r23
    3462:	2a 95       	dec	r18
    3464:	e2 f7       	brpl	.-8      	; 0x345e <_Z4loopv+0xe6e>
    3466:	26 2f       	mov	r18, r22
    3468:	20 95       	com	r18
    346a:	23 23       	and	r18, r19
    346c:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    346e:	af e3       	ldi	r26, 0x3F	; 63
    3470:	bf e1       	ldi	r27, 0x1F	; 31
    3472:	11 97       	sbiw	r26, 0x01	; 1
    3474:	f1 f7       	brne	.-4      	; 0x3472 <_Z4loopv+0xe82>
    3476:	00 c0       	rjmp	.+0      	; 0x3478 <_Z4loopv+0xe88>
    3478:	00 00       	nop
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    347a:	d7 01       	movw	r26, r14
    347c:	2d 91       	ld	r18, X+
    347e:	7d 01       	movw	r14, r26
    3480:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    3482:	32 81       	ldd	r19, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3484:	24 ff       	sbrs	r18, 4
    3486:	18 c0       	rjmp	.+48     	; 0x34b8 <_Z4loopv+0xec8>
    3488:	38 30       	cpi	r19, 0x08	; 8
    348a:	58 f4       	brcc	.+22     	; 0x34a2 <_Z4loopv+0xeb2>
    348c:	7b b1       	in	r23, 0x0b	; 11
    348e:	37 70       	andi	r19, 0x07	; 7
    3490:	8c 01       	movw	r16, r24
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <_Z4loopv+0xea8>
    3494:	00 0f       	add	r16, r16
    3496:	11 1f       	adc	r17, r17
    3498:	3a 95       	dec	r19
    349a:	e2 f7       	brpl	.-8      	; 0x3494 <_Z4loopv+0xea4>
    349c:	07 2b       	or	r16, r23
    349e:	0b b9       	out	0x0b, r16	; 11
    34a0:	26 c0       	rjmp	.+76     	; 0x34ee <_Z4loopv+0xefe>
    34a2:	75 b1       	in	r23, 0x05	; 5
    34a4:	37 70       	andi	r19, 0x07	; 7
    34a6:	8c 01       	movw	r16, r24
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <_Z4loopv+0xebe>
    34aa:	00 0f       	add	r16, r16
    34ac:	11 1f       	adc	r17, r17
    34ae:	3a 95       	dec	r19
    34b0:	e2 f7       	brpl	.-8      	; 0x34aa <_Z4loopv+0xeba>
    34b2:	07 2b       	or	r16, r23
    34b4:	05 b9       	out	0x05, r16	; 5
    34b6:	1b c0       	rjmp	.+54     	; 0x34ee <_Z4loopv+0xefe>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    34b8:	38 30       	cpi	r19, 0x08	; 8
    34ba:	68 f4       	brcc	.+26     	; 0x34d6 <_Z4loopv+0xee6>
    34bc:	7b b1       	in	r23, 0x0b	; 11
    34be:	37 70       	andi	r19, 0x07	; 7
    34c0:	8c 01       	movw	r16, r24
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <_Z4loopv+0xed8>
    34c4:	00 0f       	add	r16, r16
    34c6:	11 1f       	adc	r17, r17
    34c8:	3a 95       	dec	r19
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <_Z4loopv+0xed4>
    34cc:	30 2f       	mov	r19, r16
    34ce:	30 95       	com	r19
    34d0:	37 23       	and	r19, r23
    34d2:	3b b9       	out	0x0b, r19	; 11
    34d4:	0c c0       	rjmp	.+24     	; 0x34ee <_Z4loopv+0xefe>
    34d6:	75 b1       	in	r23, 0x05	; 5
    34d8:	37 70       	andi	r19, 0x07	; 7
    34da:	8c 01       	movw	r16, r24
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <_Z4loopv+0xef2>
    34de:	00 0f       	add	r16, r16
    34e0:	11 1f       	adc	r17, r17
    34e2:	3a 95       	dec	r19
    34e4:	e2 f7       	brpl	.-8      	; 0x34de <_Z4loopv+0xeee>
    34e6:	30 2f       	mov	r19, r16
    34e8:	30 95       	com	r19
    34ea:	37 23       	and	r19, r23
    34ec:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    34ee:	33 81       	ldd	r19, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    34f0:	25 ff       	sbrs	r18, 5
    34f2:	18 c0       	rjmp	.+48     	; 0x3524 <_Z4loopv+0xf34>
    34f4:	38 30       	cpi	r19, 0x08	; 8
    34f6:	58 f4       	brcc	.+22     	; 0x350e <_Z4loopv+0xf1e>
    34f8:	7b b1       	in	r23, 0x0b	; 11
    34fa:	37 70       	andi	r19, 0x07	; 7
    34fc:	8c 01       	movw	r16, r24
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <_Z4loopv+0xf14>
    3500:	00 0f       	add	r16, r16
    3502:	11 1f       	adc	r17, r17
    3504:	3a 95       	dec	r19
    3506:	e2 f7       	brpl	.-8      	; 0x3500 <_Z4loopv+0xf10>
    3508:	07 2b       	or	r16, r23
    350a:	0b b9       	out	0x0b, r16	; 11
    350c:	26 c0       	rjmp	.+76     	; 0x355a <_Z4loopv+0xf6a>
    350e:	75 b1       	in	r23, 0x05	; 5
    3510:	37 70       	andi	r19, 0x07	; 7
    3512:	8c 01       	movw	r16, r24
    3514:	02 c0       	rjmp	.+4      	; 0x351a <_Z4loopv+0xf2a>
    3516:	00 0f       	add	r16, r16
    3518:	11 1f       	adc	r17, r17
    351a:	3a 95       	dec	r19
    351c:	e2 f7       	brpl	.-8      	; 0x3516 <_Z4loopv+0xf26>
    351e:	07 2b       	or	r16, r23
    3520:	05 b9       	out	0x05, r16	; 5
    3522:	1b c0       	rjmp	.+54     	; 0x355a <_Z4loopv+0xf6a>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3524:	38 30       	cpi	r19, 0x08	; 8
    3526:	68 f4       	brcc	.+26     	; 0x3542 <_Z4loopv+0xf52>
    3528:	7b b1       	in	r23, 0x0b	; 11
    352a:	37 70       	andi	r19, 0x07	; 7
    352c:	8c 01       	movw	r16, r24
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <_Z4loopv+0xf44>
    3530:	00 0f       	add	r16, r16
    3532:	11 1f       	adc	r17, r17
    3534:	3a 95       	dec	r19
    3536:	e2 f7       	brpl	.-8      	; 0x3530 <_Z4loopv+0xf40>
    3538:	30 2f       	mov	r19, r16
    353a:	30 95       	com	r19
    353c:	37 23       	and	r19, r23
    353e:	3b b9       	out	0x0b, r19	; 11
    3540:	0c c0       	rjmp	.+24     	; 0x355a <_Z4loopv+0xf6a>
    3542:	75 b1       	in	r23, 0x05	; 5
    3544:	37 70       	andi	r19, 0x07	; 7
    3546:	8c 01       	movw	r16, r24
    3548:	02 c0       	rjmp	.+4      	; 0x354e <_Z4loopv+0xf5e>
    354a:	00 0f       	add	r16, r16
    354c:	11 1f       	adc	r17, r17
    354e:	3a 95       	dec	r19
    3550:	e2 f7       	brpl	.-8      	; 0x354a <_Z4loopv+0xf5a>
    3552:	30 2f       	mov	r19, r16
    3554:	30 95       	com	r19
    3556:	37 23       	and	r19, r23
    3558:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    355a:	34 81       	ldd	r19, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    355c:	26 ff       	sbrs	r18, 6
    355e:	18 c0       	rjmp	.+48     	; 0x3590 <_Z4loopv+0xfa0>
    3560:	38 30       	cpi	r19, 0x08	; 8
    3562:	58 f4       	brcc	.+22     	; 0x357a <_Z4loopv+0xf8a>
    3564:	7b b1       	in	r23, 0x0b	; 11
    3566:	37 70       	andi	r19, 0x07	; 7
    3568:	8c 01       	movw	r16, r24
    356a:	02 c0       	rjmp	.+4      	; 0x3570 <_Z4loopv+0xf80>
    356c:	00 0f       	add	r16, r16
    356e:	11 1f       	adc	r17, r17
    3570:	3a 95       	dec	r19
    3572:	e2 f7       	brpl	.-8      	; 0x356c <_Z4loopv+0xf7c>
    3574:	07 2b       	or	r16, r23
    3576:	0b b9       	out	0x0b, r16	; 11
    3578:	26 c0       	rjmp	.+76     	; 0x35c6 <_Z4loopv+0xfd6>
    357a:	75 b1       	in	r23, 0x05	; 5
    357c:	37 70       	andi	r19, 0x07	; 7
    357e:	8c 01       	movw	r16, r24
    3580:	02 c0       	rjmp	.+4      	; 0x3586 <_Z4loopv+0xf96>
    3582:	00 0f       	add	r16, r16
    3584:	11 1f       	adc	r17, r17
    3586:	3a 95       	dec	r19
    3588:	e2 f7       	brpl	.-8      	; 0x3582 <_Z4loopv+0xf92>
    358a:	07 2b       	or	r16, r23
    358c:	05 b9       	out	0x05, r16	; 5
    358e:	1b c0       	rjmp	.+54     	; 0x35c6 <_Z4loopv+0xfd6>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3590:	38 30       	cpi	r19, 0x08	; 8
    3592:	68 f4       	brcc	.+26     	; 0x35ae <_Z4loopv+0xfbe>
    3594:	7b b1       	in	r23, 0x0b	; 11
    3596:	37 70       	andi	r19, 0x07	; 7
    3598:	8c 01       	movw	r16, r24
    359a:	02 c0       	rjmp	.+4      	; 0x35a0 <_Z4loopv+0xfb0>
    359c:	00 0f       	add	r16, r16
    359e:	11 1f       	adc	r17, r17
    35a0:	3a 95       	dec	r19
    35a2:	e2 f7       	brpl	.-8      	; 0x359c <_Z4loopv+0xfac>
    35a4:	30 2f       	mov	r19, r16
    35a6:	30 95       	com	r19
    35a8:	37 23       	and	r19, r23
    35aa:	3b b9       	out	0x0b, r19	; 11
    35ac:	0c c0       	rjmp	.+24     	; 0x35c6 <_Z4loopv+0xfd6>
    35ae:	75 b1       	in	r23, 0x05	; 5
    35b0:	37 70       	andi	r19, 0x07	; 7
    35b2:	8c 01       	movw	r16, r24
    35b4:	02 c0       	rjmp	.+4      	; 0x35ba <_Z4loopv+0xfca>
    35b6:	00 0f       	add	r16, r16
    35b8:	11 1f       	adc	r17, r17
    35ba:	3a 95       	dec	r19
    35bc:	e2 f7       	brpl	.-8      	; 0x35b6 <_Z4loopv+0xfc6>
    35be:	30 2f       	mov	r19, r16
    35c0:	30 95       	com	r19
    35c2:	37 23       	and	r19, r23
    35c4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    35c6:	35 81       	ldd	r19, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    35c8:	66 23       	and	r22, r22
    35ca:	c4 f4       	brge	.+48     	; 0x35fc <_Z4loopv+0x100c>
    35cc:	38 30       	cpi	r19, 0x08	; 8
    35ce:	58 f4       	brcc	.+22     	; 0x35e6 <_Z4loopv+0xff6>
    35d0:	1b b1       	in	r17, 0x0b	; 11
    35d2:	37 70       	andi	r19, 0x07	; 7
    35d4:	bc 01       	movw	r22, r24
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <_Z4loopv+0xfec>
    35d8:	66 0f       	add	r22, r22
    35da:	77 1f       	adc	r23, r23
    35dc:	3a 95       	dec	r19
    35de:	e2 f7       	brpl	.-8      	; 0x35d8 <_Z4loopv+0xfe8>
    35e0:	61 2b       	or	r22, r17
    35e2:	6b b9       	out	0x0b, r22	; 11
    35e4:	26 c0       	rjmp	.+76     	; 0x3632 <_Z4loopv+0x1042>
    35e6:	15 b1       	in	r17, 0x05	; 5
    35e8:	37 70       	andi	r19, 0x07	; 7
    35ea:	bc 01       	movw	r22, r24
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <_Z4loopv+0x1002>
    35ee:	66 0f       	add	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	3a 95       	dec	r19
    35f4:	e2 f7       	brpl	.-8      	; 0x35ee <_Z4loopv+0xffe>
    35f6:	61 2b       	or	r22, r17
    35f8:	65 b9       	out	0x05, r22	; 5
    35fa:	1b c0       	rjmp	.+54     	; 0x3632 <_Z4loopv+0x1042>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    35fc:	38 30       	cpi	r19, 0x08	; 8
    35fe:	68 f4       	brcc	.+26     	; 0x361a <_Z4loopv+0x102a>
    3600:	6b b1       	in	r22, 0x0b	; 11
    3602:	37 70       	andi	r19, 0x07	; 7
    3604:	8c 01       	movw	r16, r24
    3606:	02 c0       	rjmp	.+4      	; 0x360c <_Z4loopv+0x101c>
    3608:	00 0f       	add	r16, r16
    360a:	11 1f       	adc	r17, r17
    360c:	3a 95       	dec	r19
    360e:	e2 f7       	brpl	.-8      	; 0x3608 <_Z4loopv+0x1018>
    3610:	30 2f       	mov	r19, r16
    3612:	30 95       	com	r19
    3614:	36 23       	and	r19, r22
    3616:	3b b9       	out	0x0b, r19	; 11
    3618:	0c c0       	rjmp	.+24     	; 0x3632 <_Z4loopv+0x1042>
    361a:	65 b1       	in	r22, 0x05	; 5
    361c:	37 70       	andi	r19, 0x07	; 7
    361e:	8c 01       	movw	r16, r24
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <_Z4loopv+0x1036>
    3622:	00 0f       	add	r16, r16
    3624:	11 1f       	adc	r17, r17
    3626:	3a 95       	dec	r19
    3628:	e2 f7       	brpl	.-8      	; 0x3622 <_Z4loopv+0x1032>
    362a:	30 2f       	mov	r19, r16
    362c:	30 95       	com	r19
    362e:	36 23       	and	r19, r22
    3630:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    3632:	30 81       	ld	r19, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3634:	38 30       	cpi	r19, 0x08	; 8
    3636:	58 f4       	brcc	.+22     	; 0x364e <_Z4loopv+0x105e>
    3638:	1b b1       	in	r17, 0x0b	; 11
    363a:	37 70       	andi	r19, 0x07	; 7
    363c:	bc 01       	movw	r22, r24
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <_Z4loopv+0x1054>
    3640:	66 0f       	add	r22, r22
    3642:	77 1f       	adc	r23, r23
    3644:	3a 95       	dec	r19
    3646:	e2 f7       	brpl	.-8      	; 0x3640 <_Z4loopv+0x1050>
    3648:	61 2b       	or	r22, r17
    364a:	6b b9       	out	0x0b, r22	; 11
    364c:	0a c0       	rjmp	.+20     	; 0x3662 <_Z4loopv+0x1072>
    364e:	15 b1       	in	r17, 0x05	; 5
    3650:	37 70       	andi	r19, 0x07	; 7
    3652:	bc 01       	movw	r22, r24
    3654:	02 c0       	rjmp	.+4      	; 0x365a <_Z4loopv+0x106a>
    3656:	66 0f       	add	r22, r22
    3658:	77 1f       	adc	r23, r23
    365a:	3a 95       	dec	r19
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <_Z4loopv+0x1066>
    365e:	61 2b       	or	r22, r17
    3660:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3662:	31 81       	ldd	r19, Z+1	; 0x01
    3664:	38 30       	cpi	r19, 0x08	; 8
    3666:	58 f4       	brcc	.+22     	; 0x367e <_Z4loopv+0x108e>
    3668:	1b b1       	in	r17, 0x0b	; 11
    366a:	37 70       	andi	r19, 0x07	; 7
    366c:	bc 01       	movw	r22, r24
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <_Z4loopv+0x1084>
    3670:	66 0f       	add	r22, r22
    3672:	77 1f       	adc	r23, r23
    3674:	3a 95       	dec	r19
    3676:	e2 f7       	brpl	.-8      	; 0x3670 <_Z4loopv+0x1080>
    3678:	61 2b       	or	r22, r17
    367a:	6b b9       	out	0x0b, r22	; 11
    367c:	0a c0       	rjmp	.+20     	; 0x3692 <_Z4loopv+0x10a2>
    367e:	15 b1       	in	r17, 0x05	; 5
    3680:	37 70       	andi	r19, 0x07	; 7
    3682:	bc 01       	movw	r22, r24
    3684:	02 c0       	rjmp	.+4      	; 0x368a <_Z4loopv+0x109a>
    3686:	66 0f       	add	r22, r22
    3688:	77 1f       	adc	r23, r23
    368a:	3a 95       	dec	r19
    368c:	e2 f7       	brpl	.-8      	; 0x3686 <_Z4loopv+0x1096>
    368e:	61 2b       	or	r22, r17
    3690:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3692:	b5 e0       	ldi	r27, 0x05	; 5
    3694:	ba 95       	dec	r27
    3696:	f1 f7       	brne	.-4      	; 0x3694 <_Z4loopv+0x10a4>
    3698:	00 00       	nop
    369a:	31 81       	ldd	r19, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    369c:	38 30       	cpi	r19, 0x08	; 8
    369e:	68 f4       	brcc	.+26     	; 0x36ba <_Z4loopv+0x10ca>
    36a0:	6b b1       	in	r22, 0x0b	; 11
    36a2:	37 70       	andi	r19, 0x07	; 7
    36a4:	8c 01       	movw	r16, r24
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <_Z4loopv+0x10bc>
    36a8:	00 0f       	add	r16, r16
    36aa:	11 1f       	adc	r17, r17
    36ac:	3a 95       	dec	r19
    36ae:	e2 f7       	brpl	.-8      	; 0x36a8 <_Z4loopv+0x10b8>
    36b0:	30 2f       	mov	r19, r16
    36b2:	30 95       	com	r19
    36b4:	36 23       	and	r19, r22
    36b6:	3b b9       	out	0x0b, r19	; 11
    36b8:	0c c0       	rjmp	.+24     	; 0x36d2 <_Z4loopv+0x10e2>
    36ba:	65 b1       	in	r22, 0x05	; 5
    36bc:	37 70       	andi	r19, 0x07	; 7
    36be:	8c 01       	movw	r16, r24
    36c0:	02 c0       	rjmp	.+4      	; 0x36c6 <_Z4loopv+0x10d6>
    36c2:	00 0f       	add	r16, r16
    36c4:	11 1f       	adc	r17, r17
    36c6:	3a 95       	dec	r19
    36c8:	e2 f7       	brpl	.-8      	; 0x36c2 <_Z4loopv+0x10d2>
    36ca:	30 2f       	mov	r19, r16
    36cc:	30 95       	com	r19
    36ce:	36 23       	and	r19, r22
    36d0:	35 b9       	out	0x05, r19	; 5
    36d2:	af e1       	ldi	r26, 0x1F	; 31
    36d4:	b3 e0       	ldi	r27, 0x03	; 3
    36d6:	11 97       	sbiw	r26, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <_Z4loopv+0x10e6>
    36da:	00 c0       	rjmp	.+0      	; 0x36dc <_Z4loopv+0x10ec>
    36dc:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    36de:	32 81       	ldd	r19, Z+2	; 0x02
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    36e0:	20 ff       	sbrs	r18, 0
    36e2:	18 c0       	rjmp	.+48     	; 0x3714 <_Z4loopv+0x1124>
    36e4:	38 30       	cpi	r19, 0x08	; 8
    36e6:	58 f4       	brcc	.+22     	; 0x36fe <_Z4loopv+0x110e>
    36e8:	1b b1       	in	r17, 0x0b	; 11
    36ea:	37 70       	andi	r19, 0x07	; 7
    36ec:	bc 01       	movw	r22, r24
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <_Z4loopv+0x1104>
    36f0:	66 0f       	add	r22, r22
    36f2:	77 1f       	adc	r23, r23
    36f4:	3a 95       	dec	r19
    36f6:	e2 f7       	brpl	.-8      	; 0x36f0 <_Z4loopv+0x1100>
    36f8:	61 2b       	or	r22, r17
    36fa:	6b b9       	out	0x0b, r22	; 11
    36fc:	26 c0       	rjmp	.+76     	; 0x374a <_Z4loopv+0x115a>
    36fe:	15 b1       	in	r17, 0x05	; 5
    3700:	37 70       	andi	r19, 0x07	; 7
    3702:	bc 01       	movw	r22, r24
    3704:	02 c0       	rjmp	.+4      	; 0x370a <_Z4loopv+0x111a>
    3706:	66 0f       	add	r22, r22
    3708:	77 1f       	adc	r23, r23
    370a:	3a 95       	dec	r19
    370c:	e2 f7       	brpl	.-8      	; 0x3706 <_Z4loopv+0x1116>
    370e:	61 2b       	or	r22, r17
    3710:	65 b9       	out	0x05, r22	; 5
    3712:	1b c0       	rjmp	.+54     	; 0x374a <_Z4loopv+0x115a>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3714:	38 30       	cpi	r19, 0x08	; 8
    3716:	68 f4       	brcc	.+26     	; 0x3732 <_Z4loopv+0x1142>
    3718:	6b b1       	in	r22, 0x0b	; 11
    371a:	37 70       	andi	r19, 0x07	; 7
    371c:	8c 01       	movw	r16, r24
    371e:	02 c0       	rjmp	.+4      	; 0x3724 <_Z4loopv+0x1134>
    3720:	00 0f       	add	r16, r16
    3722:	11 1f       	adc	r17, r17
    3724:	3a 95       	dec	r19
    3726:	e2 f7       	brpl	.-8      	; 0x3720 <_Z4loopv+0x1130>
    3728:	30 2f       	mov	r19, r16
    372a:	30 95       	com	r19
    372c:	36 23       	and	r19, r22
    372e:	3b b9       	out	0x0b, r19	; 11
    3730:	0c c0       	rjmp	.+24     	; 0x374a <_Z4loopv+0x115a>
    3732:	65 b1       	in	r22, 0x05	; 5
    3734:	37 70       	andi	r19, 0x07	; 7
    3736:	8c 01       	movw	r16, r24
    3738:	02 c0       	rjmp	.+4      	; 0x373e <_Z4loopv+0x114e>
    373a:	00 0f       	add	r16, r16
    373c:	11 1f       	adc	r17, r17
    373e:	3a 95       	dec	r19
    3740:	e2 f7       	brpl	.-8      	; 0x373a <_Z4loopv+0x114a>
    3742:	30 2f       	mov	r19, r16
    3744:	30 95       	com	r19
    3746:	36 23       	and	r19, r22
    3748:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    374a:	33 81       	ldd	r19, Z+3	; 0x03
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    374c:	21 ff       	sbrs	r18, 1
    374e:	18 c0       	rjmp	.+48     	; 0x3780 <_Z4loopv+0x1190>
    3750:	38 30       	cpi	r19, 0x08	; 8
    3752:	58 f4       	brcc	.+22     	; 0x376a <_Z4loopv+0x117a>
    3754:	1b b1       	in	r17, 0x0b	; 11
    3756:	37 70       	andi	r19, 0x07	; 7
    3758:	bc 01       	movw	r22, r24
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <_Z4loopv+0x1170>
    375c:	66 0f       	add	r22, r22
    375e:	77 1f       	adc	r23, r23
    3760:	3a 95       	dec	r19
    3762:	e2 f7       	brpl	.-8      	; 0x375c <_Z4loopv+0x116c>
    3764:	61 2b       	or	r22, r17
    3766:	6b b9       	out	0x0b, r22	; 11
    3768:	26 c0       	rjmp	.+76     	; 0x37b6 <_Z4loopv+0x11c6>
    376a:	15 b1       	in	r17, 0x05	; 5
    376c:	37 70       	andi	r19, 0x07	; 7
    376e:	bc 01       	movw	r22, r24
    3770:	02 c0       	rjmp	.+4      	; 0x3776 <_Z4loopv+0x1186>
    3772:	66 0f       	add	r22, r22
    3774:	77 1f       	adc	r23, r23
    3776:	3a 95       	dec	r19
    3778:	e2 f7       	brpl	.-8      	; 0x3772 <_Z4loopv+0x1182>
    377a:	61 2b       	or	r22, r17
    377c:	65 b9       	out	0x05, r22	; 5
    377e:	1b c0       	rjmp	.+54     	; 0x37b6 <_Z4loopv+0x11c6>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3780:	38 30       	cpi	r19, 0x08	; 8
    3782:	68 f4       	brcc	.+26     	; 0x379e <_Z4loopv+0x11ae>
    3784:	6b b1       	in	r22, 0x0b	; 11
    3786:	37 70       	andi	r19, 0x07	; 7
    3788:	8c 01       	movw	r16, r24
    378a:	02 c0       	rjmp	.+4      	; 0x3790 <_Z4loopv+0x11a0>
    378c:	00 0f       	add	r16, r16
    378e:	11 1f       	adc	r17, r17
    3790:	3a 95       	dec	r19
    3792:	e2 f7       	brpl	.-8      	; 0x378c <_Z4loopv+0x119c>
    3794:	30 2f       	mov	r19, r16
    3796:	30 95       	com	r19
    3798:	36 23       	and	r19, r22
    379a:	3b b9       	out	0x0b, r19	; 11
    379c:	0c c0       	rjmp	.+24     	; 0x37b6 <_Z4loopv+0x11c6>
    379e:	65 b1       	in	r22, 0x05	; 5
    37a0:	37 70       	andi	r19, 0x07	; 7
    37a2:	8c 01       	movw	r16, r24
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <_Z4loopv+0x11ba>
    37a6:	00 0f       	add	r16, r16
    37a8:	11 1f       	adc	r17, r17
    37aa:	3a 95       	dec	r19
    37ac:	e2 f7       	brpl	.-8      	; 0x37a6 <_Z4loopv+0x11b6>
    37ae:	30 2f       	mov	r19, r16
    37b0:	30 95       	com	r19
    37b2:	36 23       	and	r19, r22
    37b4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    37b6:	34 81       	ldd	r19, Z+4	; 0x04
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    37b8:	22 ff       	sbrs	r18, 2
    37ba:	18 c0       	rjmp	.+48     	; 0x37ec <_Z4loopv+0x11fc>
    37bc:	38 30       	cpi	r19, 0x08	; 8
    37be:	58 f4       	brcc	.+22     	; 0x37d6 <_Z4loopv+0x11e6>
    37c0:	1b b1       	in	r17, 0x0b	; 11
    37c2:	37 70       	andi	r19, 0x07	; 7
    37c4:	bc 01       	movw	r22, r24
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <_Z4loopv+0x11dc>
    37c8:	66 0f       	add	r22, r22
    37ca:	77 1f       	adc	r23, r23
    37cc:	3a 95       	dec	r19
    37ce:	e2 f7       	brpl	.-8      	; 0x37c8 <_Z4loopv+0x11d8>
    37d0:	61 2b       	or	r22, r17
    37d2:	6b b9       	out	0x0b, r22	; 11
    37d4:	26 c0       	rjmp	.+76     	; 0x3822 <_Z4loopv+0x1232>
    37d6:	15 b1       	in	r17, 0x05	; 5
    37d8:	37 70       	andi	r19, 0x07	; 7
    37da:	bc 01       	movw	r22, r24
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <_Z4loopv+0x11f2>
    37de:	66 0f       	add	r22, r22
    37e0:	77 1f       	adc	r23, r23
    37e2:	3a 95       	dec	r19
    37e4:	e2 f7       	brpl	.-8      	; 0x37de <_Z4loopv+0x11ee>
    37e6:	61 2b       	or	r22, r17
    37e8:	65 b9       	out	0x05, r22	; 5
    37ea:	1b c0       	rjmp	.+54     	; 0x3822 <_Z4loopv+0x1232>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    37ec:	38 30       	cpi	r19, 0x08	; 8
    37ee:	68 f4       	brcc	.+26     	; 0x380a <_Z4loopv+0x121a>
    37f0:	6b b1       	in	r22, 0x0b	; 11
    37f2:	37 70       	andi	r19, 0x07	; 7
    37f4:	8c 01       	movw	r16, r24
    37f6:	02 c0       	rjmp	.+4      	; 0x37fc <_Z4loopv+0x120c>
    37f8:	00 0f       	add	r16, r16
    37fa:	11 1f       	adc	r17, r17
    37fc:	3a 95       	dec	r19
    37fe:	e2 f7       	brpl	.-8      	; 0x37f8 <_Z4loopv+0x1208>
    3800:	30 2f       	mov	r19, r16
    3802:	30 95       	com	r19
    3804:	36 23       	and	r19, r22
    3806:	3b b9       	out	0x0b, r19	; 11
    3808:	0c c0       	rjmp	.+24     	; 0x3822 <_Z4loopv+0x1232>
    380a:	65 b1       	in	r22, 0x05	; 5
    380c:	37 70       	andi	r19, 0x07	; 7
    380e:	8c 01       	movw	r16, r24
    3810:	02 c0       	rjmp	.+4      	; 0x3816 <_Z4loopv+0x1226>
    3812:	00 0f       	add	r16, r16
    3814:	11 1f       	adc	r17, r17
    3816:	3a 95       	dec	r19
    3818:	e2 f7       	brpl	.-8      	; 0x3812 <_Z4loopv+0x1222>
    381a:	30 2f       	mov	r19, r16
    381c:	30 95       	com	r19
    381e:	36 23       	and	r19, r22
    3820:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    3822:	35 81       	ldd	r19, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3824:	23 ff       	sbrs	r18, 3
    3826:	1a c0       	rjmp	.+52     	; 0x385c <_Z4loopv+0x126c>
    3828:	38 30       	cpi	r19, 0x08	; 8
    382a:	60 f4       	brcc	.+24     	; 0x3844 <_Z4loopv+0x1254>
    382c:	6b b1       	in	r22, 0x0b	; 11
    382e:	37 70       	andi	r19, 0x07	; 7
    3830:	8c 01       	movw	r16, r24
    3832:	02 c0       	rjmp	.+4      	; 0x3838 <_Z4loopv+0x1248>
    3834:	00 0f       	add	r16, r16
    3836:	11 1f       	adc	r17, r17
    3838:	3a 95       	dec	r19
    383a:	e2 f7       	brpl	.-8      	; 0x3834 <_Z4loopv+0x1244>
    383c:	98 01       	movw	r18, r16
    383e:	26 2b       	or	r18, r22
    3840:	2b b9       	out	0x0b, r18	; 11
    3842:	27 c0       	rjmp	.+78     	; 0x3892 <_Z4loopv+0x12a2>
    3844:	65 b1       	in	r22, 0x05	; 5
    3846:	37 70       	andi	r19, 0x07	; 7
    3848:	dc 01       	movw	r26, r24
    384a:	02 c0       	rjmp	.+4      	; 0x3850 <_Z4loopv+0x1260>
    384c:	aa 0f       	add	r26, r26
    384e:	bb 1f       	adc	r27, r27
    3850:	3a 95       	dec	r19
    3852:	e2 f7       	brpl	.-8      	; 0x384c <_Z4loopv+0x125c>
    3854:	9d 01       	movw	r18, r26
    3856:	26 2b       	or	r18, r22
    3858:	25 b9       	out	0x05, r18	; 5
    385a:	1b c0       	rjmp	.+54     	; 0x3892 <_Z4loopv+0x12a2>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    385c:	38 30       	cpi	r19, 0x08	; 8
    385e:	68 f4       	brcc	.+26     	; 0x387a <_Z4loopv+0x128a>
    3860:	6b b1       	in	r22, 0x0b	; 11
    3862:	37 70       	andi	r19, 0x07	; 7
    3864:	8c 01       	movw	r16, r24
    3866:	02 c0       	rjmp	.+4      	; 0x386c <_Z4loopv+0x127c>
    3868:	00 0f       	add	r16, r16
    386a:	11 1f       	adc	r17, r17
    386c:	3a 95       	dec	r19
    386e:	e2 f7       	brpl	.-8      	; 0x3868 <_Z4loopv+0x1278>
    3870:	98 01       	movw	r18, r16
    3872:	20 95       	com	r18
    3874:	26 23       	and	r18, r22
    3876:	2b b9       	out	0x0b, r18	; 11
    3878:	0c c0       	rjmp	.+24     	; 0x3892 <_Z4loopv+0x12a2>
    387a:	65 b1       	in	r22, 0x05	; 5
    387c:	37 70       	andi	r19, 0x07	; 7
    387e:	dc 01       	movw	r26, r24
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <_Z4loopv+0x1296>
    3882:	aa 0f       	add	r26, r26
    3884:	bb 1f       	adc	r27, r27
    3886:	3a 95       	dec	r19
    3888:	e2 f7       	brpl	.-8      	; 0x3882 <_Z4loopv+0x1292>
    388a:	9d 01       	movw	r18, r26
    388c:	20 95       	com	r18
    388e:	26 23       	and	r18, r22
    3890:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3892:	21 81       	ldd	r18, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3894:	28 30       	cpi	r18, 0x08	; 8
    3896:	60 f4       	brcc	.+24     	; 0x38b0 <_Z4loopv+0x12c0>
    3898:	6b b1       	in	r22, 0x0b	; 11
    389a:	27 70       	andi	r18, 0x07	; 7
    389c:	8c 01       	movw	r16, r24
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <_Z4loopv+0x12b4>
    38a0:	00 0f       	add	r16, r16
    38a2:	11 1f       	adc	r17, r17
    38a4:	2a 95       	dec	r18
    38a6:	e2 f7       	brpl	.-8      	; 0x38a0 <_Z4loopv+0x12b0>
    38a8:	98 01       	movw	r18, r16
    38aa:	26 2b       	or	r18, r22
    38ac:	2b b9       	out	0x0b, r18	; 11
    38ae:	0b c0       	rjmp	.+22     	; 0x38c6 <_Z4loopv+0x12d6>
    38b0:	65 b1       	in	r22, 0x05	; 5
    38b2:	27 70       	andi	r18, 0x07	; 7
    38b4:	dc 01       	movw	r26, r24
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <_Z4loopv+0x12cc>
    38b8:	aa 0f       	add	r26, r26
    38ba:	bb 1f       	adc	r27, r27
    38bc:	2a 95       	dec	r18
    38be:	e2 f7       	brpl	.-8      	; 0x38b8 <_Z4loopv+0x12c8>
    38c0:	9d 01       	movw	r18, r26
    38c2:	26 2b       	or	r18, r22
    38c4:	25 b9       	out	0x05, r18	; 5
    38c6:	b5 e0       	ldi	r27, 0x05	; 5
    38c8:	ba 95       	dec	r27
    38ca:	f1 f7       	brne	.-4      	; 0x38c8 <_Z4loopv+0x12d8>
    38cc:	00 00       	nop
    38ce:	21 81       	ldd	r18, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    38d0:	28 30       	cpi	r18, 0x08	; 8
    38d2:	68 f4       	brcc	.+26     	; 0x38ee <_Z4loopv+0x12fe>
    38d4:	3b b1       	in	r19, 0x0b	; 11
    38d6:	27 70       	andi	r18, 0x07	; 7
    38d8:	bc 01       	movw	r22, r24
    38da:	02 c0       	rjmp	.+4      	; 0x38e0 <_Z4loopv+0x12f0>
    38dc:	66 0f       	add	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	2a 95       	dec	r18
    38e2:	e2 f7       	brpl	.-8      	; 0x38dc <_Z4loopv+0x12ec>
    38e4:	26 2f       	mov	r18, r22
    38e6:	20 95       	com	r18
    38e8:	23 23       	and	r18, r19
    38ea:	2b b9       	out	0x0b, r18	; 11
    38ec:	0c c0       	rjmp	.+24     	; 0x3906 <_Z4loopv+0x1316>
    38ee:	35 b1       	in	r19, 0x05	; 5
    38f0:	27 70       	andi	r18, 0x07	; 7
    38f2:	bc 01       	movw	r22, r24
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <_Z4loopv+0x130a>
    38f6:	66 0f       	add	r22, r22
    38f8:	77 1f       	adc	r23, r23
    38fa:	2a 95       	dec	r18
    38fc:	e2 f7       	brpl	.-8      	; 0x38f6 <_Z4loopv+0x1306>
    38fe:	26 2f       	mov	r18, r22
    3900:	20 95       	com	r18
    3902:	23 23       	and	r18, r19
    3904:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3906:	af e3       	ldi	r26, 0x3F	; 63
    3908:	bf e1       	ldi	r27, 0x1F	; 31
    390a:	11 97       	sbiw	r26, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <_Z4loopv+0x131a>
    390e:	00 c0       	rjmp	.+0      	; 0x3910 <_Z4loopv+0x1320>
    3910:	00 00       	nop
			
			public: void Write(char str[], uint8 row, uint8 pos) {
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    3912:	4f 5f       	subi	r20, 0xFF	; 255
    3914:	5f 4f       	sbci	r21, 0xFF	; 255
    3916:	40 32       	cpi	r20, 0x20	; 32
    3918:	51 05       	cpc	r21, r1
    391a:	09 f0       	breq	.+2      	; 0x391e <_Z4loopv+0x132e>
    391c:	2b cc       	rjmp	.-1962   	; 0x3174 <_Z4loopv+0xb84>
	lcd->Write(humStr, 1, 10);
    391e:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <lcd>
    3922:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <lcd+0x1>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    3926:	f8 01       	movw	r30, r16
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	88 30       	cpi	r24, 0x08	; 8
    392c:	78 f4       	brcc	.+30     	; 0x394c <_Z4loopv+0x135c>
    392e:	4b b1       	in	r20, 0x0b	; 11
    3930:	87 70       	andi	r24, 0x07	; 7
    3932:	21 e0       	ldi	r18, 0x01	; 1
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	b9 01       	movw	r22, r18
    3938:	02 c0       	rjmp	.+4      	; 0x393e <_Z4loopv+0x134e>
    393a:	66 0f       	add	r22, r22
    393c:	77 1f       	adc	r23, r23
    393e:	8a 95       	dec	r24
    3940:	e2 f7       	brpl	.-8      	; 0x393a <_Z4loopv+0x134a>
    3942:	cb 01       	movw	r24, r22
    3944:	80 95       	com	r24
    3946:	84 23       	and	r24, r20
    3948:	8b b9       	out	0x0b, r24	; 11
    394a:	0e c0       	rjmp	.+28     	; 0x3968 <_Z4loopv+0x1378>
    394c:	45 b1       	in	r20, 0x05	; 5
    394e:	87 70       	andi	r24, 0x07	; 7
    3950:	21 e0       	ldi	r18, 0x01	; 1
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	d9 01       	movw	r26, r18
    3956:	02 c0       	rjmp	.+4      	; 0x395c <_Z4loopv+0x136c>
    3958:	aa 0f       	add	r26, r26
    395a:	bb 1f       	adc	r27, r27
    395c:	8a 95       	dec	r24
    395e:	e2 f7       	brpl	.-8      	; 0x3958 <_Z4loopv+0x1368>
    3960:	cd 01       	movw	r24, r26
    3962:	80 95       	com	r24
    3964:	84 23       	and	r24, r20
    3966:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 5));
    3968:	f8 01       	movw	r30, r16
    396a:	83 81       	ldd	r24, Z+3	; 0x03
    396c:	88 30       	cpi	r24, 0x08	; 8
    396e:	78 f4       	brcc	.+30     	; 0x398e <_Z4loopv+0x139e>
    3970:	4b b1       	in	r20, 0x0b	; 11
    3972:	87 70       	andi	r24, 0x07	; 7
    3974:	21 e0       	ldi	r18, 0x01	; 1
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	b9 01       	movw	r22, r18
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <_Z4loopv+0x1390>
    397c:	66 0f       	add	r22, r22
    397e:	77 1f       	adc	r23, r23
    3980:	8a 95       	dec	r24
    3982:	e2 f7       	brpl	.-8      	; 0x397c <_Z4loopv+0x138c>
    3984:	cb 01       	movw	r24, r22
    3986:	80 95       	com	r24
    3988:	84 23       	and	r24, r20
    398a:	8b b9       	out	0x0b, r24	; 11
    398c:	0e c0       	rjmp	.+28     	; 0x39aa <_Z4loopv+0x13ba>
    398e:	45 b1       	in	r20, 0x05	; 5
    3990:	87 70       	andi	r24, 0x07	; 7
    3992:	21 e0       	ldi	r18, 0x01	; 1
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	d9 01       	movw	r26, r18
    3998:	02 c0       	rjmp	.+4      	; 0x399e <_Z4loopv+0x13ae>
    399a:	aa 0f       	add	r26, r26
    399c:	bb 1f       	adc	r27, r27
    399e:	8a 95       	dec	r24
    39a0:	e2 f7       	brpl	.-8      	; 0x399a <_Z4loopv+0x13aa>
    39a2:	cd 01       	movw	r24, r26
    39a4:	80 95       	com	r24
    39a6:	84 23       	and	r24, r20
    39a8:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 6));
    39aa:	f8 01       	movw	r30, r16
    39ac:	84 81       	ldd	r24, Z+4	; 0x04
    39ae:	88 30       	cpi	r24, 0x08	; 8
    39b0:	78 f4       	brcc	.+30     	; 0x39d0 <_Z4loopv+0x13e0>
    39b2:	4b b1       	in	r20, 0x0b	; 11
    39b4:	87 70       	andi	r24, 0x07	; 7
    39b6:	21 e0       	ldi	r18, 0x01	; 1
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	b9 01       	movw	r22, r18
    39bc:	02 c0       	rjmp	.+4      	; 0x39c2 <_Z4loopv+0x13d2>
    39be:	66 0f       	add	r22, r22
    39c0:	77 1f       	adc	r23, r23
    39c2:	8a 95       	dec	r24
    39c4:	e2 f7       	brpl	.-8      	; 0x39be <_Z4loopv+0x13ce>
    39c6:	cb 01       	movw	r24, r22
    39c8:	80 95       	com	r24
    39ca:	84 23       	and	r24, r20
    39cc:	8b b9       	out	0x0b, r24	; 11
    39ce:	0e c0       	rjmp	.+28     	; 0x39ec <_Z4loopv+0x13fc>
    39d0:	45 b1       	in	r20, 0x05	; 5
    39d2:	87 70       	andi	r24, 0x07	; 7
    39d4:	21 e0       	ldi	r18, 0x01	; 1
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	d9 01       	movw	r26, r18
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <_Z4loopv+0x13f0>
    39dc:	aa 0f       	add	r26, r26
    39de:	bb 1f       	adc	r27, r27
    39e0:	8a 95       	dec	r24
    39e2:	e2 f7       	brpl	.-8      	; 0x39dc <_Z4loopv+0x13ec>
    39e4:	cd 01       	movw	r24, r26
    39e6:	80 95       	com	r24
    39e8:	84 23       	and	r24, r20
    39ea:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 7));
    39ec:	f8 01       	movw	r30, r16
    39ee:	85 81       	ldd	r24, Z+5	; 0x05
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    39f0:	88 30       	cpi	r24, 0x08	; 8
    39f2:	70 f4       	brcc	.+28     	; 0x3a10 <_Z4loopv+0x1420>
    39f4:	4b b1       	in	r20, 0x0b	; 11
    39f6:	87 70       	andi	r24, 0x07	; 7
    39f8:	21 e0       	ldi	r18, 0x01	; 1
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	b9 01       	movw	r22, r18
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <_Z4loopv+0x1414>
    3a00:	66 0f       	add	r22, r22
    3a02:	77 1f       	adc	r23, r23
    3a04:	8a 95       	dec	r24
    3a06:	e2 f7       	brpl	.-8      	; 0x3a00 <_Z4loopv+0x1410>
    3a08:	cb 01       	movw	r24, r22
    3a0a:	84 2b       	or	r24, r20
    3a0c:	8b b9       	out	0x0b, r24	; 11
    3a0e:	0d c0       	rjmp	.+26     	; 0x3a2a <_Z4loopv+0x143a>
    3a10:	45 b1       	in	r20, 0x05	; 5
    3a12:	87 70       	andi	r24, 0x07	; 7
    3a14:	21 e0       	ldi	r18, 0x01	; 1
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	d9 01       	movw	r26, r18
    3a1a:	02 c0       	rjmp	.+4      	; 0x3a20 <_Z4loopv+0x1430>
    3a1c:	aa 0f       	add	r26, r26
    3a1e:	bb 1f       	adc	r27, r27
    3a20:	8a 95       	dec	r24
    3a22:	e2 f7       	brpl	.-8      	; 0x3a1c <_Z4loopv+0x142c>
    3a24:	cd 01       	movw	r24, r26
    3a26:	84 2b       	or	r24, r20
    3a28:	85 b9       	out	0x05, r24	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    3a2a:	f8 01       	movw	r30, r16
    3a2c:	80 81       	ld	r24, Z
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3a2e:	88 30       	cpi	r24, 0x08	; 8
    3a30:	78 f4       	brcc	.+30     	; 0x3a50 <_Z4loopv+0x1460>
    3a32:	4b b1       	in	r20, 0x0b	; 11
    3a34:	87 70       	andi	r24, 0x07	; 7
    3a36:	21 e0       	ldi	r18, 0x01	; 1
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	b9 01       	movw	r22, r18
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <_Z4loopv+0x1452>
    3a3e:	66 0f       	add	r22, r22
    3a40:	77 1f       	adc	r23, r23
    3a42:	8a 95       	dec	r24
    3a44:	e2 f7       	brpl	.-8      	; 0x3a3e <_Z4loopv+0x144e>
    3a46:	cb 01       	movw	r24, r22
    3a48:	80 95       	com	r24
    3a4a:	84 23       	and	r24, r20
    3a4c:	8b b9       	out	0x0b, r24	; 11
    3a4e:	0e c0       	rjmp	.+28     	; 0x3a6c <_Z4loopv+0x147c>
    3a50:	45 b1       	in	r20, 0x05	; 5
    3a52:	87 70       	andi	r24, 0x07	; 7
    3a54:	21 e0       	ldi	r18, 0x01	; 1
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	d9 01       	movw	r26, r18
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <_Z4loopv+0x1470>
    3a5c:	aa 0f       	add	r26, r26
    3a5e:	bb 1f       	adc	r27, r27
    3a60:	8a 95       	dec	r24
    3a62:	e2 f7       	brpl	.-8      	; 0x3a5c <_Z4loopv+0x146c>
    3a64:	cd 01       	movw	r24, r26
    3a66:	80 95       	com	r24
    3a68:	84 23       	and	r24, r20
    3a6a:	85 b9       	out	0x05, r24	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	81 81       	ldd	r24, Z+1	; 0x01
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3a70:	88 30       	cpi	r24, 0x08	; 8
    3a72:	70 f4       	brcc	.+28     	; 0x3a90 <_Z4loopv+0x14a0>
    3a74:	4b b1       	in	r20, 0x0b	; 11
    3a76:	87 70       	andi	r24, 0x07	; 7
    3a78:	21 e0       	ldi	r18, 0x01	; 1
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	b9 01       	movw	r22, r18
    3a7e:	02 c0       	rjmp	.+4      	; 0x3a84 <_Z4loopv+0x1494>
    3a80:	66 0f       	add	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	8a 95       	dec	r24
    3a86:	e2 f7       	brpl	.-8      	; 0x3a80 <_Z4loopv+0x1490>
    3a88:	cb 01       	movw	r24, r22
    3a8a:	84 2b       	or	r24, r20
    3a8c:	8b b9       	out	0x0b, r24	; 11
    3a8e:	0d c0       	rjmp	.+26     	; 0x3aaa <_Z4loopv+0x14ba>
    3a90:	45 b1       	in	r20, 0x05	; 5
    3a92:	87 70       	andi	r24, 0x07	; 7
    3a94:	21 e0       	ldi	r18, 0x01	; 1
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	d9 01       	movw	r26, r18
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <_Z4loopv+0x14b0>
    3a9c:	aa 0f       	add	r26, r26
    3a9e:	bb 1f       	adc	r27, r27
    3aa0:	8a 95       	dec	r24
    3aa2:	e2 f7       	brpl	.-8      	; 0x3a9c <_Z4loopv+0x14ac>
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	84 2b       	or	r24, r20
    3aa8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3aaa:	b5 e0       	ldi	r27, 0x05	; 5
    3aac:	ba 95       	dec	r27
    3aae:	f1 f7       	brne	.-4      	; 0x3aac <_Z4loopv+0x14bc>
    3ab0:	00 00       	nop
    3ab2:	f8 01       	movw	r30, r16
    3ab4:	81 81       	ldd	r24, Z+1	; 0x01
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3ab6:	88 30       	cpi	r24, 0x08	; 8
    3ab8:	78 f4       	brcc	.+30     	; 0x3ad8 <_Z4loopv+0x14e8>
    3aba:	4b b1       	in	r20, 0x0b	; 11
    3abc:	87 70       	andi	r24, 0x07	; 7
    3abe:	21 e0       	ldi	r18, 0x01	; 1
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	b9 01       	movw	r22, r18
    3ac4:	02 c0       	rjmp	.+4      	; 0x3aca <_Z4loopv+0x14da>
    3ac6:	66 0f       	add	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	8a 95       	dec	r24
    3acc:	e2 f7       	brpl	.-8      	; 0x3ac6 <_Z4loopv+0x14d6>
    3ace:	cb 01       	movw	r24, r22
    3ad0:	80 95       	com	r24
    3ad2:	84 23       	and	r24, r20
    3ad4:	8b b9       	out	0x0b, r24	; 11
    3ad6:	0e c0       	rjmp	.+28     	; 0x3af4 <_Z4loopv+0x1504>
    3ad8:	45 b1       	in	r20, 0x05	; 5
    3ada:	87 70       	andi	r24, 0x07	; 7
    3adc:	21 e0       	ldi	r18, 0x01	; 1
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	d9 01       	movw	r26, r18
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <_Z4loopv+0x14f8>
    3ae4:	aa 0f       	add	r26, r26
    3ae6:	bb 1f       	adc	r27, r27
    3ae8:	8a 95       	dec	r24
    3aea:	e2 f7       	brpl	.-8      	; 0x3ae4 <_Z4loopv+0x14f4>
    3aec:	cd 01       	movw	r24, r26
    3aee:	80 95       	com	r24
    3af0:	84 23       	and	r24, r20
    3af2:	85 b9       	out	0x05, r24	; 5
    3af4:	ef e1       	ldi	r30, 0x1F	; 31
    3af6:	f3 e0       	ldi	r31, 0x03	; 3
    3af8:	31 97       	sbiw	r30, 0x01	; 1
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <_Z4loopv+0x1508>
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <_Z4loopv+0x150e>
    3afe:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    3b00:	d8 01       	movw	r26, r16
    3b02:	12 96       	adiw	r26, 0x02	; 2
    3b04:	8c 91       	ld	r24, X
    3b06:	88 30       	cpi	r24, 0x08	; 8
    3b08:	78 f4       	brcc	.+30     	; 0x3b28 <_Z4loopv+0x1538>
    3b0a:	4b b1       	in	r20, 0x0b	; 11
    3b0c:	87 70       	andi	r24, 0x07	; 7
    3b0e:	21 e0       	ldi	r18, 0x01	; 1
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	f9 01       	movw	r30, r18
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <_Z4loopv+0x152a>
    3b16:	ee 0f       	add	r30, r30
    3b18:	ff 1f       	adc	r31, r31
    3b1a:	8a 95       	dec	r24
    3b1c:	e2 f7       	brpl	.-8      	; 0x3b16 <_Z4loopv+0x1526>
    3b1e:	cf 01       	movw	r24, r30
    3b20:	80 95       	com	r24
    3b22:	84 23       	and	r24, r20
    3b24:	8b b9       	out	0x0b, r24	; 11
    3b26:	0e c0       	rjmp	.+28     	; 0x3b44 <_Z4loopv+0x1554>
    3b28:	45 b1       	in	r20, 0x05	; 5
    3b2a:	87 70       	andi	r24, 0x07	; 7
    3b2c:	21 e0       	ldi	r18, 0x01	; 1
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	b9 01       	movw	r22, r18
    3b32:	02 c0       	rjmp	.+4      	; 0x3b38 <_Z4loopv+0x1548>
    3b34:	66 0f       	add	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	8a 95       	dec	r24
    3b3a:	e2 f7       	brpl	.-8      	; 0x3b34 <_Z4loopv+0x1544>
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	80 95       	com	r24
    3b40:	84 23       	and	r24, r20
    3b42:	85 b9       	out	0x05, r24	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3b44:	d8 01       	movw	r26, r16
    3b46:	13 96       	adiw	r26, 0x03	; 3
    3b48:	8c 91       	ld	r24, X
    3b4a:	88 30       	cpi	r24, 0x08	; 8
    3b4c:	78 f4       	brcc	.+30     	; 0x3b6c <_Z4loopv+0x157c>
    3b4e:	4b b1       	in	r20, 0x0b	; 11
    3b50:	87 70       	andi	r24, 0x07	; 7
    3b52:	21 e0       	ldi	r18, 0x01	; 1
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	f9 01       	movw	r30, r18
    3b58:	02 c0       	rjmp	.+4      	; 0x3b5e <_Z4loopv+0x156e>
    3b5a:	ee 0f       	add	r30, r30
    3b5c:	ff 1f       	adc	r31, r31
    3b5e:	8a 95       	dec	r24
    3b60:	e2 f7       	brpl	.-8      	; 0x3b5a <_Z4loopv+0x156a>
    3b62:	cf 01       	movw	r24, r30
    3b64:	80 95       	com	r24
    3b66:	84 23       	and	r24, r20
    3b68:	8b b9       	out	0x0b, r24	; 11
    3b6a:	0e c0       	rjmp	.+28     	; 0x3b88 <_Z4loopv+0x1598>
    3b6c:	45 b1       	in	r20, 0x05	; 5
    3b6e:	87 70       	andi	r24, 0x07	; 7
    3b70:	21 e0       	ldi	r18, 0x01	; 1
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	b9 01       	movw	r22, r18
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <_Z4loopv+0x158c>
    3b78:	66 0f       	add	r22, r22
    3b7a:	77 1f       	adc	r23, r23
    3b7c:	8a 95       	dec	r24
    3b7e:	e2 f7       	brpl	.-8      	; 0x3b78 <_Z4loopv+0x1588>
    3b80:	cb 01       	movw	r24, r22
    3b82:	80 95       	com	r24
    3b84:	84 23       	and	r24, r20
    3b86:	85 b9       	out	0x05, r24	; 5
				enable(_ports[2], util::get_bit(data, 2));
    3b88:	d8 01       	movw	r26, r16
    3b8a:	14 96       	adiw	r26, 0x04	; 4
    3b8c:	8c 91       	ld	r24, X
    3b8e:	88 30       	cpi	r24, 0x08	; 8
    3b90:	78 f4       	brcc	.+30     	; 0x3bb0 <_Z4loopv+0x15c0>
    3b92:	4b b1       	in	r20, 0x0b	; 11
    3b94:	87 70       	andi	r24, 0x07	; 7
    3b96:	21 e0       	ldi	r18, 0x01	; 1
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	f9 01       	movw	r30, r18
    3b9c:	02 c0       	rjmp	.+4      	; 0x3ba2 <_Z4loopv+0x15b2>
    3b9e:	ee 0f       	add	r30, r30
    3ba0:	ff 1f       	adc	r31, r31
    3ba2:	8a 95       	dec	r24
    3ba4:	e2 f7       	brpl	.-8      	; 0x3b9e <_Z4loopv+0x15ae>
    3ba6:	cf 01       	movw	r24, r30
    3ba8:	80 95       	com	r24
    3baa:	84 23       	and	r24, r20
    3bac:	8b b9       	out	0x0b, r24	; 11
    3bae:	0e c0       	rjmp	.+28     	; 0x3bcc <_Z4loopv+0x15dc>
    3bb0:	45 b1       	in	r20, 0x05	; 5
    3bb2:	87 70       	andi	r24, 0x07	; 7
    3bb4:	21 e0       	ldi	r18, 0x01	; 1
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	b9 01       	movw	r22, r18
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <_Z4loopv+0x15d0>
    3bbc:	66 0f       	add	r22, r22
    3bbe:	77 1f       	adc	r23, r23
    3bc0:	8a 95       	dec	r24
    3bc2:	e2 f7       	brpl	.-8      	; 0x3bbc <_Z4loopv+0x15cc>
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	80 95       	com	r24
    3bc8:	84 23       	and	r24, r20
    3bca:	85 b9       	out	0x05, r24	; 5
				enable(_ports[3], util::get_bit(data, 3));
    3bcc:	d8 01       	movw	r26, r16
    3bce:	15 96       	adiw	r26, 0x05	; 5
    3bd0:	8c 91       	ld	r24, X
    3bd2:	88 30       	cpi	r24, 0x08	; 8
    3bd4:	78 f4       	brcc	.+30     	; 0x3bf4 <_Z4loopv+0x1604>
    3bd6:	4b b1       	in	r20, 0x0b	; 11
    3bd8:	87 70       	andi	r24, 0x07	; 7
    3bda:	21 e0       	ldi	r18, 0x01	; 1
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	f9 01       	movw	r30, r18
    3be0:	02 c0       	rjmp	.+4      	; 0x3be6 <_Z4loopv+0x15f6>
    3be2:	ee 0f       	add	r30, r30
    3be4:	ff 1f       	adc	r31, r31
    3be6:	8a 95       	dec	r24
    3be8:	e2 f7       	brpl	.-8      	; 0x3be2 <_Z4loopv+0x15f2>
    3bea:	cf 01       	movw	r24, r30
    3bec:	80 95       	com	r24
    3bee:	84 23       	and	r24, r20
    3bf0:	8b b9       	out	0x0b, r24	; 11
    3bf2:	0e c0       	rjmp	.+28     	; 0x3c10 <_Z4loopv+0x1620>
    3bf4:	45 b1       	in	r20, 0x05	; 5
    3bf6:	87 70       	andi	r24, 0x07	; 7
    3bf8:	21 e0       	ldi	r18, 0x01	; 1
    3bfa:	30 e0       	ldi	r19, 0x00	; 0
    3bfc:	b9 01       	movw	r22, r18
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <_Z4loopv+0x1614>
    3c00:	66 0f       	add	r22, r22
    3c02:	77 1f       	adc	r23, r23
    3c04:	8a 95       	dec	r24
    3c06:	e2 f7       	brpl	.-8      	; 0x3c00 <_Z4loopv+0x1610>
    3c08:	cb 01       	movw	r24, r22
    3c0a:	80 95       	com	r24
    3c0c:	84 23       	and	r24, r20
    3c0e:	85 b9       	out	0x05, r24	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3c10:	d8 01       	movw	r26, r16
    3c12:	11 96       	adiw	r26, 0x01	; 1
    3c14:	8c 91       	ld	r24, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3c16:	88 30       	cpi	r24, 0x08	; 8
    3c18:	70 f4       	brcc	.+28     	; 0x3c36 <_Z4loopv+0x1646>
    3c1a:	4b b1       	in	r20, 0x0b	; 11
    3c1c:	87 70       	andi	r24, 0x07	; 7
    3c1e:	21 e0       	ldi	r18, 0x01	; 1
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	f9 01       	movw	r30, r18
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <_Z4loopv+0x163a>
    3c26:	ee 0f       	add	r30, r30
    3c28:	ff 1f       	adc	r31, r31
    3c2a:	8a 95       	dec	r24
    3c2c:	e2 f7       	brpl	.-8      	; 0x3c26 <_Z4loopv+0x1636>
    3c2e:	cf 01       	movw	r24, r30
    3c30:	84 2b       	or	r24, r20
    3c32:	8b b9       	out	0x0b, r24	; 11
    3c34:	0d c0       	rjmp	.+26     	; 0x3c50 <_Z4loopv+0x1660>
    3c36:	45 b1       	in	r20, 0x05	; 5
    3c38:	87 70       	andi	r24, 0x07	; 7
    3c3a:	21 e0       	ldi	r18, 0x01	; 1
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	b9 01       	movw	r22, r18
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <_Z4loopv+0x1656>
    3c42:	66 0f       	add	r22, r22
    3c44:	77 1f       	adc	r23, r23
    3c46:	8a 95       	dec	r24
    3c48:	e2 f7       	brpl	.-8      	; 0x3c42 <_Z4loopv+0x1652>
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	84 2b       	or	r24, r20
    3c4e:	85 b9       	out	0x05, r24	; 5
    3c50:	75 e0       	ldi	r23, 0x05	; 5
    3c52:	7a 95       	dec	r23
    3c54:	f1 f7       	brne	.-4      	; 0x3c52 <_Z4loopv+0x1662>
    3c56:	00 00       	nop
    3c58:	d8 01       	movw	r26, r16
    3c5a:	11 96       	adiw	r26, 0x01	; 1
    3c5c:	8c 91       	ld	r24, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3c5e:	88 30       	cpi	r24, 0x08	; 8
    3c60:	78 f4       	brcc	.+30     	; 0x3c80 <_Z4loopv+0x1690>
    3c62:	4b b1       	in	r20, 0x0b	; 11
    3c64:	87 70       	andi	r24, 0x07	; 7
    3c66:	21 e0       	ldi	r18, 0x01	; 1
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	f9 01       	movw	r30, r18
    3c6c:	02 c0       	rjmp	.+4      	; 0x3c72 <_Z4loopv+0x1682>
    3c6e:	ee 0f       	add	r30, r30
    3c70:	ff 1f       	adc	r31, r31
    3c72:	8a 95       	dec	r24
    3c74:	e2 f7       	brpl	.-8      	; 0x3c6e <_Z4loopv+0x167e>
    3c76:	cf 01       	movw	r24, r30
    3c78:	80 95       	com	r24
    3c7a:	84 23       	and	r24, r20
    3c7c:	8b b9       	out	0x0b, r24	; 11
    3c7e:	0e c0       	rjmp	.+28     	; 0x3c9c <_Z4loopv+0x16ac>
    3c80:	45 b1       	in	r20, 0x05	; 5
    3c82:	87 70       	andi	r24, 0x07	; 7
    3c84:	21 e0       	ldi	r18, 0x01	; 1
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	b9 01       	movw	r22, r18
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <_Z4loopv+0x16a0>
    3c8c:	66 0f       	add	r22, r22
    3c8e:	77 1f       	adc	r23, r23
    3c90:	8a 95       	dec	r24
    3c92:	e2 f7       	brpl	.-8      	; 0x3c8c <_Z4loopv+0x169c>
    3c94:	cb 01       	movw	r24, r22
    3c96:	80 95       	com	r24
    3c98:	84 23       	and	r24, r20
    3c9a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c9c:	8f e3       	ldi	r24, 0x3F	; 63
    3c9e:	9f e1       	ldi	r25, 0x1F	; 31
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <_Z4loopv+0x16b0>
    3ca4:	00 c0       	rjmp	.+0      	; 0x3ca6 <_Z4loopv+0x16b6>
    3ca6:	00 00       	nop
			}
			
			public: void Write(char str[], uint8 row, uint8 pos) {
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
    3ca8:	6a ec       	ldi	r22, 0xCA	; 202
    3caa:	c8 01       	movw	r24, r16
    3cac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_ZN7zeduino9component10DisplayLCD11SendCommandEh>
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    3cb0:	2e 81       	ldd	r18, Y+6	; 0x06
    3cb2:	22 23       	and	r18, r18
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <_Z4loopv+0x16c8>
    3cb6:	0b c4       	rjmp	.+2070   	; 0x44ce <_Z4loopv+0x1ede>
    3cb8:	fe 01       	movw	r30, r28
    3cba:	36 96       	adiw	r30, 0x06	; 6
    3cbc:	40 e0       	ldi	r20, 0x00	; 0
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	04 c0       	rjmp	.+8      	; 0x3cce <_Z4loopv+0x16de>
    3cc6:	20 81       	ld	r18, Z
    3cc8:	22 23       	and	r18, r18
    3cca:	09 f4       	brne	.+2      	; 0x3cce <_Z4loopv+0x16de>
    3ccc:	00 c4       	rjmp	.+2048   	; 0x44ce <_Z4loopv+0x1ede>
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
    3cce:	40 31       	cpi	r20, 0x10	; 16
    3cd0:	51 05       	cpc	r21, r1
    3cd2:	19 f0       	breq	.+6      	; 0x3cda <_Z4loopv+0x16ea>
    3cd4:	2a 30       	cpi	r18, 0x0A	; 10
    3cd6:	09 f0       	breq	.+2      	; 0x3cda <_Z4loopv+0x16ea>
    3cd8:	91 c1       	rjmp	.+802    	; 0x3ffc <_Z4loopv+0x1a0c>
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    3cda:	d8 01       	movw	r26, r16
    3cdc:	12 96       	adiw	r26, 0x02	; 2
    3cde:	2c 91       	ld	r18, X
    3ce0:	28 30       	cpi	r18, 0x08	; 8
    3ce2:	68 f4       	brcc	.+26     	; 0x3cfe <_Z4loopv+0x170e>
    3ce4:	3b b1       	in	r19, 0x0b	; 11
    3ce6:	27 70       	andi	r18, 0x07	; 7
    3ce8:	bc 01       	movw	r22, r24
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <_Z4loopv+0x1700>
    3cec:	66 0f       	add	r22, r22
    3cee:	77 1f       	adc	r23, r23
    3cf0:	2a 95       	dec	r18
    3cf2:	e2 f7       	brpl	.-8      	; 0x3cec <_Z4loopv+0x16fc>
    3cf4:	26 2f       	mov	r18, r22
    3cf6:	20 95       	com	r18
    3cf8:	23 23       	and	r18, r19
    3cfa:	2b b9       	out	0x0b, r18	; 11
    3cfc:	0c c0       	rjmp	.+24     	; 0x3d16 <_Z4loopv+0x1726>
    3cfe:	35 b1       	in	r19, 0x05	; 5
    3d00:	27 70       	andi	r18, 0x07	; 7
    3d02:	bc 01       	movw	r22, r24
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <_Z4loopv+0x171a>
    3d06:	66 0f       	add	r22, r22
    3d08:	77 1f       	adc	r23, r23
    3d0a:	2a 95       	dec	r18
    3d0c:	e2 f7       	brpl	.-8      	; 0x3d06 <_Z4loopv+0x1716>
    3d0e:	26 2f       	mov	r18, r22
    3d10:	20 95       	com	r18
    3d12:	23 23       	and	r18, r19
    3d14:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 5));
    3d16:	d8 01       	movw	r26, r16
    3d18:	13 96       	adiw	r26, 0x03	; 3
    3d1a:	2c 91       	ld	r18, X
    3d1c:	28 30       	cpi	r18, 0x08	; 8
    3d1e:	68 f4       	brcc	.+26     	; 0x3d3a <_Z4loopv+0x174a>
    3d20:	3b b1       	in	r19, 0x0b	; 11
    3d22:	27 70       	andi	r18, 0x07	; 7
    3d24:	bc 01       	movw	r22, r24
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <_Z4loopv+0x173c>
    3d28:	66 0f       	add	r22, r22
    3d2a:	77 1f       	adc	r23, r23
    3d2c:	2a 95       	dec	r18
    3d2e:	e2 f7       	brpl	.-8      	; 0x3d28 <_Z4loopv+0x1738>
    3d30:	26 2f       	mov	r18, r22
    3d32:	20 95       	com	r18
    3d34:	23 23       	and	r18, r19
    3d36:	2b b9       	out	0x0b, r18	; 11
    3d38:	0c c0       	rjmp	.+24     	; 0x3d52 <_Z4loopv+0x1762>
    3d3a:	35 b1       	in	r19, 0x05	; 5
    3d3c:	27 70       	andi	r18, 0x07	; 7
    3d3e:	bc 01       	movw	r22, r24
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <_Z4loopv+0x1756>
    3d42:	66 0f       	add	r22, r22
    3d44:	77 1f       	adc	r23, r23
    3d46:	2a 95       	dec	r18
    3d48:	e2 f7       	brpl	.-8      	; 0x3d42 <_Z4loopv+0x1752>
    3d4a:	26 2f       	mov	r18, r22
    3d4c:	20 95       	com	r18
    3d4e:	23 23       	and	r18, r19
    3d50:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 6));
    3d52:	d8 01       	movw	r26, r16
    3d54:	14 96       	adiw	r26, 0x04	; 4
    3d56:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3d58:	28 30       	cpi	r18, 0x08	; 8
    3d5a:	60 f4       	brcc	.+24     	; 0x3d74 <_Z4loopv+0x1784>
    3d5c:	6b b1       	in	r22, 0x0b	; 11
    3d5e:	27 70       	andi	r18, 0x07	; 7
    3d60:	dc 01       	movw	r26, r24
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <_Z4loopv+0x1778>
    3d64:	aa 0f       	add	r26, r26
    3d66:	bb 1f       	adc	r27, r27
    3d68:	2a 95       	dec	r18
    3d6a:	e2 f7       	brpl	.-8      	; 0x3d64 <_Z4loopv+0x1774>
    3d6c:	9d 01       	movw	r18, r26
    3d6e:	26 2b       	or	r18, r22
    3d70:	2b b9       	out	0x0b, r18	; 11
    3d72:	0b c0       	rjmp	.+22     	; 0x3d8a <_Z4loopv+0x179a>
    3d74:	65 b1       	in	r22, 0x05	; 5
    3d76:	27 70       	andi	r18, 0x07	; 7
    3d78:	dc 01       	movw	r26, r24
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <_Z4loopv+0x1790>
    3d7c:	aa 0f       	add	r26, r26
    3d7e:	bb 1f       	adc	r27, r27
    3d80:	2a 95       	dec	r18
    3d82:	e2 f7       	brpl	.-8      	; 0x3d7c <_Z4loopv+0x178c>
    3d84:	9d 01       	movw	r18, r26
    3d86:	26 2b       	or	r18, r22
    3d88:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 7));
    3d8a:	d8 01       	movw	r26, r16
    3d8c:	15 96       	adiw	r26, 0x05	; 5
    3d8e:	2c 91       	ld	r18, X
    3d90:	28 30       	cpi	r18, 0x08	; 8
    3d92:	60 f4       	brcc	.+24     	; 0x3dac <_Z4loopv+0x17bc>
    3d94:	6b b1       	in	r22, 0x0b	; 11
    3d96:	27 70       	andi	r18, 0x07	; 7
    3d98:	dc 01       	movw	r26, r24
    3d9a:	02 c0       	rjmp	.+4      	; 0x3da0 <_Z4loopv+0x17b0>
    3d9c:	aa 0f       	add	r26, r26
    3d9e:	bb 1f       	adc	r27, r27
    3da0:	2a 95       	dec	r18
    3da2:	e2 f7       	brpl	.-8      	; 0x3d9c <_Z4loopv+0x17ac>
    3da4:	9d 01       	movw	r18, r26
    3da6:	26 2b       	or	r18, r22
    3da8:	2b b9       	out	0x0b, r18	; 11
    3daa:	0b c0       	rjmp	.+22     	; 0x3dc2 <_Z4loopv+0x17d2>
    3dac:	65 b1       	in	r22, 0x05	; 5
    3dae:	27 70       	andi	r18, 0x07	; 7
    3db0:	dc 01       	movw	r26, r24
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <_Z4loopv+0x17c8>
    3db4:	aa 0f       	add	r26, r26
    3db6:	bb 1f       	adc	r27, r27
    3db8:	2a 95       	dec	r18
    3dba:	e2 f7       	brpl	.-8      	; 0x3db4 <_Z4loopv+0x17c4>
    3dbc:	9d 01       	movw	r18, r26
    3dbe:	26 2b       	or	r18, r22
    3dc0:	25 b9       	out	0x05, r18	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    3dc2:	d8 01       	movw	r26, r16
    3dc4:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3dc6:	28 30       	cpi	r18, 0x08	; 8
    3dc8:	68 f4       	brcc	.+26     	; 0x3de4 <_Z4loopv+0x17f4>
    3dca:	3b b1       	in	r19, 0x0b	; 11
    3dcc:	27 70       	andi	r18, 0x07	; 7
    3dce:	bc 01       	movw	r22, r24
    3dd0:	02 c0       	rjmp	.+4      	; 0x3dd6 <_Z4loopv+0x17e6>
    3dd2:	66 0f       	add	r22, r22
    3dd4:	77 1f       	adc	r23, r23
    3dd6:	2a 95       	dec	r18
    3dd8:	e2 f7       	brpl	.-8      	; 0x3dd2 <_Z4loopv+0x17e2>
    3dda:	26 2f       	mov	r18, r22
    3ddc:	20 95       	com	r18
    3dde:	23 23       	and	r18, r19
    3de0:	2b b9       	out	0x0b, r18	; 11
    3de2:	0c c0       	rjmp	.+24     	; 0x3dfc <_Z4loopv+0x180c>
    3de4:	35 b1       	in	r19, 0x05	; 5
    3de6:	27 70       	andi	r18, 0x07	; 7
    3de8:	bc 01       	movw	r22, r24
    3dea:	02 c0       	rjmp	.+4      	; 0x3df0 <_Z4loopv+0x1800>
    3dec:	66 0f       	add	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	2a 95       	dec	r18
    3df2:	e2 f7       	brpl	.-8      	; 0x3dec <_Z4loopv+0x17fc>
    3df4:	26 2f       	mov	r18, r22
    3df6:	20 95       	com	r18
    3df8:	23 23       	and	r18, r19
    3dfa:	25 b9       	out	0x05, r18	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3dfc:	d8 01       	movw	r26, r16
    3dfe:	11 96       	adiw	r26, 0x01	; 1
    3e00:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3e02:	28 30       	cpi	r18, 0x08	; 8
    3e04:	60 f4       	brcc	.+24     	; 0x3e1e <_Z4loopv+0x182e>
    3e06:	6b b1       	in	r22, 0x0b	; 11
    3e08:	27 70       	andi	r18, 0x07	; 7
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <_Z4loopv+0x1822>
    3e0e:	aa 0f       	add	r26, r26
    3e10:	bb 1f       	adc	r27, r27
    3e12:	2a 95       	dec	r18
    3e14:	e2 f7       	brpl	.-8      	; 0x3e0e <_Z4loopv+0x181e>
    3e16:	9d 01       	movw	r18, r26
    3e18:	26 2b       	or	r18, r22
    3e1a:	2b b9       	out	0x0b, r18	; 11
    3e1c:	0b c0       	rjmp	.+22     	; 0x3e34 <_Z4loopv+0x1844>
    3e1e:	65 b1       	in	r22, 0x05	; 5
    3e20:	27 70       	andi	r18, 0x07	; 7
    3e22:	dc 01       	movw	r26, r24
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <_Z4loopv+0x183a>
    3e26:	aa 0f       	add	r26, r26
    3e28:	bb 1f       	adc	r27, r27
    3e2a:	2a 95       	dec	r18
    3e2c:	e2 f7       	brpl	.-8      	; 0x3e26 <_Z4loopv+0x1836>
    3e2e:	9d 01       	movw	r18, r26
    3e30:	26 2b       	or	r18, r22
    3e32:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3e34:	b5 e0       	ldi	r27, 0x05	; 5
    3e36:	ba 95       	dec	r27
    3e38:	f1 f7       	brne	.-4      	; 0x3e36 <_Z4loopv+0x1846>
    3e3a:	00 00       	nop
    3e3c:	d8 01       	movw	r26, r16
    3e3e:	11 96       	adiw	r26, 0x01	; 1
    3e40:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3e42:	28 30       	cpi	r18, 0x08	; 8
    3e44:	68 f4       	brcc	.+26     	; 0x3e60 <_Z4loopv+0x1870>
    3e46:	3b b1       	in	r19, 0x0b	; 11
    3e48:	27 70       	andi	r18, 0x07	; 7
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <_Z4loopv+0x1862>
    3e4e:	66 0f       	add	r22, r22
    3e50:	77 1f       	adc	r23, r23
    3e52:	2a 95       	dec	r18
    3e54:	e2 f7       	brpl	.-8      	; 0x3e4e <_Z4loopv+0x185e>
    3e56:	26 2f       	mov	r18, r22
    3e58:	20 95       	com	r18
    3e5a:	23 23       	and	r18, r19
    3e5c:	2b b9       	out	0x0b, r18	; 11
    3e5e:	0c c0       	rjmp	.+24     	; 0x3e78 <_Z4loopv+0x1888>
    3e60:	35 b1       	in	r19, 0x05	; 5
    3e62:	27 70       	andi	r18, 0x07	; 7
    3e64:	bc 01       	movw	r22, r24
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <_Z4loopv+0x187c>
    3e68:	66 0f       	add	r22, r22
    3e6a:	77 1f       	adc	r23, r23
    3e6c:	2a 95       	dec	r18
    3e6e:	e2 f7       	brpl	.-8      	; 0x3e68 <_Z4loopv+0x1878>
    3e70:	26 2f       	mov	r18, r22
    3e72:	20 95       	com	r18
    3e74:	23 23       	and	r18, r19
    3e76:	25 b9       	out	0x05, r18	; 5
    3e78:	af e1       	ldi	r26, 0x1F	; 31
    3e7a:	b3 e0       	ldi	r27, 0x03	; 3
    3e7c:	11 97       	sbiw	r26, 0x01	; 1
    3e7e:	f1 f7       	brne	.-4      	; 0x3e7c <_Z4loopv+0x188c>
    3e80:	00 c0       	rjmp	.+0      	; 0x3e82 <_Z4loopv+0x1892>
    3e82:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    3e84:	d8 01       	movw	r26, r16
    3e86:	12 96       	adiw	r26, 0x02	; 2
    3e88:	2c 91       	ld	r18, X
    3e8a:	28 30       	cpi	r18, 0x08	; 8
    3e8c:	68 f4       	brcc	.+26     	; 0x3ea8 <_Z4loopv+0x18b8>
    3e8e:	3b b1       	in	r19, 0x0b	; 11
    3e90:	27 70       	andi	r18, 0x07	; 7
    3e92:	bc 01       	movw	r22, r24
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <_Z4loopv+0x18aa>
    3e96:	66 0f       	add	r22, r22
    3e98:	77 1f       	adc	r23, r23
    3e9a:	2a 95       	dec	r18
    3e9c:	e2 f7       	brpl	.-8      	; 0x3e96 <_Z4loopv+0x18a6>
    3e9e:	26 2f       	mov	r18, r22
    3ea0:	20 95       	com	r18
    3ea2:	23 23       	and	r18, r19
    3ea4:	2b b9       	out	0x0b, r18	; 11
    3ea6:	0c c0       	rjmp	.+24     	; 0x3ec0 <_Z4loopv+0x18d0>
    3ea8:	35 b1       	in	r19, 0x05	; 5
    3eaa:	27 70       	andi	r18, 0x07	; 7
    3eac:	bc 01       	movw	r22, r24
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <_Z4loopv+0x18c4>
    3eb0:	66 0f       	add	r22, r22
    3eb2:	77 1f       	adc	r23, r23
    3eb4:	2a 95       	dec	r18
    3eb6:	e2 f7       	brpl	.-8      	; 0x3eb0 <_Z4loopv+0x18c0>
    3eb8:	26 2f       	mov	r18, r22
    3eba:	20 95       	com	r18
    3ebc:	23 23       	and	r18, r19
    3ebe:	25 b9       	out	0x05, r18	; 5
				enable(_ports[1], util::get_bit(data, 1));
    3ec0:	d8 01       	movw	r26, r16
    3ec2:	13 96       	adiw	r26, 0x03	; 3
    3ec4:	2c 91       	ld	r18, X
    3ec6:	28 30       	cpi	r18, 0x08	; 8
    3ec8:	68 f4       	brcc	.+26     	; 0x3ee4 <_Z4loopv+0x18f4>
    3eca:	3b b1       	in	r19, 0x0b	; 11
    3ecc:	27 70       	andi	r18, 0x07	; 7
    3ece:	bc 01       	movw	r22, r24
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <_Z4loopv+0x18e6>
    3ed2:	66 0f       	add	r22, r22
    3ed4:	77 1f       	adc	r23, r23
    3ed6:	2a 95       	dec	r18
    3ed8:	e2 f7       	brpl	.-8      	; 0x3ed2 <_Z4loopv+0x18e2>
    3eda:	26 2f       	mov	r18, r22
    3edc:	20 95       	com	r18
    3ede:	23 23       	and	r18, r19
    3ee0:	2b b9       	out	0x0b, r18	; 11
    3ee2:	0c c0       	rjmp	.+24     	; 0x3efc <_Z4loopv+0x190c>
    3ee4:	35 b1       	in	r19, 0x05	; 5
    3ee6:	27 70       	andi	r18, 0x07	; 7
    3ee8:	bc 01       	movw	r22, r24
    3eea:	02 c0       	rjmp	.+4      	; 0x3ef0 <_Z4loopv+0x1900>
    3eec:	66 0f       	add	r22, r22
    3eee:	77 1f       	adc	r23, r23
    3ef0:	2a 95       	dec	r18
    3ef2:	e2 f7       	brpl	.-8      	; 0x3eec <_Z4loopv+0x18fc>
    3ef4:	26 2f       	mov	r18, r22
    3ef6:	20 95       	com	r18
    3ef8:	23 23       	and	r18, r19
    3efa:	25 b9       	out	0x05, r18	; 5
				enable(_ports[2], util::get_bit(data, 2));
    3efc:	d8 01       	movw	r26, r16
    3efe:	14 96       	adiw	r26, 0x04	; 4
    3f00:	2c 91       	ld	r18, X
    3f02:	28 30       	cpi	r18, 0x08	; 8
    3f04:	68 f4       	brcc	.+26     	; 0x3f20 <_Z4loopv+0x1930>
    3f06:	3b b1       	in	r19, 0x0b	; 11
    3f08:	27 70       	andi	r18, 0x07	; 7
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <_Z4loopv+0x1922>
    3f0e:	66 0f       	add	r22, r22
    3f10:	77 1f       	adc	r23, r23
    3f12:	2a 95       	dec	r18
    3f14:	e2 f7       	brpl	.-8      	; 0x3f0e <_Z4loopv+0x191e>
    3f16:	26 2f       	mov	r18, r22
    3f18:	20 95       	com	r18
    3f1a:	23 23       	and	r18, r19
    3f1c:	2b b9       	out	0x0b, r18	; 11
    3f1e:	0c c0       	rjmp	.+24     	; 0x3f38 <_Z4loopv+0x1948>
    3f20:	35 b1       	in	r19, 0x05	; 5
    3f22:	27 70       	andi	r18, 0x07	; 7
    3f24:	bc 01       	movw	r22, r24
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <_Z4loopv+0x193c>
    3f28:	66 0f       	add	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	2a 95       	dec	r18
    3f2e:	e2 f7       	brpl	.-8      	; 0x3f28 <_Z4loopv+0x1938>
    3f30:	26 2f       	mov	r18, r22
    3f32:	20 95       	com	r18
    3f34:	23 23       	and	r18, r19
    3f36:	25 b9       	out	0x05, r18	; 5
				enable(_ports[3], util::get_bit(data, 3));
    3f38:	d8 01       	movw	r26, r16
    3f3a:	15 96       	adiw	r26, 0x05	; 5
    3f3c:	2c 91       	ld	r18, X
    3f3e:	28 30       	cpi	r18, 0x08	; 8
    3f40:	68 f4       	brcc	.+26     	; 0x3f5c <_Z4loopv+0x196c>
    3f42:	3b b1       	in	r19, 0x0b	; 11
    3f44:	27 70       	andi	r18, 0x07	; 7
    3f46:	bc 01       	movw	r22, r24
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <_Z4loopv+0x195e>
    3f4a:	66 0f       	add	r22, r22
    3f4c:	77 1f       	adc	r23, r23
    3f4e:	2a 95       	dec	r18
    3f50:	e2 f7       	brpl	.-8      	; 0x3f4a <_Z4loopv+0x195a>
    3f52:	26 2f       	mov	r18, r22
    3f54:	20 95       	com	r18
    3f56:	23 23       	and	r18, r19
    3f58:	2b b9       	out	0x0b, r18	; 11
    3f5a:	0c c0       	rjmp	.+24     	; 0x3f74 <_Z4loopv+0x1984>
    3f5c:	35 b1       	in	r19, 0x05	; 5
    3f5e:	27 70       	andi	r18, 0x07	; 7
    3f60:	bc 01       	movw	r22, r24
    3f62:	02 c0       	rjmp	.+4      	; 0x3f68 <_Z4loopv+0x1978>
    3f64:	66 0f       	add	r22, r22
    3f66:	77 1f       	adc	r23, r23
    3f68:	2a 95       	dec	r18
    3f6a:	e2 f7       	brpl	.-8      	; 0x3f64 <_Z4loopv+0x1974>
    3f6c:	26 2f       	mov	r18, r22
    3f6e:	20 95       	com	r18
    3f70:	23 23       	and	r18, r19
    3f72:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    3f74:	d8 01       	movw	r26, r16
    3f76:	11 96       	adiw	r26, 0x01	; 1
    3f78:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    3f7a:	28 30       	cpi	r18, 0x08	; 8
    3f7c:	60 f4       	brcc	.+24     	; 0x3f96 <_Z4loopv+0x19a6>
    3f7e:	6b b1       	in	r22, 0x0b	; 11
    3f80:	27 70       	andi	r18, 0x07	; 7
    3f82:	dc 01       	movw	r26, r24
    3f84:	02 c0       	rjmp	.+4      	; 0x3f8a <_Z4loopv+0x199a>
    3f86:	aa 0f       	add	r26, r26
    3f88:	bb 1f       	adc	r27, r27
    3f8a:	2a 95       	dec	r18
    3f8c:	e2 f7       	brpl	.-8      	; 0x3f86 <_Z4loopv+0x1996>
    3f8e:	9d 01       	movw	r18, r26
    3f90:	26 2b       	or	r18, r22
    3f92:	2b b9       	out	0x0b, r18	; 11
    3f94:	0b c0       	rjmp	.+22     	; 0x3fac <_Z4loopv+0x19bc>
    3f96:	65 b1       	in	r22, 0x05	; 5
    3f98:	27 70       	andi	r18, 0x07	; 7
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <_Z4loopv+0x19b2>
    3f9e:	aa 0f       	add	r26, r26
    3fa0:	bb 1f       	adc	r27, r27
    3fa2:	2a 95       	dec	r18
    3fa4:	e2 f7       	brpl	.-8      	; 0x3f9e <_Z4loopv+0x19ae>
    3fa6:	9d 01       	movw	r18, r26
    3fa8:	26 2b       	or	r18, r22
    3faa:	25 b9       	out	0x05, r18	; 5
    3fac:	b5 e0       	ldi	r27, 0x05	; 5
    3fae:	ba 95       	dec	r27
    3fb0:	f1 f7       	brne	.-4      	; 0x3fae <_Z4loopv+0x19be>
    3fb2:	00 00       	nop
    3fb4:	d8 01       	movw	r26, r16
    3fb6:	11 96       	adiw	r26, 0x01	; 1
    3fb8:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    3fba:	28 30       	cpi	r18, 0x08	; 8
    3fbc:	68 f4       	brcc	.+26     	; 0x3fd8 <_Z4loopv+0x19e8>
    3fbe:	3b b1       	in	r19, 0x0b	; 11
    3fc0:	27 70       	andi	r18, 0x07	; 7
    3fc2:	bc 01       	movw	r22, r24
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <_Z4loopv+0x19da>
    3fc6:	66 0f       	add	r22, r22
    3fc8:	77 1f       	adc	r23, r23
    3fca:	2a 95       	dec	r18
    3fcc:	e2 f7       	brpl	.-8      	; 0x3fc6 <_Z4loopv+0x19d6>
    3fce:	26 2f       	mov	r18, r22
    3fd0:	20 95       	com	r18
    3fd2:	23 23       	and	r18, r19
    3fd4:	2b b9       	out	0x0b, r18	; 11
    3fd6:	0c c0       	rjmp	.+24     	; 0x3ff0 <_Z4loopv+0x1a00>
    3fd8:	35 b1       	in	r19, 0x05	; 5
    3fda:	27 70       	andi	r18, 0x07	; 7
    3fdc:	bc 01       	movw	r22, r24
    3fde:	02 c0       	rjmp	.+4      	; 0x3fe4 <_Z4loopv+0x19f4>
    3fe0:	66 0f       	add	r22, r22
    3fe2:	77 1f       	adc	r23, r23
    3fe4:	2a 95       	dec	r18
    3fe6:	e2 f7       	brpl	.-8      	; 0x3fe0 <_Z4loopv+0x19f0>
    3fe8:	26 2f       	mov	r18, r22
    3fea:	20 95       	com	r18
    3fec:	23 23       	and	r18, r19
    3fee:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ff0:	af e3       	ldi	r26, 0x3F	; 63
    3ff2:	bf e1       	ldi	r27, 0x1F	; 31
    3ff4:	11 97       	sbiw	r26, 0x01	; 1
    3ff6:	f1 f7       	brne	.-4      	; 0x3ff4 <_Z4loopv+0x1a04>
    3ff8:	00 c0       	rjmp	.+0      	; 0x3ffa <_Z4loopv+0x1a0a>
    3ffa:	00 00       	nop
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
					if (i == 16 || str[i] == '\n') SendCommand(0xC0);
					Write(str[i]);
    3ffc:	21 91       	ld	r18, Z+
    3ffe:	62 2f       	mov	r22, r18
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
			}
			
			private: inline void SetUpperNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 4));
    4000:	d8 01       	movw	r26, r16
    4002:	12 96       	adiw	r26, 0x02	; 2
    4004:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    4006:	24 ff       	sbrs	r18, 4
    4008:	18 c0       	rjmp	.+48     	; 0x403a <_Z4loopv+0x1a4a>
    400a:	38 30       	cpi	r19, 0x08	; 8
    400c:	58 f4       	brcc	.+22     	; 0x4024 <_Z4loopv+0x1a34>
    400e:	7b b1       	in	r23, 0x0b	; 11
    4010:	37 70       	andi	r19, 0x07	; 7
    4012:	dc 01       	movw	r26, r24
    4014:	02 c0       	rjmp	.+4      	; 0x401a <_Z4loopv+0x1a2a>
    4016:	aa 0f       	add	r26, r26
    4018:	bb 1f       	adc	r27, r27
    401a:	3a 95       	dec	r19
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <_Z4loopv+0x1a26>
    401e:	a7 2b       	or	r26, r23
    4020:	ab b9       	out	0x0b, r26	; 11
    4022:	26 c0       	rjmp	.+76     	; 0x4070 <_Z4loopv+0x1a80>
    4024:	75 b1       	in	r23, 0x05	; 5
    4026:	37 70       	andi	r19, 0x07	; 7
    4028:	dc 01       	movw	r26, r24
    402a:	02 c0       	rjmp	.+4      	; 0x4030 <_Z4loopv+0x1a40>
    402c:	aa 0f       	add	r26, r26
    402e:	bb 1f       	adc	r27, r27
    4030:	3a 95       	dec	r19
    4032:	e2 f7       	brpl	.-8      	; 0x402c <_Z4loopv+0x1a3c>
    4034:	a7 2b       	or	r26, r23
    4036:	a5 b9       	out	0x05, r26	; 5
    4038:	1b c0       	rjmp	.+54     	; 0x4070 <_Z4loopv+0x1a80>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    403a:	38 30       	cpi	r19, 0x08	; 8
    403c:	68 f4       	brcc	.+26     	; 0x4058 <_Z4loopv+0x1a68>
    403e:	7b b1       	in	r23, 0x0b	; 11
    4040:	37 70       	andi	r19, 0x07	; 7
    4042:	dc 01       	movw	r26, r24
    4044:	02 c0       	rjmp	.+4      	; 0x404a <_Z4loopv+0x1a5a>
    4046:	aa 0f       	add	r26, r26
    4048:	bb 1f       	adc	r27, r27
    404a:	3a 95       	dec	r19
    404c:	e2 f7       	brpl	.-8      	; 0x4046 <_Z4loopv+0x1a56>
    404e:	3a 2f       	mov	r19, r26
    4050:	30 95       	com	r19
    4052:	37 23       	and	r19, r23
    4054:	3b b9       	out	0x0b, r19	; 11
    4056:	0c c0       	rjmp	.+24     	; 0x4070 <_Z4loopv+0x1a80>
    4058:	75 b1       	in	r23, 0x05	; 5
    405a:	37 70       	andi	r19, 0x07	; 7
    405c:	dc 01       	movw	r26, r24
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <_Z4loopv+0x1a74>
    4060:	aa 0f       	add	r26, r26
    4062:	bb 1f       	adc	r27, r27
    4064:	3a 95       	dec	r19
    4066:	e2 f7       	brpl	.-8      	; 0x4060 <_Z4loopv+0x1a70>
    4068:	3a 2f       	mov	r19, r26
    406a:	30 95       	com	r19
    406c:	37 23       	and	r19, r23
    406e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 5));
    4070:	d8 01       	movw	r26, r16
    4072:	13 96       	adiw	r26, 0x03	; 3
    4074:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    4076:	25 ff       	sbrs	r18, 5
    4078:	18 c0       	rjmp	.+48     	; 0x40aa <_Z4loopv+0x1aba>
    407a:	38 30       	cpi	r19, 0x08	; 8
    407c:	58 f4       	brcc	.+22     	; 0x4094 <_Z4loopv+0x1aa4>
    407e:	7b b1       	in	r23, 0x0b	; 11
    4080:	37 70       	andi	r19, 0x07	; 7
    4082:	dc 01       	movw	r26, r24
    4084:	02 c0       	rjmp	.+4      	; 0x408a <_Z4loopv+0x1a9a>
    4086:	aa 0f       	add	r26, r26
    4088:	bb 1f       	adc	r27, r27
    408a:	3a 95       	dec	r19
    408c:	e2 f7       	brpl	.-8      	; 0x4086 <_Z4loopv+0x1a96>
    408e:	a7 2b       	or	r26, r23
    4090:	ab b9       	out	0x0b, r26	; 11
    4092:	26 c0       	rjmp	.+76     	; 0x40e0 <_Z4loopv+0x1af0>
    4094:	75 b1       	in	r23, 0x05	; 5
    4096:	37 70       	andi	r19, 0x07	; 7
    4098:	dc 01       	movw	r26, r24
    409a:	02 c0       	rjmp	.+4      	; 0x40a0 <_Z4loopv+0x1ab0>
    409c:	aa 0f       	add	r26, r26
    409e:	bb 1f       	adc	r27, r27
    40a0:	3a 95       	dec	r19
    40a2:	e2 f7       	brpl	.-8      	; 0x409c <_Z4loopv+0x1aac>
    40a4:	a7 2b       	or	r26, r23
    40a6:	a5 b9       	out	0x05, r26	; 5
    40a8:	1b c0       	rjmp	.+54     	; 0x40e0 <_Z4loopv+0x1af0>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    40aa:	38 30       	cpi	r19, 0x08	; 8
    40ac:	68 f4       	brcc	.+26     	; 0x40c8 <_Z4loopv+0x1ad8>
    40ae:	7b b1       	in	r23, 0x0b	; 11
    40b0:	37 70       	andi	r19, 0x07	; 7
    40b2:	dc 01       	movw	r26, r24
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <_Z4loopv+0x1aca>
    40b6:	aa 0f       	add	r26, r26
    40b8:	bb 1f       	adc	r27, r27
    40ba:	3a 95       	dec	r19
    40bc:	e2 f7       	brpl	.-8      	; 0x40b6 <_Z4loopv+0x1ac6>
    40be:	3a 2f       	mov	r19, r26
    40c0:	30 95       	com	r19
    40c2:	37 23       	and	r19, r23
    40c4:	3b b9       	out	0x0b, r19	; 11
    40c6:	0c c0       	rjmp	.+24     	; 0x40e0 <_Z4loopv+0x1af0>
    40c8:	75 b1       	in	r23, 0x05	; 5
    40ca:	37 70       	andi	r19, 0x07	; 7
    40cc:	dc 01       	movw	r26, r24
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <_Z4loopv+0x1ae4>
    40d0:	aa 0f       	add	r26, r26
    40d2:	bb 1f       	adc	r27, r27
    40d4:	3a 95       	dec	r19
    40d6:	e2 f7       	brpl	.-8      	; 0x40d0 <_Z4loopv+0x1ae0>
    40d8:	3a 2f       	mov	r19, r26
    40da:	30 95       	com	r19
    40dc:	37 23       	and	r19, r23
    40de:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 6));
    40e0:	d8 01       	movw	r26, r16
    40e2:	14 96       	adiw	r26, 0x04	; 4
    40e4:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    40e6:	26 ff       	sbrs	r18, 6
    40e8:	18 c0       	rjmp	.+48     	; 0x411a <_Z4loopv+0x1b2a>
    40ea:	38 30       	cpi	r19, 0x08	; 8
    40ec:	58 f4       	brcc	.+22     	; 0x4104 <_Z4loopv+0x1b14>
    40ee:	7b b1       	in	r23, 0x0b	; 11
    40f0:	37 70       	andi	r19, 0x07	; 7
    40f2:	dc 01       	movw	r26, r24
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <_Z4loopv+0x1b0a>
    40f6:	aa 0f       	add	r26, r26
    40f8:	bb 1f       	adc	r27, r27
    40fa:	3a 95       	dec	r19
    40fc:	e2 f7       	brpl	.-8      	; 0x40f6 <_Z4loopv+0x1b06>
    40fe:	a7 2b       	or	r26, r23
    4100:	ab b9       	out	0x0b, r26	; 11
    4102:	26 c0       	rjmp	.+76     	; 0x4150 <_Z4loopv+0x1b60>
    4104:	75 b1       	in	r23, 0x05	; 5
    4106:	37 70       	andi	r19, 0x07	; 7
    4108:	dc 01       	movw	r26, r24
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <_Z4loopv+0x1b20>
    410c:	aa 0f       	add	r26, r26
    410e:	bb 1f       	adc	r27, r27
    4110:	3a 95       	dec	r19
    4112:	e2 f7       	brpl	.-8      	; 0x410c <_Z4loopv+0x1b1c>
    4114:	a7 2b       	or	r26, r23
    4116:	a5 b9       	out	0x05, r26	; 5
    4118:	1b c0       	rjmp	.+54     	; 0x4150 <_Z4loopv+0x1b60>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    411a:	38 30       	cpi	r19, 0x08	; 8
    411c:	68 f4       	brcc	.+26     	; 0x4138 <_Z4loopv+0x1b48>
    411e:	7b b1       	in	r23, 0x0b	; 11
    4120:	37 70       	andi	r19, 0x07	; 7
    4122:	dc 01       	movw	r26, r24
    4124:	02 c0       	rjmp	.+4      	; 0x412a <_Z4loopv+0x1b3a>
    4126:	aa 0f       	add	r26, r26
    4128:	bb 1f       	adc	r27, r27
    412a:	3a 95       	dec	r19
    412c:	e2 f7       	brpl	.-8      	; 0x4126 <_Z4loopv+0x1b36>
    412e:	3a 2f       	mov	r19, r26
    4130:	30 95       	com	r19
    4132:	37 23       	and	r19, r23
    4134:	3b b9       	out	0x0b, r19	; 11
    4136:	0c c0       	rjmp	.+24     	; 0x4150 <_Z4loopv+0x1b60>
    4138:	75 b1       	in	r23, 0x05	; 5
    413a:	37 70       	andi	r19, 0x07	; 7
    413c:	dc 01       	movw	r26, r24
    413e:	02 c0       	rjmp	.+4      	; 0x4144 <_Z4loopv+0x1b54>
    4140:	aa 0f       	add	r26, r26
    4142:	bb 1f       	adc	r27, r27
    4144:	3a 95       	dec	r19
    4146:	e2 f7       	brpl	.-8      	; 0x4140 <_Z4loopv+0x1b50>
    4148:	3a 2f       	mov	r19, r26
    414a:	30 95       	com	r19
    414c:	37 23       	and	r19, r23
    414e:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 7));
    4150:	d8 01       	movw	r26, r16
    4152:	15 96       	adiw	r26, 0x05	; 5
    4154:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    4156:	66 23       	and	r22, r22
    4158:	c4 f4       	brge	.+48     	; 0x418a <_Z4loopv+0x1b9a>
    415a:	38 30       	cpi	r19, 0x08	; 8
    415c:	58 f4       	brcc	.+22     	; 0x4174 <_Z4loopv+0x1b84>
    415e:	ab b1       	in	r26, 0x0b	; 11
    4160:	37 70       	andi	r19, 0x07	; 7
    4162:	bc 01       	movw	r22, r24
    4164:	02 c0       	rjmp	.+4      	; 0x416a <_Z4loopv+0x1b7a>
    4166:	66 0f       	add	r22, r22
    4168:	77 1f       	adc	r23, r23
    416a:	3a 95       	dec	r19
    416c:	e2 f7       	brpl	.-8      	; 0x4166 <_Z4loopv+0x1b76>
    416e:	6a 2b       	or	r22, r26
    4170:	6b b9       	out	0x0b, r22	; 11
    4172:	26 c0       	rjmp	.+76     	; 0x41c0 <_Z4loopv+0x1bd0>
    4174:	a5 b1       	in	r26, 0x05	; 5
    4176:	37 70       	andi	r19, 0x07	; 7
    4178:	bc 01       	movw	r22, r24
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <_Z4loopv+0x1b90>
    417c:	66 0f       	add	r22, r22
    417e:	77 1f       	adc	r23, r23
    4180:	3a 95       	dec	r19
    4182:	e2 f7       	brpl	.-8      	; 0x417c <_Z4loopv+0x1b8c>
    4184:	6a 2b       	or	r22, r26
    4186:	65 b9       	out	0x05, r22	; 5
    4188:	1b c0       	rjmp	.+54     	; 0x41c0 <_Z4loopv+0x1bd0>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    418a:	38 30       	cpi	r19, 0x08	; 8
    418c:	68 f4       	brcc	.+26     	; 0x41a8 <_Z4loopv+0x1bb8>
    418e:	6b b1       	in	r22, 0x0b	; 11
    4190:	37 70       	andi	r19, 0x07	; 7
    4192:	dc 01       	movw	r26, r24
    4194:	02 c0       	rjmp	.+4      	; 0x419a <_Z4loopv+0x1baa>
    4196:	aa 0f       	add	r26, r26
    4198:	bb 1f       	adc	r27, r27
    419a:	3a 95       	dec	r19
    419c:	e2 f7       	brpl	.-8      	; 0x4196 <_Z4loopv+0x1ba6>
    419e:	3a 2f       	mov	r19, r26
    41a0:	30 95       	com	r19
    41a2:	36 23       	and	r19, r22
    41a4:	3b b9       	out	0x0b, r19	; 11
    41a6:	0c c0       	rjmp	.+24     	; 0x41c0 <_Z4loopv+0x1bd0>
    41a8:	65 b1       	in	r22, 0x05	; 5
    41aa:	37 70       	andi	r19, 0x07	; 7
    41ac:	dc 01       	movw	r26, r24
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <_Z4loopv+0x1bc4>
    41b0:	aa 0f       	add	r26, r26
    41b2:	bb 1f       	adc	r27, r27
    41b4:	3a 95       	dec	r19
    41b6:	e2 f7       	brpl	.-8      	; 0x41b0 <_Z4loopv+0x1bc0>
    41b8:	3a 2f       	mov	r19, r26
    41ba:	30 95       	com	r19
    41bc:	36 23       	and	r19, r22
    41be:	35 b9       	out	0x05, r19	; 5
				SetEnabled(false);
				util::delay_ms_static(2);
			}
			
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
    41c0:	d8 01       	movw	r26, r16
    41c2:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    41c4:	38 30       	cpi	r19, 0x08	; 8
    41c6:	58 f4       	brcc	.+22     	; 0x41de <_Z4loopv+0x1bee>
    41c8:	ab b1       	in	r26, 0x0b	; 11
    41ca:	37 70       	andi	r19, 0x07	; 7
    41cc:	bc 01       	movw	r22, r24
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <_Z4loopv+0x1be4>
    41d0:	66 0f       	add	r22, r22
    41d2:	77 1f       	adc	r23, r23
    41d4:	3a 95       	dec	r19
    41d6:	e2 f7       	brpl	.-8      	; 0x41d0 <_Z4loopv+0x1be0>
    41d8:	6a 2b       	or	r22, r26
    41da:	6b b9       	out	0x0b, r22	; 11
    41dc:	0a c0       	rjmp	.+20     	; 0x41f2 <_Z4loopv+0x1c02>
    41de:	a5 b1       	in	r26, 0x05	; 5
    41e0:	37 70       	andi	r19, 0x07	; 7
    41e2:	bc 01       	movw	r22, r24
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <_Z4loopv+0x1bfa>
    41e6:	66 0f       	add	r22, r22
    41e8:	77 1f       	adc	r23, r23
    41ea:	3a 95       	dec	r19
    41ec:	e2 f7       	brpl	.-8      	; 0x41e6 <_Z4loopv+0x1bf6>
    41ee:	6a 2b       	or	r22, r26
    41f0:	65 b9       	out	0x05, r22	; 5
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    41f2:	d8 01       	movw	r26, r16
    41f4:	11 96       	adiw	r26, 0x01	; 1
    41f6:	3c 91       	ld	r19, X
    41f8:	38 30       	cpi	r19, 0x08	; 8
    41fa:	58 f4       	brcc	.+22     	; 0x4212 <_Z4loopv+0x1c22>
    41fc:	ab b1       	in	r26, 0x0b	; 11
    41fe:	37 70       	andi	r19, 0x07	; 7
    4200:	bc 01       	movw	r22, r24
    4202:	02 c0       	rjmp	.+4      	; 0x4208 <_Z4loopv+0x1c18>
    4204:	66 0f       	add	r22, r22
    4206:	77 1f       	adc	r23, r23
    4208:	3a 95       	dec	r19
    420a:	e2 f7       	brpl	.-8      	; 0x4204 <_Z4loopv+0x1c14>
    420c:	6a 2b       	or	r22, r26
    420e:	6b b9       	out	0x0b, r22	; 11
    4210:	0a c0       	rjmp	.+20     	; 0x4226 <_Z4loopv+0x1c36>
    4212:	a5 b1       	in	r26, 0x05	; 5
    4214:	37 70       	andi	r19, 0x07	; 7
    4216:	bc 01       	movw	r22, r24
    4218:	02 c0       	rjmp	.+4      	; 0x421e <_Z4loopv+0x1c2e>
    421a:	66 0f       	add	r22, r22
    421c:	77 1f       	adc	r23, r23
    421e:	3a 95       	dec	r19
    4220:	e2 f7       	brpl	.-8      	; 0x421a <_Z4loopv+0x1c2a>
    4222:	6a 2b       	or	r22, r26
    4224:	65 b9       	out	0x05, r22	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4226:	b5 e0       	ldi	r27, 0x05	; 5
    4228:	ba 95       	dec	r27
    422a:	f1 f7       	brne	.-4      	; 0x4228 <_Z4loopv+0x1c38>
    422c:	00 00       	nop
    422e:	d8 01       	movw	r26, r16
    4230:	11 96       	adiw	r26, 0x01	; 1
    4232:	3c 91       	ld	r19, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    4234:	38 30       	cpi	r19, 0x08	; 8
    4236:	68 f4       	brcc	.+26     	; 0x4252 <_Z4loopv+0x1c62>
    4238:	6b b1       	in	r22, 0x0b	; 11
    423a:	37 70       	andi	r19, 0x07	; 7
    423c:	dc 01       	movw	r26, r24
    423e:	02 c0       	rjmp	.+4      	; 0x4244 <_Z4loopv+0x1c54>
    4240:	aa 0f       	add	r26, r26
    4242:	bb 1f       	adc	r27, r27
    4244:	3a 95       	dec	r19
    4246:	e2 f7       	brpl	.-8      	; 0x4240 <_Z4loopv+0x1c50>
    4248:	3a 2f       	mov	r19, r26
    424a:	30 95       	com	r19
    424c:	36 23       	and	r19, r22
    424e:	3b b9       	out	0x0b, r19	; 11
    4250:	0c c0       	rjmp	.+24     	; 0x426a <_Z4loopv+0x1c7a>
    4252:	65 b1       	in	r22, 0x05	; 5
    4254:	37 70       	andi	r19, 0x07	; 7
    4256:	dc 01       	movw	r26, r24
    4258:	02 c0       	rjmp	.+4      	; 0x425e <_Z4loopv+0x1c6e>
    425a:	aa 0f       	add	r26, r26
    425c:	bb 1f       	adc	r27, r27
    425e:	3a 95       	dec	r19
    4260:	e2 f7       	brpl	.-8      	; 0x425a <_Z4loopv+0x1c6a>
    4262:	3a 2f       	mov	r19, r26
    4264:	30 95       	com	r19
    4266:	36 23       	and	r19, r22
    4268:	35 b9       	out	0x05, r19	; 5
    426a:	af e1       	ldi	r26, 0x1F	; 31
    426c:	b3 e0       	ldi	r27, 0x03	; 3
    426e:	11 97       	sbiw	r26, 0x01	; 1
    4270:	f1 f7       	brne	.-4      	; 0x426e <_Z4loopv+0x1c7e>
    4272:	00 c0       	rjmp	.+0      	; 0x4274 <_Z4loopv+0x1c84>
    4274:	00 00       	nop
				enable(_ports[2], util::get_bit(data, 6));
				enable(_ports[3], util::get_bit(data, 7));
			}
			
			private: inline void SetLowerNibble(uint8 data) {
				enable(_ports[0], util::get_bit(data, 0));
    4276:	d8 01       	movw	r26, r16
    4278:	12 96       	adiw	r26, 0x02	; 2
    427a:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    427c:	20 ff       	sbrs	r18, 0
    427e:	18 c0       	rjmp	.+48     	; 0x42b0 <_Z4loopv+0x1cc0>
    4280:	38 30       	cpi	r19, 0x08	; 8
    4282:	58 f4       	brcc	.+22     	; 0x429a <_Z4loopv+0x1caa>
    4284:	ab b1       	in	r26, 0x0b	; 11
    4286:	37 70       	andi	r19, 0x07	; 7
    4288:	bc 01       	movw	r22, r24
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <_Z4loopv+0x1ca0>
    428c:	66 0f       	add	r22, r22
    428e:	77 1f       	adc	r23, r23
    4290:	3a 95       	dec	r19
    4292:	e2 f7       	brpl	.-8      	; 0x428c <_Z4loopv+0x1c9c>
    4294:	6a 2b       	or	r22, r26
    4296:	6b b9       	out	0x0b, r22	; 11
    4298:	26 c0       	rjmp	.+76     	; 0x42e6 <_Z4loopv+0x1cf6>
    429a:	a5 b1       	in	r26, 0x05	; 5
    429c:	37 70       	andi	r19, 0x07	; 7
    429e:	bc 01       	movw	r22, r24
    42a0:	02 c0       	rjmp	.+4      	; 0x42a6 <_Z4loopv+0x1cb6>
    42a2:	66 0f       	add	r22, r22
    42a4:	77 1f       	adc	r23, r23
    42a6:	3a 95       	dec	r19
    42a8:	e2 f7       	brpl	.-8      	; 0x42a2 <_Z4loopv+0x1cb2>
    42aa:	6a 2b       	or	r22, r26
    42ac:	65 b9       	out	0x05, r22	; 5
    42ae:	1b c0       	rjmp	.+54     	; 0x42e6 <_Z4loopv+0x1cf6>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    42b0:	38 30       	cpi	r19, 0x08	; 8
    42b2:	68 f4       	brcc	.+26     	; 0x42ce <_Z4loopv+0x1cde>
    42b4:	6b b1       	in	r22, 0x0b	; 11
    42b6:	37 70       	andi	r19, 0x07	; 7
    42b8:	dc 01       	movw	r26, r24
    42ba:	02 c0       	rjmp	.+4      	; 0x42c0 <_Z4loopv+0x1cd0>
    42bc:	aa 0f       	add	r26, r26
    42be:	bb 1f       	adc	r27, r27
    42c0:	3a 95       	dec	r19
    42c2:	e2 f7       	brpl	.-8      	; 0x42bc <_Z4loopv+0x1ccc>
    42c4:	3a 2f       	mov	r19, r26
    42c6:	30 95       	com	r19
    42c8:	36 23       	and	r19, r22
    42ca:	3b b9       	out	0x0b, r19	; 11
    42cc:	0c c0       	rjmp	.+24     	; 0x42e6 <_Z4loopv+0x1cf6>
    42ce:	65 b1       	in	r22, 0x05	; 5
    42d0:	37 70       	andi	r19, 0x07	; 7
    42d2:	dc 01       	movw	r26, r24
    42d4:	02 c0       	rjmp	.+4      	; 0x42da <_Z4loopv+0x1cea>
    42d6:	aa 0f       	add	r26, r26
    42d8:	bb 1f       	adc	r27, r27
    42da:	3a 95       	dec	r19
    42dc:	e2 f7       	brpl	.-8      	; 0x42d6 <_Z4loopv+0x1ce6>
    42de:	3a 2f       	mov	r19, r26
    42e0:	30 95       	com	r19
    42e2:	36 23       	and	r19, r22
    42e4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[1], util::get_bit(data, 1));
    42e6:	d8 01       	movw	r26, r16
    42e8:	13 96       	adiw	r26, 0x03	; 3
    42ea:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    42ec:	21 ff       	sbrs	r18, 1
    42ee:	18 c0       	rjmp	.+48     	; 0x4320 <_Z4loopv+0x1d30>
    42f0:	38 30       	cpi	r19, 0x08	; 8
    42f2:	58 f4       	brcc	.+22     	; 0x430a <_Z4loopv+0x1d1a>
    42f4:	ab b1       	in	r26, 0x0b	; 11
    42f6:	37 70       	andi	r19, 0x07	; 7
    42f8:	bc 01       	movw	r22, r24
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <_Z4loopv+0x1d10>
    42fc:	66 0f       	add	r22, r22
    42fe:	77 1f       	adc	r23, r23
    4300:	3a 95       	dec	r19
    4302:	e2 f7       	brpl	.-8      	; 0x42fc <_Z4loopv+0x1d0c>
    4304:	6a 2b       	or	r22, r26
    4306:	6b b9       	out	0x0b, r22	; 11
    4308:	26 c0       	rjmp	.+76     	; 0x4356 <_Z4loopv+0x1d66>
    430a:	a5 b1       	in	r26, 0x05	; 5
    430c:	37 70       	andi	r19, 0x07	; 7
    430e:	bc 01       	movw	r22, r24
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <_Z4loopv+0x1d26>
    4312:	66 0f       	add	r22, r22
    4314:	77 1f       	adc	r23, r23
    4316:	3a 95       	dec	r19
    4318:	e2 f7       	brpl	.-8      	; 0x4312 <_Z4loopv+0x1d22>
    431a:	6a 2b       	or	r22, r26
    431c:	65 b9       	out	0x05, r22	; 5
    431e:	1b c0       	rjmp	.+54     	; 0x4356 <_Z4loopv+0x1d66>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    4320:	38 30       	cpi	r19, 0x08	; 8
    4322:	68 f4       	brcc	.+26     	; 0x433e <_Z4loopv+0x1d4e>
    4324:	6b b1       	in	r22, 0x0b	; 11
    4326:	37 70       	andi	r19, 0x07	; 7
    4328:	dc 01       	movw	r26, r24
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <_Z4loopv+0x1d40>
    432c:	aa 0f       	add	r26, r26
    432e:	bb 1f       	adc	r27, r27
    4330:	3a 95       	dec	r19
    4332:	e2 f7       	brpl	.-8      	; 0x432c <_Z4loopv+0x1d3c>
    4334:	3a 2f       	mov	r19, r26
    4336:	30 95       	com	r19
    4338:	36 23       	and	r19, r22
    433a:	3b b9       	out	0x0b, r19	; 11
    433c:	0c c0       	rjmp	.+24     	; 0x4356 <_Z4loopv+0x1d66>
    433e:	65 b1       	in	r22, 0x05	; 5
    4340:	37 70       	andi	r19, 0x07	; 7
    4342:	dc 01       	movw	r26, r24
    4344:	02 c0       	rjmp	.+4      	; 0x434a <_Z4loopv+0x1d5a>
    4346:	aa 0f       	add	r26, r26
    4348:	bb 1f       	adc	r27, r27
    434a:	3a 95       	dec	r19
    434c:	e2 f7       	brpl	.-8      	; 0x4346 <_Z4loopv+0x1d56>
    434e:	3a 2f       	mov	r19, r26
    4350:	30 95       	com	r19
    4352:	36 23       	and	r19, r22
    4354:	35 b9       	out	0x05, r19	; 5
				enable(_ports[2], util::get_bit(data, 2));
    4356:	d8 01       	movw	r26, r16
    4358:	14 96       	adiw	r26, 0x04	; 4
    435a:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    435c:	22 ff       	sbrs	r18, 2
    435e:	18 c0       	rjmp	.+48     	; 0x4390 <_Z4loopv+0x1da0>
    4360:	38 30       	cpi	r19, 0x08	; 8
    4362:	58 f4       	brcc	.+22     	; 0x437a <_Z4loopv+0x1d8a>
    4364:	ab b1       	in	r26, 0x0b	; 11
    4366:	37 70       	andi	r19, 0x07	; 7
    4368:	bc 01       	movw	r22, r24
    436a:	02 c0       	rjmp	.+4      	; 0x4370 <_Z4loopv+0x1d80>
    436c:	66 0f       	add	r22, r22
    436e:	77 1f       	adc	r23, r23
    4370:	3a 95       	dec	r19
    4372:	e2 f7       	brpl	.-8      	; 0x436c <_Z4loopv+0x1d7c>
    4374:	6a 2b       	or	r22, r26
    4376:	6b b9       	out	0x0b, r22	; 11
    4378:	26 c0       	rjmp	.+76     	; 0x43c6 <_Z4loopv+0x1dd6>
    437a:	a5 b1       	in	r26, 0x05	; 5
    437c:	37 70       	andi	r19, 0x07	; 7
    437e:	bc 01       	movw	r22, r24
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <_Z4loopv+0x1d96>
    4382:	66 0f       	add	r22, r22
    4384:	77 1f       	adc	r23, r23
    4386:	3a 95       	dec	r19
    4388:	e2 f7       	brpl	.-8      	; 0x4382 <_Z4loopv+0x1d92>
    438a:	6a 2b       	or	r22, r26
    438c:	65 b9       	out	0x05, r22	; 5
    438e:	1b c0       	rjmp	.+54     	; 0x43c6 <_Z4loopv+0x1dd6>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    4390:	38 30       	cpi	r19, 0x08	; 8
    4392:	68 f4       	brcc	.+26     	; 0x43ae <_Z4loopv+0x1dbe>
    4394:	6b b1       	in	r22, 0x0b	; 11
    4396:	37 70       	andi	r19, 0x07	; 7
    4398:	dc 01       	movw	r26, r24
    439a:	02 c0       	rjmp	.+4      	; 0x43a0 <_Z4loopv+0x1db0>
    439c:	aa 0f       	add	r26, r26
    439e:	bb 1f       	adc	r27, r27
    43a0:	3a 95       	dec	r19
    43a2:	e2 f7       	brpl	.-8      	; 0x439c <_Z4loopv+0x1dac>
    43a4:	3a 2f       	mov	r19, r26
    43a6:	30 95       	com	r19
    43a8:	36 23       	and	r19, r22
    43aa:	3b b9       	out	0x0b, r19	; 11
    43ac:	0c c0       	rjmp	.+24     	; 0x43c6 <_Z4loopv+0x1dd6>
    43ae:	65 b1       	in	r22, 0x05	; 5
    43b0:	37 70       	andi	r19, 0x07	; 7
    43b2:	dc 01       	movw	r26, r24
    43b4:	02 c0       	rjmp	.+4      	; 0x43ba <_Z4loopv+0x1dca>
    43b6:	aa 0f       	add	r26, r26
    43b8:	bb 1f       	adc	r27, r27
    43ba:	3a 95       	dec	r19
    43bc:	e2 f7       	brpl	.-8      	; 0x43b6 <_Z4loopv+0x1dc6>
    43be:	3a 2f       	mov	r19, r26
    43c0:	30 95       	com	r19
    43c2:	36 23       	and	r19, r22
    43c4:	35 b9       	out	0x05, r19	; 5
				enable(_ports[3], util::get_bit(data, 3));
    43c6:	d8 01       	movw	r26, r16
    43c8:	15 96       	adiw	r26, 0x05	; 5
    43ca:	3c 91       	ld	r19, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    43cc:	23 ff       	sbrs	r18, 3
    43ce:	1a c0       	rjmp	.+52     	; 0x4404 <_Z4loopv+0x1e14>
    43d0:	38 30       	cpi	r19, 0x08	; 8
    43d2:	60 f4       	brcc	.+24     	; 0x43ec <_Z4loopv+0x1dfc>
    43d4:	6b b1       	in	r22, 0x0b	; 11
    43d6:	37 70       	andi	r19, 0x07	; 7
    43d8:	dc 01       	movw	r26, r24
    43da:	02 c0       	rjmp	.+4      	; 0x43e0 <_Z4loopv+0x1df0>
    43dc:	aa 0f       	add	r26, r26
    43de:	bb 1f       	adc	r27, r27
    43e0:	3a 95       	dec	r19
    43e2:	e2 f7       	brpl	.-8      	; 0x43dc <_Z4loopv+0x1dec>
    43e4:	9d 01       	movw	r18, r26
    43e6:	26 2b       	or	r18, r22
    43e8:	2b b9       	out	0x0b, r18	; 11
    43ea:	27 c0       	rjmp	.+78     	; 0x443a <_Z4loopv+0x1e4a>
    43ec:	65 b1       	in	r22, 0x05	; 5
    43ee:	37 70       	andi	r19, 0x07	; 7
    43f0:	dc 01       	movw	r26, r24
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <_Z4loopv+0x1e08>
    43f4:	aa 0f       	add	r26, r26
    43f6:	bb 1f       	adc	r27, r27
    43f8:	3a 95       	dec	r19
    43fa:	e2 f7       	brpl	.-8      	; 0x43f4 <_Z4loopv+0x1e04>
    43fc:	9d 01       	movw	r18, r26
    43fe:	26 2b       	or	r18, r22
    4400:	25 b9       	out	0x05, r18	; 5
    4402:	1b c0       	rjmp	.+54     	; 0x443a <_Z4loopv+0x1e4a>
			else _CLEAR_BIT(fcrof(port), nmr(port));
    4404:	38 30       	cpi	r19, 0x08	; 8
    4406:	68 f4       	brcc	.+26     	; 0x4422 <_Z4loopv+0x1e32>
    4408:	6b b1       	in	r22, 0x0b	; 11
    440a:	37 70       	andi	r19, 0x07	; 7
    440c:	dc 01       	movw	r26, r24
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <_Z4loopv+0x1e24>
    4410:	aa 0f       	add	r26, r26
    4412:	bb 1f       	adc	r27, r27
    4414:	3a 95       	dec	r19
    4416:	e2 f7       	brpl	.-8      	; 0x4410 <_Z4loopv+0x1e20>
    4418:	9d 01       	movw	r18, r26
    441a:	20 95       	com	r18
    441c:	26 23       	and	r18, r22
    441e:	2b b9       	out	0x0b, r18	; 11
    4420:	0c c0       	rjmp	.+24     	; 0x443a <_Z4loopv+0x1e4a>
    4422:	65 b1       	in	r22, 0x05	; 5
    4424:	37 70       	andi	r19, 0x07	; 7
    4426:	dc 01       	movw	r26, r24
    4428:	02 c0       	rjmp	.+4      	; 0x442e <_Z4loopv+0x1e3e>
    442a:	aa 0f       	add	r26, r26
    442c:	bb 1f       	adc	r27, r27
    442e:	3a 95       	dec	r19
    4430:	e2 f7       	brpl	.-8      	; 0x442a <_Z4loopv+0x1e3a>
    4432:	9d 01       	movw	r18, r26
    4434:	20 95       	com	r18
    4436:	26 23       	and	r18, r22
    4438:	25 b9       	out	0x05, r18	; 5
			private: inline void SetOperationMode(EOperationMode m) {
				port::enable(_pMode, m);
			}
			
			private: inline void SetEnabled(bool b) {
				enable(_pPulse, b);
    443a:	d8 01       	movw	r26, r16
    443c:	11 96       	adiw	r26, 0x01	; 1
    443e:	2c 91       	ld	r18, X
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
    4440:	28 30       	cpi	r18, 0x08	; 8
    4442:	60 f4       	brcc	.+24     	; 0x445c <_Z4loopv+0x1e6c>
    4444:	6b b1       	in	r22, 0x0b	; 11
    4446:	27 70       	andi	r18, 0x07	; 7
    4448:	dc 01       	movw	r26, r24
    444a:	02 c0       	rjmp	.+4      	; 0x4450 <_Z4loopv+0x1e60>
    444c:	aa 0f       	add	r26, r26
    444e:	bb 1f       	adc	r27, r27
    4450:	2a 95       	dec	r18
    4452:	e2 f7       	brpl	.-8      	; 0x444c <_Z4loopv+0x1e5c>
    4454:	9d 01       	movw	r18, r26
    4456:	26 2b       	or	r18, r22
    4458:	2b b9       	out	0x0b, r18	; 11
    445a:	0b c0       	rjmp	.+22     	; 0x4472 <_Z4loopv+0x1e82>
    445c:	65 b1       	in	r22, 0x05	; 5
    445e:	27 70       	andi	r18, 0x07	; 7
    4460:	dc 01       	movw	r26, r24
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <_Z4loopv+0x1e78>
    4464:	aa 0f       	add	r26, r26
    4466:	bb 1f       	adc	r27, r27
    4468:	2a 95       	dec	r18
    446a:	e2 f7       	brpl	.-8      	; 0x4464 <_Z4loopv+0x1e74>
    446c:	9d 01       	movw	r18, r26
    446e:	26 2b       	or	r18, r22
    4470:	25 b9       	out	0x05, r18	; 5
    4472:	b5 e0       	ldi	r27, 0x05	; 5
    4474:	ba 95       	dec	r27
    4476:	f1 f7       	brne	.-4      	; 0x4474 <_Z4loopv+0x1e84>
    4478:	00 00       	nop
    447a:	d8 01       	movw	r26, r16
    447c:	11 96       	adiw	r26, 0x01	; 1
    447e:	2c 91       	ld	r18, X
			else _CLEAR_BIT(fcrof(port), nmr(port));
    4480:	28 30       	cpi	r18, 0x08	; 8
    4482:	68 f4       	brcc	.+26     	; 0x449e <_Z4loopv+0x1eae>
    4484:	3b b1       	in	r19, 0x0b	; 11
    4486:	27 70       	andi	r18, 0x07	; 7
    4488:	bc 01       	movw	r22, r24
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <_Z4loopv+0x1ea0>
    448c:	66 0f       	add	r22, r22
    448e:	77 1f       	adc	r23, r23
    4490:	2a 95       	dec	r18
    4492:	e2 f7       	brpl	.-8      	; 0x448c <_Z4loopv+0x1e9c>
    4494:	26 2f       	mov	r18, r22
    4496:	20 95       	com	r18
    4498:	23 23       	and	r18, r19
    449a:	2b b9       	out	0x0b, r18	; 11
    449c:	0c c0       	rjmp	.+24     	; 0x44b6 <_Z4loopv+0x1ec6>
    449e:	35 b1       	in	r19, 0x05	; 5
    44a0:	27 70       	andi	r18, 0x07	; 7
    44a2:	bc 01       	movw	r22, r24
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <_Z4loopv+0x1eba>
    44a6:	66 0f       	add	r22, r22
    44a8:	77 1f       	adc	r23, r23
    44aa:	2a 95       	dec	r18
    44ac:	e2 f7       	brpl	.-8      	; 0x44a6 <_Z4loopv+0x1eb6>
    44ae:	26 2f       	mov	r18, r22
    44b0:	20 95       	com	r18
    44b2:	23 23       	and	r18, r19
    44b4:	25 b9       	out	0x05, r18	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    44b6:	af e3       	ldi	r26, 0x3F	; 63
    44b8:	bf e1       	ldi	r27, 0x1F	; 31
    44ba:	11 97       	sbiw	r26, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <_Z4loopv+0x1eca>
    44be:	00 c0       	rjmp	.+0      	; 0x44c0 <_Z4loopv+0x1ed0>
    44c0:	00 00       	nop
			
			public: void Write(char str[], uint8 row, uint8 pos) {
				SendCommand(0x80);
				if (row == 0 && pos < 16) SendCommand((pos & 0x0F) | 0x80);
				else if (row == 1 && pos < 16) SendCommand((pos & 0x0F) | 0xC0);
				for (int i = 0; i < 32 && str[i] != '\0'; i++) {
    44c2:	4f 5f       	subi	r20, 0xFF	; 255
    44c4:	5f 4f       	sbci	r21, 0xFF	; 255
    44c6:	40 32       	cpi	r20, 0x20	; 32
    44c8:	51 05       	cpc	r21, r1
    44ca:	09 f0       	breq	.+2      	; 0x44ce <_Z4loopv+0x1ede>
    44cc:	fc cb       	rjmp	.-2056   	; 0x3cc6 <_Z4loopv+0x16d6>
	
    44ce:	2a 96       	adiw	r28, 0x0a	; 10
    44d0:	0f b6       	in	r0, 0x3f	; 63
    44d2:	f8 94       	cli
    44d4:	de bf       	out	0x3e, r29	; 62
    44d6:	0f be       	out	0x3f, r0	; 63
    44d8:	cd bf       	out	0x3d, r28	; 61
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	ff 90       	pop	r15
    44e4:	ef 90       	pop	r14
    44e6:	08 95       	ret

000044e8 <main>:
void loop();

extern "C" {
	int main() {
		
		DDRB  = 0b00000000;
    44e8:	14 b8       	out	0x04, r1	; 4
		DDRD  = 0b00000000;
    44ea:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0b11111111;
    44ec:	8f ef       	ldi	r24, 0xFF	; 255
    44ee:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b11111111;
    44f0:	8b b9       	out	0x0b, r24	; 11
		
		uart_init();
    44f2:	0e 94 b0 00 	call	0x160	; 0x160 <_Z9uart_initv>
		enum EPrescaler {
			PS0 = CS00, PS1 = CS01, PS2 = CS02
		};
		
		inline void prescaler(EPrescaler p) {
			_SET_BIT(TCCR1B, p);
    44f6:	e1 e8       	ldi	r30, 0x81	; 129
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	82 60       	ori	r24, 0x02	; 2
    44fe:	80 83       	st	Z, r24
		zeduino::clock::prescaler(zeduino::clock::PS1);
		setup();
    4500:	0e 94 89 03 	call	0x712	; 0x712 <_Z5setupv>
		while (true) loop();
    4504:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_Z4loopv>
    4508:	fd cf       	rjmp	.-6      	; 0x4504 <main+0x1c>

0000450a <malloc>:
    450a:	0f 93       	push	r16
    450c:	1f 93       	push	r17
    450e:	cf 93       	push	r28
    4510:	df 93       	push	r29
    4512:	82 30       	cpi	r24, 0x02	; 2
    4514:	91 05       	cpc	r25, r1
    4516:	10 f4       	brcc	.+4      	; 0x451c <malloc+0x12>
    4518:	82 e0       	ldi	r24, 0x02	; 2
    451a:	90 e0       	ldi	r25, 0x00	; 0
    451c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <__flp>
    4520:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <__flp+0x1>
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	a0 e0       	ldi	r26, 0x00	; 0
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	30 97       	sbiw	r30, 0x00	; 0
    452e:	19 f1       	breq	.+70     	; 0x4576 <malloc+0x6c>
    4530:	40 81       	ld	r20, Z
    4532:	51 81       	ldd	r21, Z+1	; 0x01
    4534:	02 81       	ldd	r16, Z+2	; 0x02
    4536:	13 81       	ldd	r17, Z+3	; 0x03
    4538:	48 17       	cp	r20, r24
    453a:	59 07       	cpc	r21, r25
    453c:	c8 f0       	brcs	.+50     	; 0x4570 <malloc+0x66>
    453e:	84 17       	cp	r24, r20
    4540:	95 07       	cpc	r25, r21
    4542:	69 f4       	brne	.+26     	; 0x455e <malloc+0x54>
    4544:	10 97       	sbiw	r26, 0x00	; 0
    4546:	31 f0       	breq	.+12     	; 0x4554 <malloc+0x4a>
    4548:	12 96       	adiw	r26, 0x02	; 2
    454a:	0c 93       	st	X, r16
    454c:	12 97       	sbiw	r26, 0x02	; 2
    454e:	13 96       	adiw	r26, 0x03	; 3
    4550:	1c 93       	st	X, r17
    4552:	27 c0       	rjmp	.+78     	; 0x45a2 <malloc+0x98>
    4554:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <__flp>
    4558:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <__flp+0x1>
    455c:	22 c0       	rjmp	.+68     	; 0x45a2 <malloc+0x98>
    455e:	21 15       	cp	r18, r1
    4560:	31 05       	cpc	r19, r1
    4562:	19 f0       	breq	.+6      	; 0x456a <malloc+0x60>
    4564:	42 17       	cp	r20, r18
    4566:	53 07       	cpc	r21, r19
    4568:	18 f4       	brcc	.+6      	; 0x4570 <malloc+0x66>
    456a:	9a 01       	movw	r18, r20
    456c:	bd 01       	movw	r22, r26
    456e:	ef 01       	movw	r28, r30
    4570:	df 01       	movw	r26, r30
    4572:	f8 01       	movw	r30, r16
    4574:	db cf       	rjmp	.-74     	; 0x452c <malloc+0x22>
    4576:	21 15       	cp	r18, r1
    4578:	31 05       	cpc	r19, r1
    457a:	f9 f0       	breq	.+62     	; 0x45ba <malloc+0xb0>
    457c:	28 1b       	sub	r18, r24
    457e:	39 0b       	sbc	r19, r25
    4580:	24 30       	cpi	r18, 0x04	; 4
    4582:	31 05       	cpc	r19, r1
    4584:	80 f4       	brcc	.+32     	; 0x45a6 <malloc+0x9c>
    4586:	8a 81       	ldd	r24, Y+2	; 0x02
    4588:	9b 81       	ldd	r25, Y+3	; 0x03
    458a:	61 15       	cp	r22, r1
    458c:	71 05       	cpc	r23, r1
    458e:	21 f0       	breq	.+8      	; 0x4598 <malloc+0x8e>
    4590:	fb 01       	movw	r30, r22
    4592:	93 83       	std	Z+3, r25	; 0x03
    4594:	82 83       	std	Z+2, r24	; 0x02
    4596:	04 c0       	rjmp	.+8      	; 0x45a0 <malloc+0x96>
    4598:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <__flp+0x1>
    459c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__flp>
    45a0:	fe 01       	movw	r30, r28
    45a2:	32 96       	adiw	r30, 0x02	; 2
    45a4:	44 c0       	rjmp	.+136    	; 0x462e <malloc+0x124>
    45a6:	fe 01       	movw	r30, r28
    45a8:	e2 0f       	add	r30, r18
    45aa:	f3 1f       	adc	r31, r19
    45ac:	81 93       	st	Z+, r24
    45ae:	91 93       	st	Z+, r25
    45b0:	22 50       	subi	r18, 0x02	; 2
    45b2:	31 09       	sbc	r19, r1
    45b4:	39 83       	std	Y+1, r19	; 0x01
    45b6:	28 83       	st	Y, r18
    45b8:	3a c0       	rjmp	.+116    	; 0x462e <malloc+0x124>
    45ba:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__brkval>
    45be:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <__brkval+0x1>
    45c2:	23 2b       	or	r18, r19
    45c4:	41 f4       	brne	.+16     	; 0x45d6 <malloc+0xcc>
    45c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    45ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    45ce:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <__brkval+0x1>
    45d2:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <__brkval>
    45d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    45da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    45de:	21 15       	cp	r18, r1
    45e0:	31 05       	cpc	r19, r1
    45e2:	41 f4       	brne	.+16     	; 0x45f4 <malloc+0xea>
    45e4:	2d b7       	in	r18, 0x3d	; 61
    45e6:	3e b7       	in	r19, 0x3e	; 62
    45e8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    45ec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    45f0:	24 1b       	sub	r18, r20
    45f2:	35 0b       	sbc	r19, r21
    45f4:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <__brkval>
    45f8:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <__brkval+0x1>
    45fc:	e2 17       	cp	r30, r18
    45fe:	f3 07       	cpc	r31, r19
    4600:	a0 f4       	brcc	.+40     	; 0x462a <malloc+0x120>
    4602:	2e 1b       	sub	r18, r30
    4604:	3f 0b       	sbc	r19, r31
    4606:	28 17       	cp	r18, r24
    4608:	39 07       	cpc	r19, r25
    460a:	78 f0       	brcs	.+30     	; 0x462a <malloc+0x120>
    460c:	ac 01       	movw	r20, r24
    460e:	4e 5f       	subi	r20, 0xFE	; 254
    4610:	5f 4f       	sbci	r21, 0xFF	; 255
    4612:	24 17       	cp	r18, r20
    4614:	35 07       	cpc	r19, r21
    4616:	48 f0       	brcs	.+18     	; 0x462a <malloc+0x120>
    4618:	4e 0f       	add	r20, r30
    461a:	5f 1f       	adc	r21, r31
    461c:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <__brkval+0x1>
    4620:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <__brkval>
    4624:	81 93       	st	Z+, r24
    4626:	91 93       	st	Z+, r25
    4628:	02 c0       	rjmp	.+4      	; 0x462e <malloc+0x124>
    462a:	e0 e0       	ldi	r30, 0x00	; 0
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	cf 01       	movw	r24, r30
    4630:	df 91       	pop	r29
    4632:	cf 91       	pop	r28
    4634:	1f 91       	pop	r17
    4636:	0f 91       	pop	r16
    4638:	08 95       	ret

0000463a <free>:
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
    463e:	00 97       	sbiw	r24, 0x00	; 0
    4640:	09 f4       	brne	.+2      	; 0x4644 <free+0xa>
    4642:	81 c0       	rjmp	.+258    	; 0x4746 <free+0x10c>
    4644:	fc 01       	movw	r30, r24
    4646:	32 97       	sbiw	r30, 0x02	; 2
    4648:	13 82       	std	Z+3, r1	; 0x03
    464a:	12 82       	std	Z+2, r1	; 0x02
    464c:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <__flp>
    4650:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <__flp+0x1>
    4654:	10 97       	sbiw	r26, 0x00	; 0
    4656:	81 f4       	brne	.+32     	; 0x4678 <free+0x3e>
    4658:	20 81       	ld	r18, Z
    465a:	31 81       	ldd	r19, Z+1	; 0x01
    465c:	82 0f       	add	r24, r18
    465e:	93 1f       	adc	r25, r19
    4660:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__brkval>
    4664:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <__brkval+0x1>
    4668:	28 17       	cp	r18, r24
    466a:	39 07       	cpc	r19, r25
    466c:	51 f5       	brne	.+84     	; 0x46c2 <free+0x88>
    466e:	f0 93 67 01 	sts	0x0167, r31	; 0x800167 <__brkval+0x1>
    4672:	e0 93 66 01 	sts	0x0166, r30	; 0x800166 <__brkval>
    4676:	67 c0       	rjmp	.+206    	; 0x4746 <free+0x10c>
    4678:	ed 01       	movw	r28, r26
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	ce 17       	cp	r28, r30
    4680:	df 07       	cpc	r29, r31
    4682:	40 f4       	brcc	.+16     	; 0x4694 <free+0x5a>
    4684:	4a 81       	ldd	r20, Y+2	; 0x02
    4686:	5b 81       	ldd	r21, Y+3	; 0x03
    4688:	9e 01       	movw	r18, r28
    468a:	41 15       	cp	r20, r1
    468c:	51 05       	cpc	r21, r1
    468e:	f1 f0       	breq	.+60     	; 0x46cc <free+0x92>
    4690:	ea 01       	movw	r28, r20
    4692:	f5 cf       	rjmp	.-22     	; 0x467e <free+0x44>
    4694:	d3 83       	std	Z+3, r29	; 0x03
    4696:	c2 83       	std	Z+2, r28	; 0x02
    4698:	40 81       	ld	r20, Z
    469a:	51 81       	ldd	r21, Z+1	; 0x01
    469c:	84 0f       	add	r24, r20
    469e:	95 1f       	adc	r25, r21
    46a0:	c8 17       	cp	r28, r24
    46a2:	d9 07       	cpc	r29, r25
    46a4:	59 f4       	brne	.+22     	; 0x46bc <free+0x82>
    46a6:	88 81       	ld	r24, Y
    46a8:	99 81       	ldd	r25, Y+1	; 0x01
    46aa:	84 0f       	add	r24, r20
    46ac:	95 1f       	adc	r25, r21
    46ae:	02 96       	adiw	r24, 0x02	; 2
    46b0:	91 83       	std	Z+1, r25	; 0x01
    46b2:	80 83       	st	Z, r24
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	9b 81       	ldd	r25, Y+3	; 0x03
    46b8:	93 83       	std	Z+3, r25	; 0x03
    46ba:	82 83       	std	Z+2, r24	; 0x02
    46bc:	21 15       	cp	r18, r1
    46be:	31 05       	cpc	r19, r1
    46c0:	29 f4       	brne	.+10     	; 0x46cc <free+0x92>
    46c2:	f0 93 69 01 	sts	0x0169, r31	; 0x800169 <__flp+0x1>
    46c6:	e0 93 68 01 	sts	0x0168, r30	; 0x800168 <__flp>
    46ca:	3d c0       	rjmp	.+122    	; 0x4746 <free+0x10c>
    46cc:	e9 01       	movw	r28, r18
    46ce:	fb 83       	std	Y+3, r31	; 0x03
    46d0:	ea 83       	std	Y+2, r30	; 0x02
    46d2:	49 91       	ld	r20, Y+
    46d4:	59 91       	ld	r21, Y+
    46d6:	c4 0f       	add	r28, r20
    46d8:	d5 1f       	adc	r29, r21
    46da:	ec 17       	cp	r30, r28
    46dc:	fd 07       	cpc	r31, r29
    46de:	61 f4       	brne	.+24     	; 0x46f8 <free+0xbe>
    46e0:	80 81       	ld	r24, Z
    46e2:	91 81       	ldd	r25, Z+1	; 0x01
    46e4:	84 0f       	add	r24, r20
    46e6:	95 1f       	adc	r25, r21
    46e8:	02 96       	adiw	r24, 0x02	; 2
    46ea:	e9 01       	movw	r28, r18
    46ec:	99 83       	std	Y+1, r25	; 0x01
    46ee:	88 83       	st	Y, r24
    46f0:	82 81       	ldd	r24, Z+2	; 0x02
    46f2:	93 81       	ldd	r25, Z+3	; 0x03
    46f4:	9b 83       	std	Y+3, r25	; 0x03
    46f6:	8a 83       	std	Y+2, r24	; 0x02
    46f8:	e0 e0       	ldi	r30, 0x00	; 0
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	12 96       	adiw	r26, 0x02	; 2
    46fe:	8d 91       	ld	r24, X+
    4700:	9c 91       	ld	r25, X
    4702:	13 97       	sbiw	r26, 0x03	; 3
    4704:	00 97       	sbiw	r24, 0x00	; 0
    4706:	19 f0       	breq	.+6      	; 0x470e <free+0xd4>
    4708:	fd 01       	movw	r30, r26
    470a:	dc 01       	movw	r26, r24
    470c:	f7 cf       	rjmp	.-18     	; 0x46fc <free+0xc2>
    470e:	8d 91       	ld	r24, X+
    4710:	9c 91       	ld	r25, X
    4712:	11 97       	sbiw	r26, 0x01	; 1
    4714:	9d 01       	movw	r18, r26
    4716:	2e 5f       	subi	r18, 0xFE	; 254
    4718:	3f 4f       	sbci	r19, 0xFF	; 255
    471a:	82 0f       	add	r24, r18
    471c:	93 1f       	adc	r25, r19
    471e:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <__brkval>
    4722:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <__brkval+0x1>
    4726:	28 17       	cp	r18, r24
    4728:	39 07       	cpc	r19, r25
    472a:	69 f4       	brne	.+26     	; 0x4746 <free+0x10c>
    472c:	30 97       	sbiw	r30, 0x00	; 0
    472e:	29 f4       	brne	.+10     	; 0x473a <free+0x100>
    4730:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__flp+0x1>
    4734:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__flp>
    4738:	02 c0       	rjmp	.+4      	; 0x473e <free+0x104>
    473a:	13 82       	std	Z+3, r1	; 0x03
    473c:	12 82       	std	Z+2, r1	; 0x02
    473e:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <__brkval+0x1>
    4742:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <__brkval>
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	08 95       	ret

0000474c <sprintf>:
    474c:	ae e0       	ldi	r26, 0x0E	; 14
    474e:	b0 e0       	ldi	r27, 0x00	; 0
    4750:	ec ea       	ldi	r30, 0xAC	; 172
    4752:	f3 e2       	ldi	r31, 0x23	; 35
    4754:	0c 94 67 26 	jmp	0x4cce	; 0x4cce <__prologue_saves__+0x1c>
    4758:	0d 89       	ldd	r16, Y+21	; 0x15
    475a:	1e 89       	ldd	r17, Y+22	; 0x16
    475c:	86 e0       	ldi	r24, 0x06	; 6
    475e:	8c 83       	std	Y+4, r24	; 0x04
    4760:	1a 83       	std	Y+2, r17	; 0x02
    4762:	09 83       	std	Y+1, r16	; 0x01
    4764:	8f ef       	ldi	r24, 0xFF	; 255
    4766:	9f e7       	ldi	r25, 0x7F	; 127
    4768:	9e 83       	std	Y+6, r25	; 0x06
    476a:	8d 83       	std	Y+5, r24	; 0x05
    476c:	ae 01       	movw	r20, r28
    476e:	47 5e       	subi	r20, 0xE7	; 231
    4770:	5f 4f       	sbci	r21, 0xFF	; 255
    4772:	6f 89       	ldd	r22, Y+23	; 0x17
    4774:	78 8d       	ldd	r23, Y+24	; 0x18
    4776:	ce 01       	movw	r24, r28
    4778:	01 96       	adiw	r24, 0x01	; 1
    477a:	0e 94 c8 23 	call	0x4790	; 0x4790 <vfprintf>
    477e:	ef 81       	ldd	r30, Y+7	; 0x07
    4780:	f8 85       	ldd	r31, Y+8	; 0x08
    4782:	e0 0f       	add	r30, r16
    4784:	f1 1f       	adc	r31, r17
    4786:	10 82       	st	Z, r1
    4788:	2e 96       	adiw	r28, 0x0e	; 14
    478a:	e4 e0       	ldi	r30, 0x04	; 4
    478c:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__epilogue_restores__+0x1c>

00004790 <vfprintf>:
    4790:	ab e0       	ldi	r26, 0x0B	; 11
    4792:	b0 e0       	ldi	r27, 0x00	; 0
    4794:	ee ec       	ldi	r30, 0xCE	; 206
    4796:	f3 e2       	ldi	r31, 0x23	; 35
    4798:	0c 94 59 26 	jmp	0x4cb2	; 0x4cb2 <__prologue_saves__>
    479c:	6c 01       	movw	r12, r24
    479e:	7b 01       	movw	r14, r22
    47a0:	8a 01       	movw	r16, r20
    47a2:	fc 01       	movw	r30, r24
    47a4:	17 82       	std	Z+7, r1	; 0x07
    47a6:	16 82       	std	Z+6, r1	; 0x06
    47a8:	83 81       	ldd	r24, Z+3	; 0x03
    47aa:	81 ff       	sbrs	r24, 1
    47ac:	cc c1       	rjmp	.+920    	; 0x4b46 <vfprintf+0x3b6>
    47ae:	ce 01       	movw	r24, r28
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	3c 01       	movw	r6, r24
    47b4:	f6 01       	movw	r30, r12
    47b6:	93 81       	ldd	r25, Z+3	; 0x03
    47b8:	f7 01       	movw	r30, r14
    47ba:	93 fd       	sbrc	r25, 3
    47bc:	85 91       	lpm	r24, Z+
    47be:	93 ff       	sbrs	r25, 3
    47c0:	81 91       	ld	r24, Z+
    47c2:	7f 01       	movw	r14, r30
    47c4:	88 23       	and	r24, r24
    47c6:	09 f4       	brne	.+2      	; 0x47ca <vfprintf+0x3a>
    47c8:	ba c1       	rjmp	.+884    	; 0x4b3e <vfprintf+0x3ae>
    47ca:	85 32       	cpi	r24, 0x25	; 37
    47cc:	39 f4       	brne	.+14     	; 0x47dc <vfprintf+0x4c>
    47ce:	93 fd       	sbrc	r25, 3
    47d0:	85 91       	lpm	r24, Z+
    47d2:	93 ff       	sbrs	r25, 3
    47d4:	81 91       	ld	r24, Z+
    47d6:	7f 01       	movw	r14, r30
    47d8:	85 32       	cpi	r24, 0x25	; 37
    47da:	29 f4       	brne	.+10     	; 0x47e6 <vfprintf+0x56>
    47dc:	b6 01       	movw	r22, r12
    47de:	90 e0       	ldi	r25, 0x00	; 0
    47e0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    47e4:	e7 cf       	rjmp	.-50     	; 0x47b4 <vfprintf+0x24>
    47e6:	91 2c       	mov	r9, r1
    47e8:	21 2c       	mov	r2, r1
    47ea:	31 2c       	mov	r3, r1
    47ec:	ff e1       	ldi	r31, 0x1F	; 31
    47ee:	f3 15       	cp	r31, r3
    47f0:	d8 f0       	brcs	.+54     	; 0x4828 <vfprintf+0x98>
    47f2:	8b 32       	cpi	r24, 0x2B	; 43
    47f4:	79 f0       	breq	.+30     	; 0x4814 <vfprintf+0x84>
    47f6:	38 f4       	brcc	.+14     	; 0x4806 <vfprintf+0x76>
    47f8:	80 32       	cpi	r24, 0x20	; 32
    47fa:	79 f0       	breq	.+30     	; 0x481a <vfprintf+0x8a>
    47fc:	83 32       	cpi	r24, 0x23	; 35
    47fe:	a1 f4       	brne	.+40     	; 0x4828 <vfprintf+0x98>
    4800:	23 2d       	mov	r18, r3
    4802:	20 61       	ori	r18, 0x10	; 16
    4804:	1d c0       	rjmp	.+58     	; 0x4840 <vfprintf+0xb0>
    4806:	8d 32       	cpi	r24, 0x2D	; 45
    4808:	61 f0       	breq	.+24     	; 0x4822 <vfprintf+0x92>
    480a:	80 33       	cpi	r24, 0x30	; 48
    480c:	69 f4       	brne	.+26     	; 0x4828 <vfprintf+0x98>
    480e:	23 2d       	mov	r18, r3
    4810:	21 60       	ori	r18, 0x01	; 1
    4812:	16 c0       	rjmp	.+44     	; 0x4840 <vfprintf+0xb0>
    4814:	83 2d       	mov	r24, r3
    4816:	82 60       	ori	r24, 0x02	; 2
    4818:	38 2e       	mov	r3, r24
    481a:	e3 2d       	mov	r30, r3
    481c:	e4 60       	ori	r30, 0x04	; 4
    481e:	3e 2e       	mov	r3, r30
    4820:	2a c0       	rjmp	.+84     	; 0x4876 <vfprintf+0xe6>
    4822:	f3 2d       	mov	r31, r3
    4824:	f8 60       	ori	r31, 0x08	; 8
    4826:	1d c0       	rjmp	.+58     	; 0x4862 <vfprintf+0xd2>
    4828:	37 fc       	sbrc	r3, 7
    482a:	2d c0       	rjmp	.+90     	; 0x4886 <vfprintf+0xf6>
    482c:	20 ed       	ldi	r18, 0xD0	; 208
    482e:	28 0f       	add	r18, r24
    4830:	2a 30       	cpi	r18, 0x0A	; 10
    4832:	40 f0       	brcs	.+16     	; 0x4844 <vfprintf+0xb4>
    4834:	8e 32       	cpi	r24, 0x2E	; 46
    4836:	b9 f4       	brne	.+46     	; 0x4866 <vfprintf+0xd6>
    4838:	36 fc       	sbrc	r3, 6
    483a:	81 c1       	rjmp	.+770    	; 0x4b3e <vfprintf+0x3ae>
    483c:	23 2d       	mov	r18, r3
    483e:	20 64       	ori	r18, 0x40	; 64
    4840:	32 2e       	mov	r3, r18
    4842:	19 c0       	rjmp	.+50     	; 0x4876 <vfprintf+0xe6>
    4844:	36 fe       	sbrs	r3, 6
    4846:	06 c0       	rjmp	.+12     	; 0x4854 <vfprintf+0xc4>
    4848:	8a e0       	ldi	r24, 0x0A	; 10
    484a:	98 9e       	mul	r9, r24
    484c:	20 0d       	add	r18, r0
    484e:	11 24       	eor	r1, r1
    4850:	92 2e       	mov	r9, r18
    4852:	11 c0       	rjmp	.+34     	; 0x4876 <vfprintf+0xe6>
    4854:	ea e0       	ldi	r30, 0x0A	; 10
    4856:	2e 9e       	mul	r2, r30
    4858:	20 0d       	add	r18, r0
    485a:	11 24       	eor	r1, r1
    485c:	22 2e       	mov	r2, r18
    485e:	f3 2d       	mov	r31, r3
    4860:	f0 62       	ori	r31, 0x20	; 32
    4862:	3f 2e       	mov	r3, r31
    4864:	08 c0       	rjmp	.+16     	; 0x4876 <vfprintf+0xe6>
    4866:	8c 36       	cpi	r24, 0x6C	; 108
    4868:	21 f4       	brne	.+8      	; 0x4872 <vfprintf+0xe2>
    486a:	83 2d       	mov	r24, r3
    486c:	80 68       	ori	r24, 0x80	; 128
    486e:	38 2e       	mov	r3, r24
    4870:	02 c0       	rjmp	.+4      	; 0x4876 <vfprintf+0xe6>
    4872:	88 36       	cpi	r24, 0x68	; 104
    4874:	41 f4       	brne	.+16     	; 0x4886 <vfprintf+0xf6>
    4876:	f7 01       	movw	r30, r14
    4878:	93 fd       	sbrc	r25, 3
    487a:	85 91       	lpm	r24, Z+
    487c:	93 ff       	sbrs	r25, 3
    487e:	81 91       	ld	r24, Z+
    4880:	7f 01       	movw	r14, r30
    4882:	81 11       	cpse	r24, r1
    4884:	b3 cf       	rjmp	.-154    	; 0x47ec <vfprintf+0x5c>
    4886:	98 2f       	mov	r25, r24
    4888:	9f 7d       	andi	r25, 0xDF	; 223
    488a:	95 54       	subi	r25, 0x45	; 69
    488c:	93 30       	cpi	r25, 0x03	; 3
    488e:	28 f4       	brcc	.+10     	; 0x489a <vfprintf+0x10a>
    4890:	0c 5f       	subi	r16, 0xFC	; 252
    4892:	1f 4f       	sbci	r17, 0xFF	; 255
    4894:	9f e3       	ldi	r25, 0x3F	; 63
    4896:	99 83       	std	Y+1, r25	; 0x01
    4898:	0d c0       	rjmp	.+26     	; 0x48b4 <vfprintf+0x124>
    489a:	83 36       	cpi	r24, 0x63	; 99
    489c:	31 f0       	breq	.+12     	; 0x48aa <vfprintf+0x11a>
    489e:	83 37       	cpi	r24, 0x73	; 115
    48a0:	71 f0       	breq	.+28     	; 0x48be <vfprintf+0x12e>
    48a2:	83 35       	cpi	r24, 0x53	; 83
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <vfprintf+0x118>
    48a6:	59 c0       	rjmp	.+178    	; 0x495a <vfprintf+0x1ca>
    48a8:	21 c0       	rjmp	.+66     	; 0x48ec <vfprintf+0x15c>
    48aa:	f8 01       	movw	r30, r16
    48ac:	80 81       	ld	r24, Z
    48ae:	89 83       	std	Y+1, r24	; 0x01
    48b0:	0e 5f       	subi	r16, 0xFE	; 254
    48b2:	1f 4f       	sbci	r17, 0xFF	; 255
    48b4:	88 24       	eor	r8, r8
    48b6:	83 94       	inc	r8
    48b8:	91 2c       	mov	r9, r1
    48ba:	53 01       	movw	r10, r6
    48bc:	13 c0       	rjmp	.+38     	; 0x48e4 <vfprintf+0x154>
    48be:	28 01       	movw	r4, r16
    48c0:	f2 e0       	ldi	r31, 0x02	; 2
    48c2:	4f 0e       	add	r4, r31
    48c4:	51 1c       	adc	r5, r1
    48c6:	f8 01       	movw	r30, r16
    48c8:	a0 80       	ld	r10, Z
    48ca:	b1 80       	ldd	r11, Z+1	; 0x01
    48cc:	36 fe       	sbrs	r3, 6
    48ce:	03 c0       	rjmp	.+6      	; 0x48d6 <vfprintf+0x146>
    48d0:	69 2d       	mov	r22, r9
    48d2:	70 e0       	ldi	r23, 0x00	; 0
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <vfprintf+0x14a>
    48d6:	6f ef       	ldi	r22, 0xFF	; 255
    48d8:	7f ef       	ldi	r23, 0xFF	; 255
    48da:	c5 01       	movw	r24, r10
    48dc:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <strnlen>
    48e0:	4c 01       	movw	r8, r24
    48e2:	82 01       	movw	r16, r4
    48e4:	f3 2d       	mov	r31, r3
    48e6:	ff 77       	andi	r31, 0x7F	; 127
    48e8:	3f 2e       	mov	r3, r31
    48ea:	16 c0       	rjmp	.+44     	; 0x4918 <vfprintf+0x188>
    48ec:	28 01       	movw	r4, r16
    48ee:	22 e0       	ldi	r18, 0x02	; 2
    48f0:	42 0e       	add	r4, r18
    48f2:	51 1c       	adc	r5, r1
    48f4:	f8 01       	movw	r30, r16
    48f6:	a0 80       	ld	r10, Z
    48f8:	b1 80       	ldd	r11, Z+1	; 0x01
    48fa:	36 fe       	sbrs	r3, 6
    48fc:	03 c0       	rjmp	.+6      	; 0x4904 <vfprintf+0x174>
    48fe:	69 2d       	mov	r22, r9
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	02 c0       	rjmp	.+4      	; 0x4908 <vfprintf+0x178>
    4904:	6f ef       	ldi	r22, 0xFF	; 255
    4906:	7f ef       	ldi	r23, 0xFF	; 255
    4908:	c5 01       	movw	r24, r10
    490a:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <strnlen_P>
    490e:	4c 01       	movw	r8, r24
    4910:	f3 2d       	mov	r31, r3
    4912:	f0 68       	ori	r31, 0x80	; 128
    4914:	3f 2e       	mov	r3, r31
    4916:	82 01       	movw	r16, r4
    4918:	33 fc       	sbrc	r3, 3
    491a:	1b c0       	rjmp	.+54     	; 0x4952 <vfprintf+0x1c2>
    491c:	82 2d       	mov	r24, r2
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	88 16       	cp	r8, r24
    4922:	99 06       	cpc	r9, r25
    4924:	b0 f4       	brcc	.+44     	; 0x4952 <vfprintf+0x1c2>
    4926:	b6 01       	movw	r22, r12
    4928:	80 e2       	ldi	r24, 0x20	; 32
    492a:	90 e0       	ldi	r25, 0x00	; 0
    492c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4930:	2a 94       	dec	r2
    4932:	f4 cf       	rjmp	.-24     	; 0x491c <vfprintf+0x18c>
    4934:	f5 01       	movw	r30, r10
    4936:	37 fc       	sbrc	r3, 7
    4938:	85 91       	lpm	r24, Z+
    493a:	37 fe       	sbrs	r3, 7
    493c:	81 91       	ld	r24, Z+
    493e:	5f 01       	movw	r10, r30
    4940:	b6 01       	movw	r22, r12
    4942:	90 e0       	ldi	r25, 0x00	; 0
    4944:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4948:	21 10       	cpse	r2, r1
    494a:	2a 94       	dec	r2
    494c:	21 e0       	ldi	r18, 0x01	; 1
    494e:	82 1a       	sub	r8, r18
    4950:	91 08       	sbc	r9, r1
    4952:	81 14       	cp	r8, r1
    4954:	91 04       	cpc	r9, r1
    4956:	71 f7       	brne	.-36     	; 0x4934 <vfprintf+0x1a4>
    4958:	e8 c0       	rjmp	.+464    	; 0x4b2a <vfprintf+0x39a>
    495a:	84 36       	cpi	r24, 0x64	; 100
    495c:	11 f0       	breq	.+4      	; 0x4962 <vfprintf+0x1d2>
    495e:	89 36       	cpi	r24, 0x69	; 105
    4960:	41 f5       	brne	.+80     	; 0x49b2 <vfprintf+0x222>
    4962:	f8 01       	movw	r30, r16
    4964:	37 fe       	sbrs	r3, 7
    4966:	07 c0       	rjmp	.+14     	; 0x4976 <vfprintf+0x1e6>
    4968:	60 81       	ld	r22, Z
    496a:	71 81       	ldd	r23, Z+1	; 0x01
    496c:	82 81       	ldd	r24, Z+2	; 0x02
    496e:	93 81       	ldd	r25, Z+3	; 0x03
    4970:	0c 5f       	subi	r16, 0xFC	; 252
    4972:	1f 4f       	sbci	r17, 0xFF	; 255
    4974:	08 c0       	rjmp	.+16     	; 0x4986 <vfprintf+0x1f6>
    4976:	60 81       	ld	r22, Z
    4978:	71 81       	ldd	r23, Z+1	; 0x01
    497a:	07 2e       	mov	r0, r23
    497c:	00 0c       	add	r0, r0
    497e:	88 0b       	sbc	r24, r24
    4980:	99 0b       	sbc	r25, r25
    4982:	0e 5f       	subi	r16, 0xFE	; 254
    4984:	1f 4f       	sbci	r17, 0xFF	; 255
    4986:	f3 2d       	mov	r31, r3
    4988:	ff 76       	andi	r31, 0x6F	; 111
    498a:	3f 2e       	mov	r3, r31
    498c:	97 ff       	sbrs	r25, 7
    498e:	09 c0       	rjmp	.+18     	; 0x49a2 <vfprintf+0x212>
    4990:	90 95       	com	r25
    4992:	80 95       	com	r24
    4994:	70 95       	com	r23
    4996:	61 95       	neg	r22
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	8f 4f       	sbci	r24, 0xFF	; 255
    499c:	9f 4f       	sbci	r25, 0xFF	; 255
    499e:	f0 68       	ori	r31, 0x80	; 128
    49a0:	3f 2e       	mov	r3, r31
    49a2:	2a e0       	ldi	r18, 0x0A	; 10
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	a3 01       	movw	r20, r6
    49a8:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__ultoa_invert>
    49ac:	88 2e       	mov	r8, r24
    49ae:	86 18       	sub	r8, r6
    49b0:	45 c0       	rjmp	.+138    	; 0x4a3c <vfprintf+0x2ac>
    49b2:	85 37       	cpi	r24, 0x75	; 117
    49b4:	31 f4       	brne	.+12     	; 0x49c2 <vfprintf+0x232>
    49b6:	23 2d       	mov	r18, r3
    49b8:	2f 7e       	andi	r18, 0xEF	; 239
    49ba:	b2 2e       	mov	r11, r18
    49bc:	2a e0       	ldi	r18, 0x0A	; 10
    49be:	30 e0       	ldi	r19, 0x00	; 0
    49c0:	25 c0       	rjmp	.+74     	; 0x4a0c <vfprintf+0x27c>
    49c2:	93 2d       	mov	r25, r3
    49c4:	99 7f       	andi	r25, 0xF9	; 249
    49c6:	b9 2e       	mov	r11, r25
    49c8:	8f 36       	cpi	r24, 0x6F	; 111
    49ca:	c1 f0       	breq	.+48     	; 0x49fc <vfprintf+0x26c>
    49cc:	18 f4       	brcc	.+6      	; 0x49d4 <vfprintf+0x244>
    49ce:	88 35       	cpi	r24, 0x58	; 88
    49d0:	79 f0       	breq	.+30     	; 0x49f0 <vfprintf+0x260>
    49d2:	b5 c0       	rjmp	.+362    	; 0x4b3e <vfprintf+0x3ae>
    49d4:	80 37       	cpi	r24, 0x70	; 112
    49d6:	19 f0       	breq	.+6      	; 0x49de <vfprintf+0x24e>
    49d8:	88 37       	cpi	r24, 0x78	; 120
    49da:	21 f0       	breq	.+8      	; 0x49e4 <vfprintf+0x254>
    49dc:	b0 c0       	rjmp	.+352    	; 0x4b3e <vfprintf+0x3ae>
    49de:	e9 2f       	mov	r30, r25
    49e0:	e0 61       	ori	r30, 0x10	; 16
    49e2:	be 2e       	mov	r11, r30
    49e4:	b4 fe       	sbrs	r11, 4
    49e6:	0d c0       	rjmp	.+26     	; 0x4a02 <vfprintf+0x272>
    49e8:	fb 2d       	mov	r31, r11
    49ea:	f4 60       	ori	r31, 0x04	; 4
    49ec:	bf 2e       	mov	r11, r31
    49ee:	09 c0       	rjmp	.+18     	; 0x4a02 <vfprintf+0x272>
    49f0:	34 fe       	sbrs	r3, 4
    49f2:	0a c0       	rjmp	.+20     	; 0x4a08 <vfprintf+0x278>
    49f4:	29 2f       	mov	r18, r25
    49f6:	26 60       	ori	r18, 0x06	; 6
    49f8:	b2 2e       	mov	r11, r18
    49fa:	06 c0       	rjmp	.+12     	; 0x4a08 <vfprintf+0x278>
    49fc:	28 e0       	ldi	r18, 0x08	; 8
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	05 c0       	rjmp	.+10     	; 0x4a0c <vfprintf+0x27c>
    4a02:	20 e1       	ldi	r18, 0x10	; 16
    4a04:	30 e0       	ldi	r19, 0x00	; 0
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <vfprintf+0x27c>
    4a08:	20 e1       	ldi	r18, 0x10	; 16
    4a0a:	32 e0       	ldi	r19, 0x02	; 2
    4a0c:	f8 01       	movw	r30, r16
    4a0e:	b7 fe       	sbrs	r11, 7
    4a10:	07 c0       	rjmp	.+14     	; 0x4a20 <vfprintf+0x290>
    4a12:	60 81       	ld	r22, Z
    4a14:	71 81       	ldd	r23, Z+1	; 0x01
    4a16:	82 81       	ldd	r24, Z+2	; 0x02
    4a18:	93 81       	ldd	r25, Z+3	; 0x03
    4a1a:	0c 5f       	subi	r16, 0xFC	; 252
    4a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a1e:	06 c0       	rjmp	.+12     	; 0x4a2c <vfprintf+0x29c>
    4a20:	60 81       	ld	r22, Z
    4a22:	71 81       	ldd	r23, Z+1	; 0x01
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	0e 5f       	subi	r16, 0xFE	; 254
    4a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a2c:	a3 01       	movw	r20, r6
    4a2e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__ultoa_invert>
    4a32:	88 2e       	mov	r8, r24
    4a34:	86 18       	sub	r8, r6
    4a36:	fb 2d       	mov	r31, r11
    4a38:	ff 77       	andi	r31, 0x7F	; 127
    4a3a:	3f 2e       	mov	r3, r31
    4a3c:	36 fe       	sbrs	r3, 6
    4a3e:	0d c0       	rjmp	.+26     	; 0x4a5a <vfprintf+0x2ca>
    4a40:	23 2d       	mov	r18, r3
    4a42:	2e 7f       	andi	r18, 0xFE	; 254
    4a44:	a2 2e       	mov	r10, r18
    4a46:	89 14       	cp	r8, r9
    4a48:	58 f4       	brcc	.+22     	; 0x4a60 <vfprintf+0x2d0>
    4a4a:	34 fe       	sbrs	r3, 4
    4a4c:	0b c0       	rjmp	.+22     	; 0x4a64 <vfprintf+0x2d4>
    4a4e:	32 fc       	sbrc	r3, 2
    4a50:	09 c0       	rjmp	.+18     	; 0x4a64 <vfprintf+0x2d4>
    4a52:	83 2d       	mov	r24, r3
    4a54:	8e 7e       	andi	r24, 0xEE	; 238
    4a56:	a8 2e       	mov	r10, r24
    4a58:	05 c0       	rjmp	.+10     	; 0x4a64 <vfprintf+0x2d4>
    4a5a:	b8 2c       	mov	r11, r8
    4a5c:	a3 2c       	mov	r10, r3
    4a5e:	03 c0       	rjmp	.+6      	; 0x4a66 <vfprintf+0x2d6>
    4a60:	b8 2c       	mov	r11, r8
    4a62:	01 c0       	rjmp	.+2      	; 0x4a66 <vfprintf+0x2d6>
    4a64:	b9 2c       	mov	r11, r9
    4a66:	a4 fe       	sbrs	r10, 4
    4a68:	0f c0       	rjmp	.+30     	; 0x4a88 <vfprintf+0x2f8>
    4a6a:	fe 01       	movw	r30, r28
    4a6c:	e8 0d       	add	r30, r8
    4a6e:	f1 1d       	adc	r31, r1
    4a70:	80 81       	ld	r24, Z
    4a72:	80 33       	cpi	r24, 0x30	; 48
    4a74:	21 f4       	brne	.+8      	; 0x4a7e <vfprintf+0x2ee>
    4a76:	9a 2d       	mov	r25, r10
    4a78:	99 7e       	andi	r25, 0xE9	; 233
    4a7a:	a9 2e       	mov	r10, r25
    4a7c:	09 c0       	rjmp	.+18     	; 0x4a90 <vfprintf+0x300>
    4a7e:	a2 fe       	sbrs	r10, 2
    4a80:	06 c0       	rjmp	.+12     	; 0x4a8e <vfprintf+0x2fe>
    4a82:	b3 94       	inc	r11
    4a84:	b3 94       	inc	r11
    4a86:	04 c0       	rjmp	.+8      	; 0x4a90 <vfprintf+0x300>
    4a88:	8a 2d       	mov	r24, r10
    4a8a:	86 78       	andi	r24, 0x86	; 134
    4a8c:	09 f0       	breq	.+2      	; 0x4a90 <vfprintf+0x300>
    4a8e:	b3 94       	inc	r11
    4a90:	a3 fc       	sbrc	r10, 3
    4a92:	11 c0       	rjmp	.+34     	; 0x4ab6 <vfprintf+0x326>
    4a94:	a0 fe       	sbrs	r10, 0
    4a96:	06 c0       	rjmp	.+12     	; 0x4aa4 <vfprintf+0x314>
    4a98:	b2 14       	cp	r11, r2
    4a9a:	88 f4       	brcc	.+34     	; 0x4abe <vfprintf+0x32e>
    4a9c:	28 0c       	add	r2, r8
    4a9e:	92 2c       	mov	r9, r2
    4aa0:	9b 18       	sub	r9, r11
    4aa2:	0e c0       	rjmp	.+28     	; 0x4ac0 <vfprintf+0x330>
    4aa4:	b2 14       	cp	r11, r2
    4aa6:	60 f4       	brcc	.+24     	; 0x4ac0 <vfprintf+0x330>
    4aa8:	b6 01       	movw	r22, r12
    4aaa:	80 e2       	ldi	r24, 0x20	; 32
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4ab2:	b3 94       	inc	r11
    4ab4:	f7 cf       	rjmp	.-18     	; 0x4aa4 <vfprintf+0x314>
    4ab6:	b2 14       	cp	r11, r2
    4ab8:	18 f4       	brcc	.+6      	; 0x4ac0 <vfprintf+0x330>
    4aba:	2b 18       	sub	r2, r11
    4abc:	02 c0       	rjmp	.+4      	; 0x4ac2 <vfprintf+0x332>
    4abe:	98 2c       	mov	r9, r8
    4ac0:	21 2c       	mov	r2, r1
    4ac2:	a4 fe       	sbrs	r10, 4
    4ac4:	10 c0       	rjmp	.+32     	; 0x4ae6 <vfprintf+0x356>
    4ac6:	b6 01       	movw	r22, r12
    4ac8:	80 e3       	ldi	r24, 0x30	; 48
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4ad0:	a2 fe       	sbrs	r10, 2
    4ad2:	17 c0       	rjmp	.+46     	; 0x4b02 <vfprintf+0x372>
    4ad4:	a1 fc       	sbrc	r10, 1
    4ad6:	03 c0       	rjmp	.+6      	; 0x4ade <vfprintf+0x34e>
    4ad8:	88 e7       	ldi	r24, 0x78	; 120
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	02 c0       	rjmp	.+4      	; 0x4ae2 <vfprintf+0x352>
    4ade:	88 e5       	ldi	r24, 0x58	; 88
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	b6 01       	movw	r22, r12
    4ae4:	0c c0       	rjmp	.+24     	; 0x4afe <vfprintf+0x36e>
    4ae6:	8a 2d       	mov	r24, r10
    4ae8:	86 78       	andi	r24, 0x86	; 134
    4aea:	59 f0       	breq	.+22     	; 0x4b02 <vfprintf+0x372>
    4aec:	a1 fe       	sbrs	r10, 1
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <vfprintf+0x364>
    4af0:	8b e2       	ldi	r24, 0x2B	; 43
    4af2:	01 c0       	rjmp	.+2      	; 0x4af6 <vfprintf+0x366>
    4af4:	80 e2       	ldi	r24, 0x20	; 32
    4af6:	a7 fc       	sbrc	r10, 7
    4af8:	8d e2       	ldi	r24, 0x2D	; 45
    4afa:	b6 01       	movw	r22, r12
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4b02:	89 14       	cp	r8, r9
    4b04:	38 f4       	brcc	.+14     	; 0x4b14 <vfprintf+0x384>
    4b06:	b6 01       	movw	r22, r12
    4b08:	80 e3       	ldi	r24, 0x30	; 48
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4b10:	9a 94       	dec	r9
    4b12:	f7 cf       	rjmp	.-18     	; 0x4b02 <vfprintf+0x372>
    4b14:	8a 94       	dec	r8
    4b16:	f3 01       	movw	r30, r6
    4b18:	e8 0d       	add	r30, r8
    4b1a:	f1 1d       	adc	r31, r1
    4b1c:	80 81       	ld	r24, Z
    4b1e:	b6 01       	movw	r22, r12
    4b20:	90 e0       	ldi	r25, 0x00	; 0
    4b22:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4b26:	81 10       	cpse	r8, r1
    4b28:	f5 cf       	rjmp	.-22     	; 0x4b14 <vfprintf+0x384>
    4b2a:	22 20       	and	r2, r2
    4b2c:	09 f4       	brne	.+2      	; 0x4b30 <vfprintf+0x3a0>
    4b2e:	42 ce       	rjmp	.-892    	; 0x47b4 <vfprintf+0x24>
    4b30:	b6 01       	movw	r22, r12
    4b32:	80 e2       	ldi	r24, 0x20	; 32
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <fputc>
    4b3a:	2a 94       	dec	r2
    4b3c:	f6 cf       	rjmp	.-20     	; 0x4b2a <vfprintf+0x39a>
    4b3e:	f6 01       	movw	r30, r12
    4b40:	86 81       	ldd	r24, Z+6	; 0x06
    4b42:	97 81       	ldd	r25, Z+7	; 0x07
    4b44:	02 c0       	rjmp	.+4      	; 0x4b4a <vfprintf+0x3ba>
    4b46:	8f ef       	ldi	r24, 0xFF	; 255
    4b48:	9f ef       	ldi	r25, 0xFF	; 255
    4b4a:	2b 96       	adiw	r28, 0x0b	; 11
    4b4c:	e2 e1       	ldi	r30, 0x12	; 18
    4b4e:	0c 94 75 26 	jmp	0x4cea	; 0x4cea <__epilogue_restores__>

00004b52 <strnlen_P>:
    4b52:	fc 01       	movw	r30, r24
    4b54:	05 90       	lpm	r0, Z+
    4b56:	61 50       	subi	r22, 0x01	; 1
    4b58:	70 40       	sbci	r23, 0x00	; 0
    4b5a:	01 10       	cpse	r0, r1
    4b5c:	d8 f7       	brcc	.-10     	; 0x4b54 <strnlen_P+0x2>
    4b5e:	80 95       	com	r24
    4b60:	90 95       	com	r25
    4b62:	8e 0f       	add	r24, r30
    4b64:	9f 1f       	adc	r25, r31
    4b66:	08 95       	ret

00004b68 <strnlen>:
    4b68:	fc 01       	movw	r30, r24
    4b6a:	61 50       	subi	r22, 0x01	; 1
    4b6c:	70 40       	sbci	r23, 0x00	; 0
    4b6e:	01 90       	ld	r0, Z+
    4b70:	01 10       	cpse	r0, r1
    4b72:	d8 f7       	brcc	.-10     	; 0x4b6a <strnlen+0x2>
    4b74:	80 95       	com	r24
    4b76:	90 95       	com	r25
    4b78:	8e 0f       	add	r24, r30
    4b7a:	9f 1f       	adc	r25, r31
    4b7c:	08 95       	ret

00004b7e <fputc>:
    4b7e:	0f 93       	push	r16
    4b80:	1f 93       	push	r17
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	fb 01       	movw	r30, r22
    4b88:	23 81       	ldd	r18, Z+3	; 0x03
    4b8a:	21 fd       	sbrc	r18, 1
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <fputc+0x16>
    4b8e:	8f ef       	ldi	r24, 0xFF	; 255
    4b90:	9f ef       	ldi	r25, 0xFF	; 255
    4b92:	2c c0       	rjmp	.+88     	; 0x4bec <fputc+0x6e>
    4b94:	22 ff       	sbrs	r18, 2
    4b96:	16 c0       	rjmp	.+44     	; 0x4bc4 <fputc+0x46>
    4b98:	46 81       	ldd	r20, Z+6	; 0x06
    4b9a:	57 81       	ldd	r21, Z+7	; 0x07
    4b9c:	24 81       	ldd	r18, Z+4	; 0x04
    4b9e:	35 81       	ldd	r19, Z+5	; 0x05
    4ba0:	42 17       	cp	r20, r18
    4ba2:	53 07       	cpc	r21, r19
    4ba4:	44 f4       	brge	.+16     	; 0x4bb6 <fputc+0x38>
    4ba6:	a0 81       	ld	r26, Z
    4ba8:	b1 81       	ldd	r27, Z+1	; 0x01
    4baa:	9d 01       	movw	r18, r26
    4bac:	2f 5f       	subi	r18, 0xFF	; 255
    4bae:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb0:	31 83       	std	Z+1, r19	; 0x01
    4bb2:	20 83       	st	Z, r18
    4bb4:	8c 93       	st	X, r24
    4bb6:	26 81       	ldd	r18, Z+6	; 0x06
    4bb8:	37 81       	ldd	r19, Z+7	; 0x07
    4bba:	2f 5f       	subi	r18, 0xFF	; 255
    4bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbe:	37 83       	std	Z+7, r19	; 0x07
    4bc0:	26 83       	std	Z+6, r18	; 0x06
    4bc2:	14 c0       	rjmp	.+40     	; 0x4bec <fputc+0x6e>
    4bc4:	8b 01       	movw	r16, r22
    4bc6:	ec 01       	movw	r28, r24
    4bc8:	fb 01       	movw	r30, r22
    4bca:	00 84       	ldd	r0, Z+8	; 0x08
    4bcc:	f1 85       	ldd	r31, Z+9	; 0x09
    4bce:	e0 2d       	mov	r30, r0
    4bd0:	09 95       	icall
    4bd2:	89 2b       	or	r24, r25
    4bd4:	e1 f6       	brne	.-72     	; 0x4b8e <fputc+0x10>
    4bd6:	d8 01       	movw	r26, r16
    4bd8:	16 96       	adiw	r26, 0x06	; 6
    4bda:	8d 91       	ld	r24, X+
    4bdc:	9c 91       	ld	r25, X
    4bde:	17 97       	sbiw	r26, 0x07	; 7
    4be0:	01 96       	adiw	r24, 0x01	; 1
    4be2:	17 96       	adiw	r26, 0x07	; 7
    4be4:	9c 93       	st	X, r25
    4be6:	8e 93       	st	-X, r24
    4be8:	16 97       	sbiw	r26, 0x06	; 6
    4bea:	ce 01       	movw	r24, r28
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	08 95       	ret

00004bf6 <__ultoa_invert>:
    4bf6:	fa 01       	movw	r30, r20
    4bf8:	aa 27       	eor	r26, r26
    4bfa:	28 30       	cpi	r18, 0x08	; 8
    4bfc:	51 f1       	breq	.+84     	; 0x4c52 <__ultoa_invert+0x5c>
    4bfe:	20 31       	cpi	r18, 0x10	; 16
    4c00:	81 f1       	breq	.+96     	; 0x4c62 <__ultoa_invert+0x6c>
    4c02:	e8 94       	clt
    4c04:	6f 93       	push	r22
    4c06:	6e 7f       	andi	r22, 0xFE	; 254
    4c08:	6e 5f       	subi	r22, 0xFE	; 254
    4c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c10:	af 4f       	sbci	r26, 0xFF	; 255
    4c12:	b1 e0       	ldi	r27, 0x01	; 1
    4c14:	3e d0       	rcall	.+124    	; 0x4c92 <__ultoa_invert+0x9c>
    4c16:	b4 e0       	ldi	r27, 0x04	; 4
    4c18:	3c d0       	rcall	.+120    	; 0x4c92 <__ultoa_invert+0x9c>
    4c1a:	67 0f       	add	r22, r23
    4c1c:	78 1f       	adc	r23, r24
    4c1e:	89 1f       	adc	r24, r25
    4c20:	9a 1f       	adc	r25, r26
    4c22:	a1 1d       	adc	r26, r1
    4c24:	68 0f       	add	r22, r24
    4c26:	79 1f       	adc	r23, r25
    4c28:	8a 1f       	adc	r24, r26
    4c2a:	91 1d       	adc	r25, r1
    4c2c:	a1 1d       	adc	r26, r1
    4c2e:	6a 0f       	add	r22, r26
    4c30:	71 1d       	adc	r23, r1
    4c32:	81 1d       	adc	r24, r1
    4c34:	91 1d       	adc	r25, r1
    4c36:	a1 1d       	adc	r26, r1
    4c38:	20 d0       	rcall	.+64     	; 0x4c7a <__ultoa_invert+0x84>
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <__ultoa_invert+0x48>
    4c3c:	68 94       	set
    4c3e:	3f 91       	pop	r19
    4c40:	2a e0       	ldi	r18, 0x0A	; 10
    4c42:	26 9f       	mul	r18, r22
    4c44:	11 24       	eor	r1, r1
    4c46:	30 19       	sub	r19, r0
    4c48:	30 5d       	subi	r19, 0xD0	; 208
    4c4a:	31 93       	st	Z+, r19
    4c4c:	de f6       	brtc	.-74     	; 0x4c04 <__ultoa_invert+0xe>
    4c4e:	cf 01       	movw	r24, r30
    4c50:	08 95       	ret
    4c52:	46 2f       	mov	r20, r22
    4c54:	47 70       	andi	r20, 0x07	; 7
    4c56:	40 5d       	subi	r20, 0xD0	; 208
    4c58:	41 93       	st	Z+, r20
    4c5a:	b3 e0       	ldi	r27, 0x03	; 3
    4c5c:	0f d0       	rcall	.+30     	; 0x4c7c <__ultoa_invert+0x86>
    4c5e:	c9 f7       	brne	.-14     	; 0x4c52 <__ultoa_invert+0x5c>
    4c60:	f6 cf       	rjmp	.-20     	; 0x4c4e <__ultoa_invert+0x58>
    4c62:	46 2f       	mov	r20, r22
    4c64:	4f 70       	andi	r20, 0x0F	; 15
    4c66:	40 5d       	subi	r20, 0xD0	; 208
    4c68:	4a 33       	cpi	r20, 0x3A	; 58
    4c6a:	18 f0       	brcs	.+6      	; 0x4c72 <__ultoa_invert+0x7c>
    4c6c:	49 5d       	subi	r20, 0xD9	; 217
    4c6e:	31 fd       	sbrc	r19, 1
    4c70:	40 52       	subi	r20, 0x20	; 32
    4c72:	41 93       	st	Z+, r20
    4c74:	02 d0       	rcall	.+4      	; 0x4c7a <__ultoa_invert+0x84>
    4c76:	a9 f7       	brne	.-22     	; 0x4c62 <__ultoa_invert+0x6c>
    4c78:	ea cf       	rjmp	.-44     	; 0x4c4e <__ultoa_invert+0x58>
    4c7a:	b4 e0       	ldi	r27, 0x04	; 4
    4c7c:	a6 95       	lsr	r26
    4c7e:	97 95       	ror	r25
    4c80:	87 95       	ror	r24
    4c82:	77 95       	ror	r23
    4c84:	67 95       	ror	r22
    4c86:	ba 95       	dec	r27
    4c88:	c9 f7       	brne	.-14     	; 0x4c7c <__ultoa_invert+0x86>
    4c8a:	00 97       	sbiw	r24, 0x00	; 0
    4c8c:	61 05       	cpc	r22, r1
    4c8e:	71 05       	cpc	r23, r1
    4c90:	08 95       	ret
    4c92:	9b 01       	movw	r18, r22
    4c94:	ac 01       	movw	r20, r24
    4c96:	0a 2e       	mov	r0, r26
    4c98:	06 94       	lsr	r0
    4c9a:	57 95       	ror	r21
    4c9c:	47 95       	ror	r20
    4c9e:	37 95       	ror	r19
    4ca0:	27 95       	ror	r18
    4ca2:	ba 95       	dec	r27
    4ca4:	c9 f7       	brne	.-14     	; 0x4c98 <__ultoa_invert+0xa2>
    4ca6:	62 0f       	add	r22, r18
    4ca8:	73 1f       	adc	r23, r19
    4caa:	84 1f       	adc	r24, r20
    4cac:	95 1f       	adc	r25, r21
    4cae:	a0 1d       	adc	r26, r0
    4cb0:	08 95       	ret

00004cb2 <__prologue_saves__>:
    4cb2:	2f 92       	push	r2
    4cb4:	3f 92       	push	r3
    4cb6:	4f 92       	push	r4
    4cb8:	5f 92       	push	r5
    4cba:	6f 92       	push	r6
    4cbc:	7f 92       	push	r7
    4cbe:	8f 92       	push	r8
    4cc0:	9f 92       	push	r9
    4cc2:	af 92       	push	r10
    4cc4:	bf 92       	push	r11
    4cc6:	cf 92       	push	r12
    4cc8:	df 92       	push	r13
    4cca:	ef 92       	push	r14
    4ccc:	ff 92       	push	r15
    4cce:	0f 93       	push	r16
    4cd0:	1f 93       	push	r17
    4cd2:	cf 93       	push	r28
    4cd4:	df 93       	push	r29
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62
    4cda:	ca 1b       	sub	r28, r26
    4cdc:	db 0b       	sbc	r29, r27
    4cde:	0f b6       	in	r0, 0x3f	; 63
    4ce0:	f8 94       	cli
    4ce2:	de bf       	out	0x3e, r29	; 62
    4ce4:	0f be       	out	0x3f, r0	; 63
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	09 94       	ijmp

00004cea <__epilogue_restores__>:
    4cea:	2a 88       	ldd	r2, Y+18	; 0x12
    4cec:	39 88       	ldd	r3, Y+17	; 0x11
    4cee:	48 88       	ldd	r4, Y+16	; 0x10
    4cf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cfc:	b9 84       	ldd	r11, Y+9	; 0x09
    4cfe:	c8 84       	ldd	r12, Y+8	; 0x08
    4d00:	df 80       	ldd	r13, Y+7	; 0x07
    4d02:	ee 80       	ldd	r14, Y+6	; 0x06
    4d04:	fd 80       	ldd	r15, Y+5	; 0x05
    4d06:	0c 81       	ldd	r16, Y+4	; 0x04
    4d08:	1b 81       	ldd	r17, Y+3	; 0x03
    4d0a:	aa 81       	ldd	r26, Y+2	; 0x02
    4d0c:	b9 81       	ldd	r27, Y+1	; 0x01
    4d0e:	ce 0f       	add	r28, r30
    4d10:	d1 1d       	adc	r29, r1
    4d12:	0f b6       	in	r0, 0x3f	; 63
    4d14:	f8 94       	cli
    4d16:	de bf       	out	0x3e, r29	; 62
    4d18:	0f be       	out	0x3f, r0	; 63
    4d1a:	cd bf       	out	0x3d, r28	; 61
    4d1c:	ed 01       	movw	r28, r26
    4d1e:	08 95       	ret

00004d20 <_exit>:
    4d20:	f8 94       	cli

00004d22 <__stop_program>:
    4d22:	ff cf       	rjmp	.-2      	; 0x4d22 <__stop_program>
