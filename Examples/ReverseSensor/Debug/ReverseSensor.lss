
ReverseSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800116  00800116  00000d1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001405  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a73  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c5  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00003364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d3  00000000  00000000  0000344c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c0  00000000  00000000  00003d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000044df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 19 02 	call	0x432	; 0x432 <main>
  9e:	0c 94 38 06 	jmp	0xc70	; 0xc70 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12uart_putcharcP6__file>:
		void log(const char *format, ...) {
			va_list args;
			va_start(args, format);
			printf(format, args);
			va_end(args);
		}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <_Z12uart_putcharcP6__file+0xe>
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12uart_putcharcP6__file>
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z12uart_putcharcP6__file+0x12>
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <_Z12uart_getcharP6__file>:
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <_Z12uart_getcharP6__file+0x4>
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <_Z9uart_initv>:
  dc:	ea e1       	ldi	r30, 0x1A	; 26
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	83 e5       	ldi	r24, 0x53	; 83
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 87       	std	Z+9, r25	; 0x09
  e6:	80 87       	std	Z+8, r24	; 0x08
  e8:	85 e6       	ldi	r24, 0x65	; 101
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	93 87       	std	Z+11, r25	; 0x0b
  ee:	82 87       	std	Z+10, r24	; 0x0a
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	83 83       	std	Z+3, r24	; 0x03
  f4:	15 86       	std	Z+13, r1	; 0x0d
  f6:	14 86       	std	Z+12, r1	; 0x0c
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 102:	a0 ec       	ldi	r26, 0xC0	; 192
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	8c 93       	st	X, r24
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 118:	ac e2       	ldi	r26, 0x2C	; 44
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	13 96       	adiw	r26, 0x03	; 3
 11e:	fc 93       	st	X, r31
 120:	ee 93       	st	-X, r30
 122:	12 97       	sbiw	r26, 0x02	; 2
 124:	ed 93       	st	X+, r30
 126:	fc 93       	st	X, r31
 128:	08 95       	ret

0000012a <_Z5setupv>:
typedef uint16_t uint16;
typedef uint32_t uint32;
typedef int32_t int32;

void * operator new(size_t size) {
	return malloc(size);	
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 39 02 	call	0x472	; 0x472 <malloc>
		
		class Led : public Component {
			
			private: const EPort _port;
			
			public: Led(EPort port) : _port(port) {
 132:	2d e0       	ldi	r18, 0x0D	; 13
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
			else if (m == OUTPUT) _SET_BIT(fcrio(port), nmr(port));
 138:	25 9a       	sbi	0x04, 5	; 4

component::Led *led;
component::Sonar *sonar;

void setup() {
	led = new component::Led(P13);
 13a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <led+0x1>
 13e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <led>
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 39 02 	call	0x472	; 0x472 <malloc>
		class Sonar : public Component {
		
			private: const EPort _triggerPort, _echoPort;
			private: uint16 count;
			
			public: Sonar(EPort triggerPort, EPort echoPort) : _triggerPort(triggerPort), _echoPort(echoPort) {
 14a:	22 e0       	ldi	r18, 0x02	; 2
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	23 e0       	ldi	r18, 0x03	; 3
 152:	21 83       	std	Z+1, r18	; 0x01
 154:	52 9a       	sbi	0x0a, 2	; 10
			P0, P1, P2, P3, P4, P5, P6, P7, // DDRD
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
 156:	53 98       	cbi	0x0a, 3	; 10
	sonar = new component::Sonar(P2, P3);
 158:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 15c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 160:	08 95       	ret

00000162 <_Z4loopv>:
}

void loop() {
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
	led->Blink(sonar->ReadDistance() * 100);
 166:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <__data_end>
 16a:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <__data_end+0x1>
				mode(echoPort, INPUT);
			}
					
			public: uint16 ReadDistance() {
				
				port::enable(_triggerPort);
 16e:	80 81       	ld	r24, Z
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
 170:	88 30       	cpi	r24, 0x08	; 8
 172:	70 f4       	brcc	.+28     	; 0x190 <_Z4loopv+0x2e>
 174:	4b b1       	in	r20, 0x0b	; 11
 176:	87 70       	andi	r24, 0x07	; 7
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	b9 01       	movw	r22, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <_Z4loopv+0x22>
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	8a 95       	dec	r24
 186:	e2 f7       	brpl	.-8      	; 0x180 <_Z4loopv+0x1e>
 188:	cb 01       	movw	r24, r22
 18a:	84 2b       	or	r24, r20
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	17 c1       	rjmp	.+558    	; 0x3be <_Z4loopv+0x25c>
 190:	45 b1       	in	r20, 0x05	; 5
 192:	87 70       	andi	r24, 0x07	; 7
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	d9 01       	movw	r26, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <_Z4loopv+0x3e>
 19c:	aa 0f       	add	r26, r26
 19e:	bb 1f       	adc	r27, r27
 1a0:	8a 95       	dec	r24
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <_Z4loopv+0x3a>
 1a4:	cd 01       	movw	r24, r26
 1a6:	84 2b       	or	r24, r20
 1a8:	85 b9       	out	0x05, r24	; 5
 1aa:	09 c1       	rjmp	.+530    	; 0x3be <_Z4loopv+0x25c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	b5 e0       	ldi	r27, 0x05	; 5
 1ae:	ba 95       	dec	r27
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z4loopv+0x4c>
 1b2:	00 00       	nop
 1b4:	01 97       	sbiw	r24, 0x01	; 1
			}
		}
		
		inline void delay_us(uint16 time) {
			// TODO: Implementar em assembly
			while (time > 0) {
 1b6:	d1 f7       	brne	.-12     	; 0x1ac <_Z4loopv+0x4a>
				util::delay_us(10);
				port::disable(_triggerPort);
 1b8:	80 81       	ld	r24, Z
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
 1ba:	88 30       	cpi	r24, 0x08	; 8
 1bc:	78 f4       	brcc	.+30     	; 0x1dc <_Z4loopv+0x7a>
 1be:	4b b1       	in	r20, 0x0b	; 11
 1c0:	87 70       	andi	r24, 0x07	; 7
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_Z4loopv+0x6c>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <_Z4loopv+0x68>
 1d2:	cb 01       	movw	r24, r22
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8b b9       	out	0x0b, r24	; 11
 1da:	0e c0       	rjmp	.+28     	; 0x1f8 <_Z4loopv+0x96>
 1dc:	45 b1       	in	r20, 0x05	; 5
 1de:	87 70       	andi	r24, 0x07	; 7
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	d9 01       	movw	r26, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <_Z4loopv+0x8a>
 1e8:	aa 0f       	add	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	8a 95       	dec	r24
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <_Z4loopv+0x86>
 1f0:	cd 01       	movw	r24, r26
 1f2:	80 95       	com	r24
 1f4:	84 23       	and	r24, r20
 1f6:	85 b9       	out	0x05, r24	; 5
				
				while (!port::read(_echoPort));
 1f8:	41 81       	ldd	r20, Z+1	; 0x01
 1fa:	84 2f       	mov	r24, r20
 1fc:	87 70       	andi	r24, 0x07	; 7
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <_Z4loopv+0xa6>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <_Z4loopv+0xa2>
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
		}
		
		inline bool read(EPort port) {
			return _GET_BIT(fcrin(port), nmr(port));
 20c:	48 30       	cpi	r20, 0x08	; 8
 20e:	10 f4       	brcc	.+4      	; 0x214 <_Z4loopv+0xb2>
 210:	89 b1       	in	r24, 0x09	; 9
 212:	01 c0       	rjmp	.+2      	; 0x216 <_Z4loopv+0xb4>
 214:	83 b1       	in	r24, 0x03	; 3
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	82 23       	and	r24, r18
 21a:	93 23       	and	r25, r19
 21c:	89 2b       	or	r24, r25
 21e:	b1 f3       	breq	.-20     	; 0x20c <_Z4loopv+0xaa>
				TCNT1 = 0;
 220:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 224:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
				
				while (port::read(_echoPort));
 228:	41 81       	ldd	r20, Z+1	; 0x01
 22a:	84 2f       	mov	r24, r20
 22c:	87 70       	andi	r24, 0x07	; 7
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <_Z4loopv+0xd6>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_Z4loopv+0xd2>
 23c:	48 30       	cpi	r20, 0x08	; 8
 23e:	10 f4       	brcc	.+4      	; 0x244 <_Z4loopv+0xe2>
 240:	89 b1       	in	r24, 0x09	; 9
 242:	01 c0       	rjmp	.+2      	; 0x246 <_Z4loopv+0xe4>
 244:	83 b1       	in	r24, 0x03	; 3
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	82 23       	and	r24, r18
 24a:	93 23       	and	r25, r19
 24c:	89 2b       	or	r24, r25
 24e:	b1 f7       	brne	.-20     	; 0x23c <_Z4loopv+0xda>
				count = TCNT1;
 250:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 254:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 258:	33 83       	std	Z+3, r19	; 0x03
 25a:	22 83       	std	Z+2, r18	; 0x02
				
				uint16 ret = (uint16)(count / 116);
 25c:	af e9       	ldi	r26, 0x9F	; 159
 25e:	b6 e4       	ldi	r27, 0x46	; 70
 260:	0e 94 2a 02 	call	0x454	; 0x454 <__umulhisi3>
 264:	ec 01       	movw	r28, r24
 266:	d6 95       	lsr	r29
 268:	c7 95       	ror	r28
 26a:	d2 95       	swap	r29
 26c:	c2 95       	swap	r28
 26e:	cf 70       	andi	r28, 0x0F	; 15
 270:	cd 27       	eor	r28, r29
 272:	df 70       	andi	r29, 0x0F	; 15
 274:	cd 27       	eor	r28, r29
				printf("\ndistancia: %d\n", ret);
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	9f 93       	push	r25
 280:	8f 93       	push	r24
 282:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <printf>
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	8c e3       	ldi	r24, 0x3C	; 60
 290:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	af e9       	ldi	r26, 0x9F	; 159
 294:	bf e0       	ldi	r27, 0x0F	; 15
 296:	11 97       	sbiw	r26, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <_Z4loopv+0x134>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <_Z4loopv+0x13a>
 29c:	00 00       	nop
 29e:	01 97       	sbiw	r24, 0x01	; 1
		inline uint8 clear_bit(byte w, uint8 pos) {
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			while (time > 0) {
 2a0:	c1 f7       	brne	.-16     	; 0x292 <_Z4loopv+0x130>
 2a2:	24 e6       	ldi	r18, 0x64	; 100
 2a4:	2c 9f       	mul	r18, r28
 2a6:	c0 01       	movw	r24, r0
 2a8:	2d 9f       	mul	r18, r29
 2aa:	90 0d       	add	r25, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <led>
 2b2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <led+0x1>
			
			public: inline bool IsOn() { return is_enabled(_port); }
			public: inline void TurnOn() { enable(_port); }
			public: inline void TurnOn(bool b) { enable(_port, b); }
			public: inline void TurnOff() { disable(_port);	}
			public: inline void Toggle() { if (is_enabled(_port)) disable(_port); else enable(_port); }
 2b6:	20 81       	ld	r18, Z
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
 2b8:	28 30       	cpi	r18, 0x08	; 8
 2ba:	60 f4       	brcc	.+24     	; 0x2d4 <_Z4loopv+0x172>
 2bc:	4b b1       	in	r20, 0x0b	; 11
 2be:	27 70       	andi	r18, 0x07	; 7
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <_Z4loopv+0x168>
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <_Z4loopv+0x164>
 2ce:	40 fd       	sbrc	r20, 0
 2d0:	0d c0       	rjmp	.+26     	; 0x2ec <_Z4loopv+0x18a>
 2d2:	85 c0       	rjmp	.+266    	; 0x3de <_Z4loopv+0x27c>
 2d4:	45 b1       	in	r20, 0x05	; 5
 2d6:	27 70       	andi	r18, 0x07	; 7
 2d8:	50 e0       	ldi	r21, 0x00	; 0
 2da:	02 2e       	mov	r0, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <_Z4loopv+0x180>
 2de:	55 95       	asr	r21
 2e0:	47 95       	ror	r20
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <_Z4loopv+0x17c>
 2e6:	40 fd       	sbrc	r20, 0
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <_Z4loopv+0x1a6>
 2ea:	6c c0       	rjmp	.+216    	; 0x3c4 <_Z4loopv+0x262>
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
 2ec:	6b b1       	in	r22, 0x0b	; 11
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	da 01       	movw	r26, r20
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_Z4loopv+0x198>
 2f6:	aa 0f       	add	r26, r26
 2f8:	bb 1f       	adc	r27, r27
 2fa:	2a 95       	dec	r18
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <_Z4loopv+0x194>
 2fe:	9d 01       	movw	r18, r26
 300:	20 95       	com	r18
 302:	26 23       	and	r18, r22
 304:	2b b9       	out	0x0b, r18	; 11
 306:	0d c0       	rjmp	.+26     	; 0x322 <_Z4loopv+0x1c0>
 308:	65 b1       	in	r22, 0x05	; 5
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	da 01       	movw	r26, r20
 310:	02 c0       	rjmp	.+4      	; 0x316 <_Z4loopv+0x1b4>
 312:	aa 0f       	add	r26, r26
 314:	bb 1f       	adc	r27, r27
 316:	2a 95       	dec	r18
 318:	e2 f7       	brpl	.-8      	; 0x312 <_Z4loopv+0x1b0>
 31a:	9d 01       	movw	r18, r26
 31c:	20 95       	com	r18
 31e:	26 23       	and	r18, r22
 320:	25 b9       	out	0x05, r18	; 5
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	51 f0       	breq	.+20     	; 0x33a <_Z4loopv+0x1d8>
 326:	9c 01       	movw	r18, r24
 328:	af e9       	ldi	r26, 0x9F	; 159
 32a:	bf e0       	ldi	r27, 0x0F	; 15
 32c:	11 97       	sbiw	r26, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <_Z4loopv+0x1ca>
 330:	00 c0       	rjmp	.+0      	; 0x332 <_Z4loopv+0x1d0>
 332:	00 00       	nop
				_delay_ms(1);
				time--;
 334:	21 50       	subi	r18, 0x01	; 1
 336:	31 09       	sbc	r19, r1
		inline uint8 clear_bit(byte w, uint8 pos) {
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			while (time > 0) {
 338:	b9 f7       	brne	.-18     	; 0x328 <_Z4loopv+0x1c6>
 33a:	20 81       	ld	r18, Z
		}
		
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
 33c:	28 30       	cpi	r18, 0x08	; 8
 33e:	60 f4       	brcc	.+24     	; 0x358 <_Z4loopv+0x1f6>
 340:	4b b1       	in	r20, 0x0b	; 11
 342:	27 70       	andi	r18, 0x07	; 7
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	02 2e       	mov	r0, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <_Z4loopv+0x1ec>
 34a:	55 95       	asr	r21
 34c:	47 95       	ror	r20
 34e:	0a 94       	dec	r0
 350:	e2 f7       	brpl	.-8      	; 0x34a <_Z4loopv+0x1e8>
 352:	40 fd       	sbrc	r20, 0
 354:	0d c0       	rjmp	.+26     	; 0x370 <_Z4loopv+0x20e>
 356:	50 c0       	rjmp	.+160    	; 0x3f8 <_Z4loopv+0x296>
 358:	45 b1       	in	r20, 0x05	; 5
 35a:	27 70       	andi	r18, 0x07	; 7
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	02 2e       	mov	r0, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <_Z4loopv+0x204>
 362:	55 95       	asr	r21
 364:	47 95       	ror	r20
 366:	0a 94       	dec	r0
 368:	e2 f7       	brpl	.-8      	; 0x362 <_Z4loopv+0x200>
 36a:	40 fd       	sbrc	r20, 0
 36c:	0f c0       	rjmp	.+30     	; 0x38c <_Z4loopv+0x22a>
 36e:	51 c0       	rjmp	.+162    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
 370:	6b b1       	in	r22, 0x0b	; 11
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	50 e0       	ldi	r21, 0x00	; 0
 376:	fa 01       	movw	r30, r20
 378:	02 c0       	rjmp	.+4      	; 0x37e <_Z4loopv+0x21c>
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	2a 95       	dec	r18
 380:	e2 f7       	brpl	.-8      	; 0x37a <_Z4loopv+0x218>
 382:	9f 01       	movw	r18, r30
 384:	20 95       	com	r18
 386:	26 23       	and	r18, r22
 388:	2b b9       	out	0x0b, r18	; 11
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <_Z4loopv+0x244>
 38c:	65 b1       	in	r22, 0x05	; 5
 38e:	41 e0       	ldi	r20, 0x01	; 1
 390:	50 e0       	ldi	r21, 0x00	; 0
 392:	da 01       	movw	r26, r20
 394:	02 c0       	rjmp	.+4      	; 0x39a <_Z4loopv+0x238>
 396:	aa 0f       	add	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	2a 95       	dec	r18
 39c:	e2 f7       	brpl	.-8      	; 0x396 <_Z4loopv+0x234>
 39e:	9d 01       	movw	r18, r26
 3a0:	20 95       	com	r18
 3a2:	26 23       	and	r18, r22
 3a4:	25 b9       	out	0x05, r18	; 5
 3a6:	00 97       	sbiw	r24, 0x00	; 0
 3a8:	09 f4       	brne	.+2      	; 0x3ac <_Z4loopv+0x24a>
 3aa:	40 c0       	rjmp	.+128    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3ac:	ef e9       	ldi	r30, 0x9F	; 159
 3ae:	ff e0       	ldi	r31, 0x0F	; 15
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <_Z4loopv+0x24e>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <_Z4loopv+0x254>
 3b6:	00 00       	nop
				_delay_ms(1);
				time--;
 3b8:	01 97       	sbiw	r24, 0x01	; 1
		inline uint8 clear_bit(byte w, uint8 pos) {
			return _CLEAR_BIT(w, pos);
		}
		
		inline void delay_ms(uint16 time) {
			while (time > 0) {
 3ba:	c1 f7       	brne	.-16     	; 0x3ac <_Z4loopv+0x24a>
 3bc:	37 c0       	rjmp	.+110    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
void setup() {
	led = new component::Led(P13);
	sonar = new component::Sonar(P2, P3);
}

void loop() {
 3be:	8a e0       	ldi	r24, 0x0A	; 10
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	f4 ce       	rjmp	.-536    	; 0x1ac <_Z4loopv+0x4a>
		inline EMode get_mode(EPort port) {
			return (EMode)_GET_BIT(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
 3c4:	65 b1       	in	r22, 0x05	; 5
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	da 01       	movw	r26, r20
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <_Z4loopv+0x270>
 3ce:	aa 0f       	add	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	2a 95       	dec	r18
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <_Z4loopv+0x26c>
 3d6:	9d 01       	movw	r18, r26
 3d8:	26 2b       	or	r18, r22
 3da:	25 b9       	out	0x05, r18	; 5
 3dc:	a2 cf       	rjmp	.-188    	; 0x322 <_Z4loopv+0x1c0>
 3de:	6b b1       	in	r22, 0x0b	; 11
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	da 01       	movw	r26, r20
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <_Z4loopv+0x28a>
 3e8:	aa 0f       	add	r26, r26
 3ea:	bb 1f       	adc	r27, r27
 3ec:	2a 95       	dec	r18
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <_Z4loopv+0x286>
 3f0:	9d 01       	movw	r18, r26
 3f2:	26 2b       	or	r18, r22
 3f4:	2b b9       	out	0x0b, r18	; 11
 3f6:	95 cf       	rjmp	.-214    	; 0x322 <_Z4loopv+0x1c0>
 3f8:	6b b1       	in	r22, 0x0b	; 11
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	50 e0       	ldi	r21, 0x00	; 0
 3fe:	fa 01       	movw	r30, r20
 400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	2a 95       	dec	r18
 408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 40a:	9f 01       	movw	r18, r30
 40c:	26 2b       	or	r18, r22
 40e:	2b b9       	out	0x0b, r18	; 11
 410:	ca cf       	rjmp	.-108    	; 0x3a6 <_Z4loopv+0x244>
 412:	65 b1       	in	r22, 0x05	; 5
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	da 01       	movw	r26, r20
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41c:	aa 0f       	add	r26, r26
 41e:	bb 1f       	adc	r27, r27
 420:	2a 95       	dec	r18
 422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 424:	9d 01       	movw	r18, r26
 426:	26 2b       	or	r18, r22
 428:	25 b9       	out	0x05, r18	; 5
 42a:	bd cf       	rjmp	.-134    	; 0x3a6 <_Z4loopv+0x244>
	led->Blink(sonar->ReadDistance() * 100);
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <main>:
void loop();

extern "C" {
	int main() {
		
		DDRB  = 0b00000000;
 432:	14 b8       	out	0x04, r1	; 4
		DDRD  = 0b00000000;
 434:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0b11111111;
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b11111111;
 43a:	8b b9       	out	0x0b, r24	; 11
		
		uart_init();
 43c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9uart_initv>
		enum EPrescaler {
			PS0 = CS00, PS1 = CS01, PS2 = CS02
		};
		
		inline void prescaler(EPrescaler p) {
			_SET_BIT(TCCR1B, p);
 440:	e1 e8       	ldi	r30, 0x81	; 129
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	82 60       	ori	r24, 0x02	; 2
 448:	80 83       	st	Z, r24
		zeduino::clock::prescaler(zeduino::clock::PS1);
		setup();
 44a:	0e 94 95 00 	call	0x12a	; 0x12a <_Z5setupv>
		while (true) loop();
 44e:	0e 94 b1 00 	call	0x162	; 0x162 <_Z4loopv>
 452:	fd cf       	rjmp	.-6      	; 0x44e <main+0x1c>

00000454 <__umulhisi3>:
 454:	a2 9f       	mul	r26, r18
 456:	b0 01       	movw	r22, r0
 458:	b3 9f       	mul	r27, r19
 45a:	c0 01       	movw	r24, r0
 45c:	a3 9f       	mul	r26, r19
 45e:	70 0d       	add	r23, r0
 460:	81 1d       	adc	r24, r1
 462:	11 24       	eor	r1, r1
 464:	91 1d       	adc	r25, r1
 466:	b2 9f       	mul	r27, r18
 468:	70 0d       	add	r23, r0
 46a:	81 1d       	adc	r24, r1
 46c:	11 24       	eor	r1, r1
 46e:	91 1d       	adc	r25, r1
 470:	08 95       	ret

00000472 <malloc>:
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	91 05       	cpc	r25, r1
 47e:	10 f4       	brcc	.+4      	; 0x484 <malloc+0x12>
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__flp>
 488:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__flp+0x1>
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	30 97       	sbiw	r30, 0x00	; 0
 496:	19 f1       	breq	.+70     	; 0x4de <malloc+0x6c>
 498:	40 81       	ld	r20, Z
 49a:	51 81       	ldd	r21, Z+1	; 0x01
 49c:	02 81       	ldd	r16, Z+2	; 0x02
 49e:	13 81       	ldd	r17, Z+3	; 0x03
 4a0:	48 17       	cp	r20, r24
 4a2:	59 07       	cpc	r21, r25
 4a4:	c8 f0       	brcs	.+50     	; 0x4d8 <malloc+0x66>
 4a6:	84 17       	cp	r24, r20
 4a8:	95 07       	cpc	r25, r21
 4aa:	69 f4       	brne	.+26     	; 0x4c6 <malloc+0x54>
 4ac:	10 97       	sbiw	r26, 0x00	; 0
 4ae:	31 f0       	breq	.+12     	; 0x4bc <malloc+0x4a>
 4b0:	12 96       	adiw	r26, 0x02	; 2
 4b2:	0c 93       	st	X, r16
 4b4:	12 97       	sbiw	r26, 0x02	; 2
 4b6:	13 96       	adiw	r26, 0x03	; 3
 4b8:	1c 93       	st	X, r17
 4ba:	27 c0       	rjmp	.+78     	; 0x50a <malloc+0x98>
 4bc:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <__flp>
 4c0:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <__flp+0x1>
 4c4:	22 c0       	rjmp	.+68     	; 0x50a <malloc+0x98>
 4c6:	21 15       	cp	r18, r1
 4c8:	31 05       	cpc	r19, r1
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <malloc+0x60>
 4cc:	42 17       	cp	r20, r18
 4ce:	53 07       	cpc	r21, r19
 4d0:	18 f4       	brcc	.+6      	; 0x4d8 <malloc+0x66>
 4d2:	9a 01       	movw	r18, r20
 4d4:	bd 01       	movw	r22, r26
 4d6:	ef 01       	movw	r28, r30
 4d8:	df 01       	movw	r26, r30
 4da:	f8 01       	movw	r30, r16
 4dc:	db cf       	rjmp	.-74     	; 0x494 <malloc+0x22>
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	f9 f0       	breq	.+62     	; 0x522 <malloc+0xb0>
 4e4:	28 1b       	sub	r18, r24
 4e6:	39 0b       	sbc	r19, r25
 4e8:	24 30       	cpi	r18, 0x04	; 4
 4ea:	31 05       	cpc	r19, r1
 4ec:	80 f4       	brcc	.+32     	; 0x50e <malloc+0x9c>
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	9b 81       	ldd	r25, Y+3	; 0x03
 4f2:	61 15       	cp	r22, r1
 4f4:	71 05       	cpc	r23, r1
 4f6:	21 f0       	breq	.+8      	; 0x500 <malloc+0x8e>
 4f8:	fb 01       	movw	r30, r22
 4fa:	93 83       	std	Z+3, r25	; 0x03
 4fc:	82 83       	std	Z+2, r24	; 0x02
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <malloc+0x96>
 500:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__flp+0x1>
 504:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__flp>
 508:	fe 01       	movw	r30, r28
 50a:	32 96       	adiw	r30, 0x02	; 2
 50c:	44 c0       	rjmp	.+136    	; 0x596 <malloc+0x124>
 50e:	fe 01       	movw	r30, r28
 510:	e2 0f       	add	r30, r18
 512:	f3 1f       	adc	r31, r19
 514:	81 93       	st	Z+, r24
 516:	91 93       	st	Z+, r25
 518:	22 50       	subi	r18, 0x02	; 2
 51a:	31 09       	sbc	r19, r1
 51c:	39 83       	std	Y+1, r19	; 0x01
 51e:	28 83       	st	Y, r18
 520:	3a c0       	rjmp	.+116    	; 0x596 <malloc+0x124>
 522:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
 526:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
 52a:	23 2b       	or	r18, r19
 52c:	41 f4       	brne	.+16     	; 0x53e <malloc+0xcc>
 52e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 532:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 536:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__brkval+0x1>
 53a:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__brkval>
 53e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 542:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	41 f4       	brne	.+16     	; 0x55c <malloc+0xea>
 54c:	2d b7       	in	r18, 0x3d	; 61
 54e:	3e b7       	in	r19, 0x3e	; 62
 550:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 554:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 558:	24 1b       	sub	r18, r20
 55a:	35 0b       	sbc	r19, r21
 55c:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__brkval>
 560:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <__brkval+0x1>
 564:	e2 17       	cp	r30, r18
 566:	f3 07       	cpc	r31, r19
 568:	a0 f4       	brcc	.+40     	; 0x592 <malloc+0x120>
 56a:	2e 1b       	sub	r18, r30
 56c:	3f 0b       	sbc	r19, r31
 56e:	28 17       	cp	r18, r24
 570:	39 07       	cpc	r19, r25
 572:	78 f0       	brcs	.+30     	; 0x592 <malloc+0x120>
 574:	ac 01       	movw	r20, r24
 576:	4e 5f       	subi	r20, 0xFE	; 254
 578:	5f 4f       	sbci	r21, 0xFF	; 255
 57a:	24 17       	cp	r18, r20
 57c:	35 07       	cpc	r19, r21
 57e:	48 f0       	brcs	.+18     	; 0x592 <malloc+0x120>
 580:	4e 0f       	add	r20, r30
 582:	5f 1f       	adc	r21, r31
 584:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__brkval+0x1>
 588:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__brkval>
 58c:	81 93       	st	Z+, r24
 58e:	91 93       	st	Z+, r25
 590:	02 c0       	rjmp	.+4      	; 0x596 <malloc+0x124>
 592:	e0 e0       	ldi	r30, 0x00	; 0
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	cf 01       	movw	r24, r30
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	08 95       	ret

000005a2 <free>:
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	00 97       	sbiw	r24, 0x00	; 0
 5a8:	09 f4       	brne	.+2      	; 0x5ac <free+0xa>
 5aa:	81 c0       	rjmp	.+258    	; 0x6ae <free+0x10c>
 5ac:	fc 01       	movw	r30, r24
 5ae:	32 97       	sbiw	r30, 0x02	; 2
 5b0:	13 82       	std	Z+3, r1	; 0x03
 5b2:	12 82       	std	Z+2, r1	; 0x02
 5b4:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__flp>
 5b8:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__flp+0x1>
 5bc:	10 97       	sbiw	r26, 0x00	; 0
 5be:	81 f4       	brne	.+32     	; 0x5e0 <free+0x3e>
 5c0:	20 81       	ld	r18, Z
 5c2:	31 81       	ldd	r19, Z+1	; 0x01
 5c4:	82 0f       	add	r24, r18
 5c6:	93 1f       	adc	r25, r19
 5c8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
 5cc:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
 5d0:	28 17       	cp	r18, r24
 5d2:	39 07       	cpc	r19, r25
 5d4:	51 f5       	brne	.+84     	; 0x62a <free+0x88>
 5d6:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <__brkval+0x1>
 5da:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <__brkval>
 5de:	67 c0       	rjmp	.+206    	; 0x6ae <free+0x10c>
 5e0:	ed 01       	movw	r28, r26
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	ce 17       	cp	r28, r30
 5e8:	df 07       	cpc	r29, r31
 5ea:	40 f4       	brcc	.+16     	; 0x5fc <free+0x5a>
 5ec:	4a 81       	ldd	r20, Y+2	; 0x02
 5ee:	5b 81       	ldd	r21, Y+3	; 0x03
 5f0:	9e 01       	movw	r18, r28
 5f2:	41 15       	cp	r20, r1
 5f4:	51 05       	cpc	r21, r1
 5f6:	f1 f0       	breq	.+60     	; 0x634 <free+0x92>
 5f8:	ea 01       	movw	r28, r20
 5fa:	f5 cf       	rjmp	.-22     	; 0x5e6 <free+0x44>
 5fc:	d3 83       	std	Z+3, r29	; 0x03
 5fe:	c2 83       	std	Z+2, r28	; 0x02
 600:	40 81       	ld	r20, Z
 602:	51 81       	ldd	r21, Z+1	; 0x01
 604:	84 0f       	add	r24, r20
 606:	95 1f       	adc	r25, r21
 608:	c8 17       	cp	r28, r24
 60a:	d9 07       	cpc	r29, r25
 60c:	59 f4       	brne	.+22     	; 0x624 <free+0x82>
 60e:	88 81       	ld	r24, Y
 610:	99 81       	ldd	r25, Y+1	; 0x01
 612:	84 0f       	add	r24, r20
 614:	95 1f       	adc	r25, r21
 616:	02 96       	adiw	r24, 0x02	; 2
 618:	91 83       	std	Z+1, r25	; 0x01
 61a:	80 83       	st	Z, r24
 61c:	8a 81       	ldd	r24, Y+2	; 0x02
 61e:	9b 81       	ldd	r25, Y+3	; 0x03
 620:	93 83       	std	Z+3, r25	; 0x03
 622:	82 83       	std	Z+2, r24	; 0x02
 624:	21 15       	cp	r18, r1
 626:	31 05       	cpc	r19, r1
 628:	29 f4       	brne	.+10     	; 0x634 <free+0x92>
 62a:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__flp+0x1>
 62e:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__flp>
 632:	3d c0       	rjmp	.+122    	; 0x6ae <free+0x10c>
 634:	e9 01       	movw	r28, r18
 636:	fb 83       	std	Y+3, r31	; 0x03
 638:	ea 83       	std	Y+2, r30	; 0x02
 63a:	49 91       	ld	r20, Y+
 63c:	59 91       	ld	r21, Y+
 63e:	c4 0f       	add	r28, r20
 640:	d5 1f       	adc	r29, r21
 642:	ec 17       	cp	r30, r28
 644:	fd 07       	cpc	r31, r29
 646:	61 f4       	brne	.+24     	; 0x660 <free+0xbe>
 648:	80 81       	ld	r24, Z
 64a:	91 81       	ldd	r25, Z+1	; 0x01
 64c:	84 0f       	add	r24, r20
 64e:	95 1f       	adc	r25, r21
 650:	02 96       	adiw	r24, 0x02	; 2
 652:	e9 01       	movw	r28, r18
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	88 83       	st	Y, r24
 658:	82 81       	ldd	r24, Z+2	; 0x02
 65a:	93 81       	ldd	r25, Z+3	; 0x03
 65c:	9b 83       	std	Y+3, r25	; 0x03
 65e:	8a 83       	std	Y+2, r24	; 0x02
 660:	e0 e0       	ldi	r30, 0x00	; 0
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	12 96       	adiw	r26, 0x02	; 2
 666:	8d 91       	ld	r24, X+
 668:	9c 91       	ld	r25, X
 66a:	13 97       	sbiw	r26, 0x03	; 3
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	19 f0       	breq	.+6      	; 0x676 <free+0xd4>
 670:	fd 01       	movw	r30, r26
 672:	dc 01       	movw	r26, r24
 674:	f7 cf       	rjmp	.-18     	; 0x664 <free+0xc2>
 676:	8d 91       	ld	r24, X+
 678:	9c 91       	ld	r25, X
 67a:	11 97       	sbiw	r26, 0x01	; 1
 67c:	9d 01       	movw	r18, r26
 67e:	2e 5f       	subi	r18, 0xFE	; 254
 680:	3f 4f       	sbci	r19, 0xFF	; 255
 682:	82 0f       	add	r24, r18
 684:	93 1f       	adc	r25, r19
 686:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__brkval>
 68a:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__brkval+0x1>
 68e:	28 17       	cp	r18, r24
 690:	39 07       	cpc	r19, r25
 692:	69 f4       	brne	.+26     	; 0x6ae <free+0x10c>
 694:	30 97       	sbiw	r30, 0x00	; 0
 696:	29 f4       	brne	.+10     	; 0x6a2 <free+0x100>
 698:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__flp+0x1>
 69c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__flp>
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <free+0x104>
 6a2:	13 82       	std	Z+3, r1	; 0x03
 6a4:	12 82       	std	Z+2, r1	; 0x02
 6a6:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <__brkval+0x1>
 6aa:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <__brkval>
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <printf>:
 6b4:	a0 e0       	ldi	r26, 0x00	; 0
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	e0 e6       	ldi	r30, 0x60	; 96
 6ba:	f3 e0       	ldi	r31, 0x03	; 3
 6bc:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__prologue_saves__+0x20>
 6c0:	ae 01       	movw	r20, r28
 6c2:	4b 5f       	subi	r20, 0xFB	; 251
 6c4:	5f 4f       	sbci	r21, 0xFF	; 255
 6c6:	fa 01       	movw	r30, r20
 6c8:	61 91       	ld	r22, Z+
 6ca:	71 91       	ld	r23, Z+
 6cc:	af 01       	movw	r20, r30
 6ce:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__iob+0x2>
 6d2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__iob+0x3>
 6d6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vfprintf>
 6da:	e2 e0       	ldi	r30, 0x02	; 2
 6dc:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__epilogue_restores__+0x20>

000006e0 <vfprintf>:
 6e0:	ab e0       	ldi	r26, 0x0B	; 11
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	e6 e7       	ldi	r30, 0x76	; 118
 6e6:	f3 e0       	ldi	r31, 0x03	; 3
 6e8:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__prologue_saves__>
 6ec:	6c 01       	movw	r12, r24
 6ee:	7b 01       	movw	r14, r22
 6f0:	8a 01       	movw	r16, r20
 6f2:	fc 01       	movw	r30, r24
 6f4:	17 82       	std	Z+7, r1	; 0x07
 6f6:	16 82       	std	Z+6, r1	; 0x06
 6f8:	83 81       	ldd	r24, Z+3	; 0x03
 6fa:	81 ff       	sbrs	r24, 1
 6fc:	cc c1       	rjmp	.+920    	; 0xa96 <__stack+0x197>
 6fe:	ce 01       	movw	r24, r28
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	3c 01       	movw	r6, r24
 704:	f6 01       	movw	r30, r12
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	f7 01       	movw	r30, r14
 70a:	93 fd       	sbrc	r25, 3
 70c:	85 91       	lpm	r24, Z+
 70e:	93 ff       	sbrs	r25, 3
 710:	81 91       	ld	r24, Z+
 712:	7f 01       	movw	r14, r30
 714:	88 23       	and	r24, r24
 716:	09 f4       	brne	.+2      	; 0x71a <vfprintf+0x3a>
 718:	ba c1       	rjmp	.+884    	; 0xa8e <__stack+0x18f>
 71a:	85 32       	cpi	r24, 0x25	; 37
 71c:	39 f4       	brne	.+14     	; 0x72c <vfprintf+0x4c>
 71e:	93 fd       	sbrc	r25, 3
 720:	85 91       	lpm	r24, Z+
 722:	93 ff       	sbrs	r25, 3
 724:	81 91       	ld	r24, Z+
 726:	7f 01       	movw	r14, r30
 728:	85 32       	cpi	r24, 0x25	; 37
 72a:	29 f4       	brne	.+10     	; 0x736 <vfprintf+0x56>
 72c:	b6 01       	movw	r22, r12
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 734:	e7 cf       	rjmp	.-50     	; 0x704 <vfprintf+0x24>
 736:	91 2c       	mov	r9, r1
 738:	21 2c       	mov	r2, r1
 73a:	31 2c       	mov	r3, r1
 73c:	ff e1       	ldi	r31, 0x1F	; 31
 73e:	f3 15       	cp	r31, r3
 740:	d8 f0       	brcs	.+54     	; 0x778 <vfprintf+0x98>
 742:	8b 32       	cpi	r24, 0x2B	; 43
 744:	79 f0       	breq	.+30     	; 0x764 <vfprintf+0x84>
 746:	38 f4       	brcc	.+14     	; 0x756 <vfprintf+0x76>
 748:	80 32       	cpi	r24, 0x20	; 32
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x8a>
 74c:	83 32       	cpi	r24, 0x23	; 35
 74e:	a1 f4       	brne	.+40     	; 0x778 <vfprintf+0x98>
 750:	23 2d       	mov	r18, r3
 752:	20 61       	ori	r18, 0x10	; 16
 754:	1d c0       	rjmp	.+58     	; 0x790 <vfprintf+0xb0>
 756:	8d 32       	cpi	r24, 0x2D	; 45
 758:	61 f0       	breq	.+24     	; 0x772 <vfprintf+0x92>
 75a:	80 33       	cpi	r24, 0x30	; 48
 75c:	69 f4       	brne	.+26     	; 0x778 <vfprintf+0x98>
 75e:	23 2d       	mov	r18, r3
 760:	21 60       	ori	r18, 0x01	; 1
 762:	16 c0       	rjmp	.+44     	; 0x790 <vfprintf+0xb0>
 764:	83 2d       	mov	r24, r3
 766:	82 60       	ori	r24, 0x02	; 2
 768:	38 2e       	mov	r3, r24
 76a:	e3 2d       	mov	r30, r3
 76c:	e4 60       	ori	r30, 0x04	; 4
 76e:	3e 2e       	mov	r3, r30
 770:	2a c0       	rjmp	.+84     	; 0x7c6 <vfprintf+0xe6>
 772:	f3 2d       	mov	r31, r3
 774:	f8 60       	ori	r31, 0x08	; 8
 776:	1d c0       	rjmp	.+58     	; 0x7b2 <vfprintf+0xd2>
 778:	37 fc       	sbrc	r3, 7
 77a:	2d c0       	rjmp	.+90     	; 0x7d6 <vfprintf+0xf6>
 77c:	20 ed       	ldi	r18, 0xD0	; 208
 77e:	28 0f       	add	r18, r24
 780:	2a 30       	cpi	r18, 0x0A	; 10
 782:	40 f0       	brcs	.+16     	; 0x794 <vfprintf+0xb4>
 784:	8e 32       	cpi	r24, 0x2E	; 46
 786:	b9 f4       	brne	.+46     	; 0x7b6 <vfprintf+0xd6>
 788:	36 fc       	sbrc	r3, 6
 78a:	81 c1       	rjmp	.+770    	; 0xa8e <__stack+0x18f>
 78c:	23 2d       	mov	r18, r3
 78e:	20 64       	ori	r18, 0x40	; 64
 790:	32 2e       	mov	r3, r18
 792:	19 c0       	rjmp	.+50     	; 0x7c6 <vfprintf+0xe6>
 794:	36 fe       	sbrs	r3, 6
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0xc4>
 798:	8a e0       	ldi	r24, 0x0A	; 10
 79a:	98 9e       	mul	r9, r24
 79c:	20 0d       	add	r18, r0
 79e:	11 24       	eor	r1, r1
 7a0:	92 2e       	mov	r9, r18
 7a2:	11 c0       	rjmp	.+34     	; 0x7c6 <vfprintf+0xe6>
 7a4:	ea e0       	ldi	r30, 0x0A	; 10
 7a6:	2e 9e       	mul	r2, r30
 7a8:	20 0d       	add	r18, r0
 7aa:	11 24       	eor	r1, r1
 7ac:	22 2e       	mov	r2, r18
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f0 62       	ori	r31, 0x20	; 32
 7b2:	3f 2e       	mov	r3, r31
 7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <vfprintf+0xe6>
 7b6:	8c 36       	cpi	r24, 0x6C	; 108
 7b8:	21 f4       	brne	.+8      	; 0x7c2 <vfprintf+0xe2>
 7ba:	83 2d       	mov	r24, r3
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	38 2e       	mov	r3, r24
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0xe6>
 7c2:	88 36       	cpi	r24, 0x68	; 104
 7c4:	41 f4       	brne	.+16     	; 0x7d6 <vfprintf+0xf6>
 7c6:	f7 01       	movw	r30, r14
 7c8:	93 fd       	sbrc	r25, 3
 7ca:	85 91       	lpm	r24, Z+
 7cc:	93 ff       	sbrs	r25, 3
 7ce:	81 91       	ld	r24, Z+
 7d0:	7f 01       	movw	r14, r30
 7d2:	81 11       	cpse	r24, r1
 7d4:	b3 cf       	rjmp	.-154    	; 0x73c <vfprintf+0x5c>
 7d6:	98 2f       	mov	r25, r24
 7d8:	9f 7d       	andi	r25, 0xDF	; 223
 7da:	95 54       	subi	r25, 0x45	; 69
 7dc:	93 30       	cpi	r25, 0x03	; 3
 7de:	28 f4       	brcc	.+10     	; 0x7ea <vfprintf+0x10a>
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	9f e3       	ldi	r25, 0x3F	; 63
 7e6:	99 83       	std	Y+1, r25	; 0x01
 7e8:	0d c0       	rjmp	.+26     	; 0x804 <vfprintf+0x124>
 7ea:	83 36       	cpi	r24, 0x63	; 99
 7ec:	31 f0       	breq	.+12     	; 0x7fa <vfprintf+0x11a>
 7ee:	83 37       	cpi	r24, 0x73	; 115
 7f0:	71 f0       	breq	.+28     	; 0x80e <vfprintf+0x12e>
 7f2:	83 35       	cpi	r24, 0x53	; 83
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <vfprintf+0x118>
 7f6:	59 c0       	rjmp	.+178    	; 0x8aa <vfprintf+0x1ca>
 7f8:	21 c0       	rjmp	.+66     	; 0x83c <vfprintf+0x15c>
 7fa:	f8 01       	movw	r30, r16
 7fc:	80 81       	ld	r24, Z
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	0e 5f       	subi	r16, 0xFE	; 254
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	88 24       	eor	r8, r8
 806:	83 94       	inc	r8
 808:	91 2c       	mov	r9, r1
 80a:	53 01       	movw	r10, r6
 80c:	13 c0       	rjmp	.+38     	; 0x834 <vfprintf+0x154>
 80e:	28 01       	movw	r4, r16
 810:	f2 e0       	ldi	r31, 0x02	; 2
 812:	4f 0e       	add	r4, r31
 814:	51 1c       	adc	r5, r1
 816:	f8 01       	movw	r30, r16
 818:	a0 80       	ld	r10, Z
 81a:	b1 80       	ldd	r11, Z+1	; 0x01
 81c:	36 fe       	sbrs	r3, 6
 81e:	03 c0       	rjmp	.+6      	; 0x826 <vfprintf+0x146>
 820:	69 2d       	mov	r22, r9
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <vfprintf+0x14a>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c5 01       	movw	r24, r10
 82c:	0e 94 5c 05 	call	0xab8	; 0xab8 <strnlen>
 830:	4c 01       	movw	r8, r24
 832:	82 01       	movw	r16, r4
 834:	f3 2d       	mov	r31, r3
 836:	ff 77       	andi	r31, 0x7F	; 127
 838:	3f 2e       	mov	r3, r31
 83a:	16 c0       	rjmp	.+44     	; 0x868 <vfprintf+0x188>
 83c:	28 01       	movw	r4, r16
 83e:	22 e0       	ldi	r18, 0x02	; 2
 840:	42 0e       	add	r4, r18
 842:	51 1c       	adc	r5, r1
 844:	f8 01       	movw	r30, r16
 846:	a0 80       	ld	r10, Z
 848:	b1 80       	ldd	r11, Z+1	; 0x01
 84a:	36 fe       	sbrs	r3, 6
 84c:	03 c0       	rjmp	.+6      	; 0x854 <vfprintf+0x174>
 84e:	69 2d       	mov	r22, r9
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x178>
 854:	6f ef       	ldi	r22, 0xFF	; 255
 856:	7f ef       	ldi	r23, 0xFF	; 255
 858:	c5 01       	movw	r24, r10
 85a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <strnlen_P>
 85e:	4c 01       	movw	r8, r24
 860:	f3 2d       	mov	r31, r3
 862:	f0 68       	ori	r31, 0x80	; 128
 864:	3f 2e       	mov	r3, r31
 866:	82 01       	movw	r16, r4
 868:	33 fc       	sbrc	r3, 3
 86a:	1b c0       	rjmp	.+54     	; 0x8a2 <vfprintf+0x1c2>
 86c:	82 2d       	mov	r24, r2
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	88 16       	cp	r8, r24
 872:	99 06       	cpc	r9, r25
 874:	b0 f4       	brcc	.+44     	; 0x8a2 <vfprintf+0x1c2>
 876:	b6 01       	movw	r22, r12
 878:	80 e2       	ldi	r24, 0x20	; 32
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 880:	2a 94       	dec	r2
 882:	f4 cf       	rjmp	.-24     	; 0x86c <vfprintf+0x18c>
 884:	f5 01       	movw	r30, r10
 886:	37 fc       	sbrc	r3, 7
 888:	85 91       	lpm	r24, Z+
 88a:	37 fe       	sbrs	r3, 7
 88c:	81 91       	ld	r24, Z+
 88e:	5f 01       	movw	r10, r30
 890:	b6 01       	movw	r22, r12
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 898:	21 10       	cpse	r2, r1
 89a:	2a 94       	dec	r2
 89c:	21 e0       	ldi	r18, 0x01	; 1
 89e:	82 1a       	sub	r8, r18
 8a0:	91 08       	sbc	r9, r1
 8a2:	81 14       	cp	r8, r1
 8a4:	91 04       	cpc	r9, r1
 8a6:	71 f7       	brne	.-36     	; 0x884 <vfprintf+0x1a4>
 8a8:	e8 c0       	rjmp	.+464    	; 0xa7a <__stack+0x17b>
 8aa:	84 36       	cpi	r24, 0x64	; 100
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <vfprintf+0x1d2>
 8ae:	89 36       	cpi	r24, 0x69	; 105
 8b0:	41 f5       	brne	.+80     	; 0x902 <__stack+0x3>
 8b2:	f8 01       	movw	r30, r16
 8b4:	37 fe       	sbrs	r3, 7
 8b6:	07 c0       	rjmp	.+14     	; 0x8c6 <vfprintf+0x1e6>
 8b8:	60 81       	ld	r22, Z
 8ba:	71 81       	ldd	r23, Z+1	; 0x01
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	0c 5f       	subi	r16, 0xFC	; 252
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x1f6>
 8c6:	60 81       	ld	r22, Z
 8c8:	71 81       	ldd	r23, Z+1	; 0x01
 8ca:	07 2e       	mov	r0, r23
 8cc:	00 0c       	add	r0, r0
 8ce:	88 0b       	sbc	r24, r24
 8d0:	99 0b       	sbc	r25, r25
 8d2:	0e 5f       	subi	r16, 0xFE	; 254
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	f3 2d       	mov	r31, r3
 8d8:	ff 76       	andi	r31, 0x6F	; 111
 8da:	3f 2e       	mov	r3, r31
 8dc:	97 ff       	sbrs	r25, 7
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <vfprintf+0x212>
 8e0:	90 95       	com	r25
 8e2:	80 95       	com	r24
 8e4:	70 95       	com	r23
 8e6:	61 95       	neg	r22
 8e8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ea:	8f 4f       	sbci	r24, 0xFF	; 255
 8ec:	9f 4f       	sbci	r25, 0xFF	; 255
 8ee:	f0 68       	ori	r31, 0x80	; 128
 8f0:	3f 2e       	mov	r3, r31
 8f2:	2a e0       	ldi	r18, 0x0A	; 10
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	a3 01       	movw	r20, r6
 8f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <__ultoa_invert>
 8fc:	88 2e       	mov	r8, r24
 8fe:	86 18       	sub	r8, r6
 900:	45 c0       	rjmp	.+138    	; 0x98c <__stack+0x8d>
 902:	85 37       	cpi	r24, 0x75	; 117
 904:	31 f4       	brne	.+12     	; 0x912 <__stack+0x13>
 906:	23 2d       	mov	r18, r3
 908:	2f 7e       	andi	r18, 0xEF	; 239
 90a:	b2 2e       	mov	r11, r18
 90c:	2a e0       	ldi	r18, 0x0A	; 10
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	25 c0       	rjmp	.+74     	; 0x95c <__stack+0x5d>
 912:	93 2d       	mov	r25, r3
 914:	99 7f       	andi	r25, 0xF9	; 249
 916:	b9 2e       	mov	r11, r25
 918:	8f 36       	cpi	r24, 0x6F	; 111
 91a:	c1 f0       	breq	.+48     	; 0x94c <__stack+0x4d>
 91c:	18 f4       	brcc	.+6      	; 0x924 <__stack+0x25>
 91e:	88 35       	cpi	r24, 0x58	; 88
 920:	79 f0       	breq	.+30     	; 0x940 <__stack+0x41>
 922:	b5 c0       	rjmp	.+362    	; 0xa8e <__stack+0x18f>
 924:	80 37       	cpi	r24, 0x70	; 112
 926:	19 f0       	breq	.+6      	; 0x92e <__stack+0x2f>
 928:	88 37       	cpi	r24, 0x78	; 120
 92a:	21 f0       	breq	.+8      	; 0x934 <__stack+0x35>
 92c:	b0 c0       	rjmp	.+352    	; 0xa8e <__stack+0x18f>
 92e:	e9 2f       	mov	r30, r25
 930:	e0 61       	ori	r30, 0x10	; 16
 932:	be 2e       	mov	r11, r30
 934:	b4 fe       	sbrs	r11, 4
 936:	0d c0       	rjmp	.+26     	; 0x952 <__stack+0x53>
 938:	fb 2d       	mov	r31, r11
 93a:	f4 60       	ori	r31, 0x04	; 4
 93c:	bf 2e       	mov	r11, r31
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0x53>
 940:	34 fe       	sbrs	r3, 4
 942:	0a c0       	rjmp	.+20     	; 0x958 <__stack+0x59>
 944:	29 2f       	mov	r18, r25
 946:	26 60       	ori	r18, 0x06	; 6
 948:	b2 2e       	mov	r11, r18
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	28 e0       	ldi	r18, 0x08	; 8
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0x5d>
 952:	20 e1       	ldi	r18, 0x10	; 16
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	20 e1       	ldi	r18, 0x10	; 16
 95a:	32 e0       	ldi	r19, 0x02	; 2
 95c:	f8 01       	movw	r30, r16
 95e:	b7 fe       	sbrs	r11, 7
 960:	07 c0       	rjmp	.+14     	; 0x970 <__stack+0x71>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	82 81       	ldd	r24, Z+2	; 0x02
 968:	93 81       	ldd	r25, Z+3	; 0x03
 96a:	0c 5f       	subi	r16, 0xFC	; 252
 96c:	1f 4f       	sbci	r17, 0xFF	; 255
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
 970:	60 81       	ld	r22, Z
 972:	71 81       	ldd	r23, Z+1	; 0x01
 974:	80 e0       	ldi	r24, 0x00	; 0
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 5f       	subi	r16, 0xFE	; 254
 97a:	1f 4f       	sbci	r17, 0xFF	; 255
 97c:	a3 01       	movw	r20, r6
 97e:	0e 94 a3 05 	call	0xb46	; 0xb46 <__ultoa_invert>
 982:	88 2e       	mov	r8, r24
 984:	86 18       	sub	r8, r6
 986:	fb 2d       	mov	r31, r11
 988:	ff 77       	andi	r31, 0x7F	; 127
 98a:	3f 2e       	mov	r3, r31
 98c:	36 fe       	sbrs	r3, 6
 98e:	0d c0       	rjmp	.+26     	; 0x9aa <__stack+0xab>
 990:	23 2d       	mov	r18, r3
 992:	2e 7f       	andi	r18, 0xFE	; 254
 994:	a2 2e       	mov	r10, r18
 996:	89 14       	cp	r8, r9
 998:	58 f4       	brcc	.+22     	; 0x9b0 <__stack+0xb1>
 99a:	34 fe       	sbrs	r3, 4
 99c:	0b c0       	rjmp	.+22     	; 0x9b4 <__stack+0xb5>
 99e:	32 fc       	sbrc	r3, 2
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__stack+0xb5>
 9a2:	83 2d       	mov	r24, r3
 9a4:	8e 7e       	andi	r24, 0xEE	; 238
 9a6:	a8 2e       	mov	r10, r24
 9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <__stack+0xb5>
 9aa:	b8 2c       	mov	r11, r8
 9ac:	a3 2c       	mov	r10, r3
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__stack+0xb7>
 9b0:	b8 2c       	mov	r11, r8
 9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <__stack+0xb7>
 9b4:	b9 2c       	mov	r11, r9
 9b6:	a4 fe       	sbrs	r10, 4
 9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <__stack+0xd9>
 9ba:	fe 01       	movw	r30, r28
 9bc:	e8 0d       	add	r30, r8
 9be:	f1 1d       	adc	r31, r1
 9c0:	80 81       	ld	r24, Z
 9c2:	80 33       	cpi	r24, 0x30	; 48
 9c4:	21 f4       	brne	.+8      	; 0x9ce <__stack+0xcf>
 9c6:	9a 2d       	mov	r25, r10
 9c8:	99 7e       	andi	r25, 0xE9	; 233
 9ca:	a9 2e       	mov	r10, r25
 9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <__stack+0xe1>
 9ce:	a2 fe       	sbrs	r10, 2
 9d0:	06 c0       	rjmp	.+12     	; 0x9de <__stack+0xdf>
 9d2:	b3 94       	inc	r11
 9d4:	b3 94       	inc	r11
 9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__stack+0xe1>
 9d8:	8a 2d       	mov	r24, r10
 9da:	86 78       	andi	r24, 0x86	; 134
 9dc:	09 f0       	breq	.+2      	; 0x9e0 <__stack+0xe1>
 9de:	b3 94       	inc	r11
 9e0:	a3 fc       	sbrc	r10, 3
 9e2:	11 c0       	rjmp	.+34     	; 0xa06 <__stack+0x107>
 9e4:	a0 fe       	sbrs	r10, 0
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <__stack+0xf5>
 9e8:	b2 14       	cp	r11, r2
 9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x10f>
 9ec:	28 0c       	add	r2, r8
 9ee:	92 2c       	mov	r9, r2
 9f0:	9b 18       	sub	r9, r11
 9f2:	0e c0       	rjmp	.+28     	; 0xa10 <__stack+0x111>
 9f4:	b2 14       	cp	r11, r2
 9f6:	60 f4       	brcc	.+24     	; 0xa10 <__stack+0x111>
 9f8:	b6 01       	movw	r22, r12
 9fa:	80 e2       	ldi	r24, 0x20	; 32
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a02:	b3 94       	inc	r11
 a04:	f7 cf       	rjmp	.-18     	; 0x9f4 <__stack+0xf5>
 a06:	b2 14       	cp	r11, r2
 a08:	18 f4       	brcc	.+6      	; 0xa10 <__stack+0x111>
 a0a:	2b 18       	sub	r2, r11
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <__stack+0x113>
 a0e:	98 2c       	mov	r9, r8
 a10:	21 2c       	mov	r2, r1
 a12:	a4 fe       	sbrs	r10, 4
 a14:	10 c0       	rjmp	.+32     	; 0xa36 <__stack+0x137>
 a16:	b6 01       	movw	r22, r12
 a18:	80 e3       	ldi	r24, 0x30	; 48
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a20:	a2 fe       	sbrs	r10, 2
 a22:	17 c0       	rjmp	.+46     	; 0xa52 <__stack+0x153>
 a24:	a1 fc       	sbrc	r10, 1
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <__stack+0x12f>
 a28:	88 e7       	ldi	r24, 0x78	; 120
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
 a2e:	88 e5       	ldi	r24, 0x58	; 88
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	b6 01       	movw	r22, r12
 a34:	0c c0       	rjmp	.+24     	; 0xa4e <__stack+0x14f>
 a36:	8a 2d       	mov	r24, r10
 a38:	86 78       	andi	r24, 0x86	; 134
 a3a:	59 f0       	breq	.+22     	; 0xa52 <__stack+0x153>
 a3c:	a1 fe       	sbrs	r10, 1
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__stack+0x145>
 a40:	8b e2       	ldi	r24, 0x2B	; 43
 a42:	01 c0       	rjmp	.+2      	; 0xa46 <__stack+0x147>
 a44:	80 e2       	ldi	r24, 0x20	; 32
 a46:	a7 fc       	sbrc	r10, 7
 a48:	8d e2       	ldi	r24, 0x2D	; 45
 a4a:	b6 01       	movw	r22, r12
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a52:	89 14       	cp	r8, r9
 a54:	38 f4       	brcc	.+14     	; 0xa64 <__stack+0x165>
 a56:	b6 01       	movw	r22, r12
 a58:	80 e3       	ldi	r24, 0x30	; 48
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a60:	9a 94       	dec	r9
 a62:	f7 cf       	rjmp	.-18     	; 0xa52 <__stack+0x153>
 a64:	8a 94       	dec	r8
 a66:	f3 01       	movw	r30, r6
 a68:	e8 0d       	add	r30, r8
 a6a:	f1 1d       	adc	r31, r1
 a6c:	80 81       	ld	r24, Z
 a6e:	b6 01       	movw	r22, r12
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a76:	81 10       	cpse	r8, r1
 a78:	f5 cf       	rjmp	.-22     	; 0xa64 <__stack+0x165>
 a7a:	22 20       	and	r2, r2
 a7c:	09 f4       	brne	.+2      	; 0xa80 <__stack+0x181>
 a7e:	42 ce       	rjmp	.-892    	; 0x704 <vfprintf+0x24>
 a80:	b6 01       	movw	r22, r12
 a82:	80 e2       	ldi	r24, 0x20	; 32
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 67 05 	call	0xace	; 0xace <fputc>
 a8a:	2a 94       	dec	r2
 a8c:	f6 cf       	rjmp	.-20     	; 0xa7a <__stack+0x17b>
 a8e:	f6 01       	movw	r30, r12
 a90:	86 81       	ldd	r24, Z+6	; 0x06
 a92:	97 81       	ldd	r25, Z+7	; 0x07
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <__stack+0x19b>
 a96:	8f ef       	ldi	r24, 0xFF	; 255
 a98:	9f ef       	ldi	r25, 0xFF	; 255
 a9a:	2b 96       	adiw	r28, 0x0b	; 11
 a9c:	e2 e1       	ldi	r30, 0x12	; 18
 a9e:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__epilogue_restores__>

00000aa2 <strnlen_P>:
 aa2:	fc 01       	movw	r30, r24
 aa4:	05 90       	lpm	r0, Z+
 aa6:	61 50       	subi	r22, 0x01	; 1
 aa8:	70 40       	sbci	r23, 0x00	; 0
 aaa:	01 10       	cpse	r0, r1
 aac:	d8 f7       	brcc	.-10     	; 0xaa4 <strnlen_P+0x2>
 aae:	80 95       	com	r24
 ab0:	90 95       	com	r25
 ab2:	8e 0f       	add	r24, r30
 ab4:	9f 1f       	adc	r25, r31
 ab6:	08 95       	ret

00000ab8 <strnlen>:
 ab8:	fc 01       	movw	r30, r24
 aba:	61 50       	subi	r22, 0x01	; 1
 abc:	70 40       	sbci	r23, 0x00	; 0
 abe:	01 90       	ld	r0, Z+
 ac0:	01 10       	cpse	r0, r1
 ac2:	d8 f7       	brcc	.-10     	; 0xaba <strnlen+0x2>
 ac4:	80 95       	com	r24
 ac6:	90 95       	com	r25
 ac8:	8e 0f       	add	r24, r30
 aca:	9f 1f       	adc	r25, r31
 acc:	08 95       	ret

00000ace <fputc>:
 ace:	0f 93       	push	r16
 ad0:	1f 93       	push	r17
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	fb 01       	movw	r30, r22
 ad8:	23 81       	ldd	r18, Z+3	; 0x03
 ada:	21 fd       	sbrc	r18, 1
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <fputc+0x16>
 ade:	8f ef       	ldi	r24, 0xFF	; 255
 ae0:	9f ef       	ldi	r25, 0xFF	; 255
 ae2:	2c c0       	rjmp	.+88     	; 0xb3c <fputc+0x6e>
 ae4:	22 ff       	sbrs	r18, 2
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <fputc+0x46>
 ae8:	46 81       	ldd	r20, Z+6	; 0x06
 aea:	57 81       	ldd	r21, Z+7	; 0x07
 aec:	24 81       	ldd	r18, Z+4	; 0x04
 aee:	35 81       	ldd	r19, Z+5	; 0x05
 af0:	42 17       	cp	r20, r18
 af2:	53 07       	cpc	r21, r19
 af4:	44 f4       	brge	.+16     	; 0xb06 <fputc+0x38>
 af6:	a0 81       	ld	r26, Z
 af8:	b1 81       	ldd	r27, Z+1	; 0x01
 afa:	9d 01       	movw	r18, r26
 afc:	2f 5f       	subi	r18, 0xFF	; 255
 afe:	3f 4f       	sbci	r19, 0xFF	; 255
 b00:	31 83       	std	Z+1, r19	; 0x01
 b02:	20 83       	st	Z, r18
 b04:	8c 93       	st	X, r24
 b06:	26 81       	ldd	r18, Z+6	; 0x06
 b08:	37 81       	ldd	r19, Z+7	; 0x07
 b0a:	2f 5f       	subi	r18, 0xFF	; 255
 b0c:	3f 4f       	sbci	r19, 0xFF	; 255
 b0e:	37 83       	std	Z+7, r19	; 0x07
 b10:	26 83       	std	Z+6, r18	; 0x06
 b12:	14 c0       	rjmp	.+40     	; 0xb3c <fputc+0x6e>
 b14:	8b 01       	movw	r16, r22
 b16:	ec 01       	movw	r28, r24
 b18:	fb 01       	movw	r30, r22
 b1a:	00 84       	ldd	r0, Z+8	; 0x08
 b1c:	f1 85       	ldd	r31, Z+9	; 0x09
 b1e:	e0 2d       	mov	r30, r0
 b20:	09 95       	icall
 b22:	89 2b       	or	r24, r25
 b24:	e1 f6       	brne	.-72     	; 0xade <fputc+0x10>
 b26:	d8 01       	movw	r26, r16
 b28:	16 96       	adiw	r26, 0x06	; 6
 b2a:	8d 91       	ld	r24, X+
 b2c:	9c 91       	ld	r25, X
 b2e:	17 97       	sbiw	r26, 0x07	; 7
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	17 96       	adiw	r26, 0x07	; 7
 b34:	9c 93       	st	X, r25
 b36:	8e 93       	st	-X, r24
 b38:	16 97       	sbiw	r26, 0x06	; 6
 b3a:	ce 01       	movw	r24, r28
 b3c:	df 91       	pop	r29
 b3e:	cf 91       	pop	r28
 b40:	1f 91       	pop	r17
 b42:	0f 91       	pop	r16
 b44:	08 95       	ret

00000b46 <__ultoa_invert>:
 b46:	fa 01       	movw	r30, r20
 b48:	aa 27       	eor	r26, r26
 b4a:	28 30       	cpi	r18, 0x08	; 8
 b4c:	51 f1       	breq	.+84     	; 0xba2 <__ultoa_invert+0x5c>
 b4e:	20 31       	cpi	r18, 0x10	; 16
 b50:	81 f1       	breq	.+96     	; 0xbb2 <__ultoa_invert+0x6c>
 b52:	e8 94       	clt
 b54:	6f 93       	push	r22
 b56:	6e 7f       	andi	r22, 0xFE	; 254
 b58:	6e 5f       	subi	r22, 0xFE	; 254
 b5a:	7f 4f       	sbci	r23, 0xFF	; 255
 b5c:	8f 4f       	sbci	r24, 0xFF	; 255
 b5e:	9f 4f       	sbci	r25, 0xFF	; 255
 b60:	af 4f       	sbci	r26, 0xFF	; 255
 b62:	b1 e0       	ldi	r27, 0x01	; 1
 b64:	3e d0       	rcall	.+124    	; 0xbe2 <__ultoa_invert+0x9c>
 b66:	b4 e0       	ldi	r27, 0x04	; 4
 b68:	3c d0       	rcall	.+120    	; 0xbe2 <__ultoa_invert+0x9c>
 b6a:	67 0f       	add	r22, r23
 b6c:	78 1f       	adc	r23, r24
 b6e:	89 1f       	adc	r24, r25
 b70:	9a 1f       	adc	r25, r26
 b72:	a1 1d       	adc	r26, r1
 b74:	68 0f       	add	r22, r24
 b76:	79 1f       	adc	r23, r25
 b78:	8a 1f       	adc	r24, r26
 b7a:	91 1d       	adc	r25, r1
 b7c:	a1 1d       	adc	r26, r1
 b7e:	6a 0f       	add	r22, r26
 b80:	71 1d       	adc	r23, r1
 b82:	81 1d       	adc	r24, r1
 b84:	91 1d       	adc	r25, r1
 b86:	a1 1d       	adc	r26, r1
 b88:	20 d0       	rcall	.+64     	; 0xbca <__ultoa_invert+0x84>
 b8a:	09 f4       	brne	.+2      	; 0xb8e <__ultoa_invert+0x48>
 b8c:	68 94       	set
 b8e:	3f 91       	pop	r19
 b90:	2a e0       	ldi	r18, 0x0A	; 10
 b92:	26 9f       	mul	r18, r22
 b94:	11 24       	eor	r1, r1
 b96:	30 19       	sub	r19, r0
 b98:	30 5d       	subi	r19, 0xD0	; 208
 b9a:	31 93       	st	Z+, r19
 b9c:	de f6       	brtc	.-74     	; 0xb54 <__ultoa_invert+0xe>
 b9e:	cf 01       	movw	r24, r30
 ba0:	08 95       	ret
 ba2:	46 2f       	mov	r20, r22
 ba4:	47 70       	andi	r20, 0x07	; 7
 ba6:	40 5d       	subi	r20, 0xD0	; 208
 ba8:	41 93       	st	Z+, r20
 baa:	b3 e0       	ldi	r27, 0x03	; 3
 bac:	0f d0       	rcall	.+30     	; 0xbcc <__ultoa_invert+0x86>
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0x5c>
 bb0:	f6 cf       	rjmp	.-20     	; 0xb9e <__ultoa_invert+0x58>
 bb2:	46 2f       	mov	r20, r22
 bb4:	4f 70       	andi	r20, 0x0F	; 15
 bb6:	40 5d       	subi	r20, 0xD0	; 208
 bb8:	4a 33       	cpi	r20, 0x3A	; 58
 bba:	18 f0       	brcs	.+6      	; 0xbc2 <__ultoa_invert+0x7c>
 bbc:	49 5d       	subi	r20, 0xD9	; 217
 bbe:	31 fd       	sbrc	r19, 1
 bc0:	40 52       	subi	r20, 0x20	; 32
 bc2:	41 93       	st	Z+, r20
 bc4:	02 d0       	rcall	.+4      	; 0xbca <__ultoa_invert+0x84>
 bc6:	a9 f7       	brne	.-22     	; 0xbb2 <__ultoa_invert+0x6c>
 bc8:	ea cf       	rjmp	.-44     	; 0xb9e <__ultoa_invert+0x58>
 bca:	b4 e0       	ldi	r27, 0x04	; 4
 bcc:	a6 95       	lsr	r26
 bce:	97 95       	ror	r25
 bd0:	87 95       	ror	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	ba 95       	dec	r27
 bd8:	c9 f7       	brne	.-14     	; 0xbcc <__ultoa_invert+0x86>
 bda:	00 97       	sbiw	r24, 0x00	; 0
 bdc:	61 05       	cpc	r22, r1
 bde:	71 05       	cpc	r23, r1
 be0:	08 95       	ret
 be2:	9b 01       	movw	r18, r22
 be4:	ac 01       	movw	r20, r24
 be6:	0a 2e       	mov	r0, r26
 be8:	06 94       	lsr	r0
 bea:	57 95       	ror	r21
 bec:	47 95       	ror	r20
 bee:	37 95       	ror	r19
 bf0:	27 95       	ror	r18
 bf2:	ba 95       	dec	r27
 bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__ultoa_invert+0xa2>
 bf6:	62 0f       	add	r22, r18
 bf8:	73 1f       	adc	r23, r19
 bfa:	84 1f       	adc	r24, r20
 bfc:	95 1f       	adc	r25, r21
 bfe:	a0 1d       	adc	r26, r0
 c00:	08 95       	ret

00000c02 <__prologue_saves__>:
 c02:	2f 92       	push	r2
 c04:	3f 92       	push	r3
 c06:	4f 92       	push	r4
 c08:	5f 92       	push	r5
 c0a:	6f 92       	push	r6
 c0c:	7f 92       	push	r7
 c0e:	8f 92       	push	r8
 c10:	9f 92       	push	r9
 c12:	af 92       	push	r10
 c14:	bf 92       	push	r11
 c16:	cf 92       	push	r12
 c18:	df 92       	push	r13
 c1a:	ef 92       	push	r14
 c1c:	ff 92       	push	r15
 c1e:	0f 93       	push	r16
 c20:	1f 93       	push	r17
 c22:	cf 93       	push	r28
 c24:	df 93       	push	r29
 c26:	cd b7       	in	r28, 0x3d	; 61
 c28:	de b7       	in	r29, 0x3e	; 62
 c2a:	ca 1b       	sub	r28, r26
 c2c:	db 0b       	sbc	r29, r27
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
 c38:	09 94       	ijmp

00000c3a <__epilogue_restores__>:
 c3a:	2a 88       	ldd	r2, Y+18	; 0x12
 c3c:	39 88       	ldd	r3, Y+17	; 0x11
 c3e:	48 88       	ldd	r4, Y+16	; 0x10
 c40:	5f 84       	ldd	r5, Y+15	; 0x0f
 c42:	6e 84       	ldd	r6, Y+14	; 0x0e
 c44:	7d 84       	ldd	r7, Y+13	; 0x0d
 c46:	8c 84       	ldd	r8, Y+12	; 0x0c
 c48:	9b 84       	ldd	r9, Y+11	; 0x0b
 c4a:	aa 84       	ldd	r10, Y+10	; 0x0a
 c4c:	b9 84       	ldd	r11, Y+9	; 0x09
 c4e:	c8 84       	ldd	r12, Y+8	; 0x08
 c50:	df 80       	ldd	r13, Y+7	; 0x07
 c52:	ee 80       	ldd	r14, Y+6	; 0x06
 c54:	fd 80       	ldd	r15, Y+5	; 0x05
 c56:	0c 81       	ldd	r16, Y+4	; 0x04
 c58:	1b 81       	ldd	r17, Y+3	; 0x03
 c5a:	aa 81       	ldd	r26, Y+2	; 0x02
 c5c:	b9 81       	ldd	r27, Y+1	; 0x01
 c5e:	ce 0f       	add	r28, r30
 c60:	d1 1d       	adc	r29, r1
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	ed 01       	movw	r28, r26
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
