
ZeduinoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000020ea  0000217e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00002184  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f16  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096c  00000000  00000000  00004172  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d37  00000000  00000000  00004ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00005818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fc  00000000  00000000  000058e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002164  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	21 e0       	ldi	r18, 0x01	; 1
      76:	a6 e0       	ldi	r26, 0x06	; 6
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	ae 30       	cpi	r26, 0x0E	; 14
      80:	b2 07       	cpc	r27, r18
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ea ee       	ldi	r30, 0xEA	; 234
      8c:	f0 e2       	ldi	r31, 0x20	; 32
      8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0
      94:	a6 30       	cpi	r26, 0x06	; 6
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
      9a:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <main>
      9e:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN7zeduino4util9prescalerENS0_10EPrescalerE>:
			ENABLED, DISABLED
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) clr_bit(fcrio(port), nmr(port));
			else if (m == OUTPUT) set_bit(fcrio(port), nmr(port));
      a6:	e1 e8       	ldi	r30, 0x81	; 129
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	90 81       	ld	r25, Z
      ac:	21 e0       	ldi	r18, 0x01	; 1
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <_ZN7zeduino4util9prescalerENS0_10EPrescalerE+0x10>
      b2:	22 0f       	add	r18, r18
      b4:	33 1f       	adc	r19, r19
      b6:	8a 95       	dec	r24
      b8:	e2 f7       	brpl	.-8      	; 0xb2 <_ZN7zeduino4util9prescalerENS0_10EPrescalerE+0xc>
      ba:	29 2b       	or	r18, r25
      bc:	20 83       	st	Z, r18
      be:	08 95       	ret

000000c0 <_ZN7zeduino4util8delay_msEj>:
      c0:	00 97       	sbiw	r24, 0x00	; 0
      c2:	41 f0       	breq	.+16     	; 0xd4 <_ZN7zeduino4util8delay_msEj+0x14>
      c4:	ef e9       	ldi	r30, 0x9F	; 159
      c6:	ff e0       	ldi	r31, 0x0F	; 15
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <_ZN7zeduino4util8delay_msEj+0x8>
      cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN7zeduino4util8delay_msEj+0xe>
      ce:	00 00       	nop
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	c1 f7       	brne	.-16     	; 0xc4 <_ZN7zeduino4util8delay_msEj+0x4>
      d4:	08 95       	ret

000000d6 <_ZN7zeduino4util8delay_usEj>:
      d6:	00 97       	sbiw	r24, 0x00	; 0
      d8:	31 f0       	breq	.+12     	; 0xe6 <_ZN7zeduino4util8delay_usEj+0x10>
      da:	25 e0       	ldi	r18, 0x05	; 5
      dc:	2a 95       	dec	r18
      de:	f1 f7       	brne	.-4      	; 0xdc <_ZN7zeduino4util8delay_usEj+0x6>
      e0:	00 00       	nop
      e2:	01 97       	sbiw	r24, 0x01	; 1
      e4:	d1 f7       	brne	.-12     	; 0xda <_ZN7zeduino4util8delay_usEj+0x4>
      e6:	08 95       	ret

000000e8 <_ZN7zeduino9component8Display78SetValueEh>:
			}
			
			public: void SetDotVisibility(bool b) { enable(_port[7], b); }
			public: bool IsDotVisible() { return is_enabled(_port[7]); }
			
			public: void SetValue(uint8 hex) {
      e8:	fc 01       	movw	r30, r24
      ea:	60 31       	cpi	r22, 0x10	; 16
      ec:	08 f0       	brcs	.+2      	; 0xf0 <_ZN7zeduino9component8Display78SetValueEh+0x8>
      ee:	6f e0       	ldi	r22, 0x0F	; 15
				if (hex > 15) hex = 15;
				else if (hex < 0) hex = 0;
				
				if (hex == 0x0) {
      f0:	61 11       	cpse	r22, r1
      f2:	d5 c0       	rjmp	.+426    	; 0x29e <_ZN7zeduino9component8Display78SetValueEh+0x1b6>
					enable(_port[0]);
      f4:	80 81       	ld	r24, Z
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
      f6:	88 30       	cpi	r24, 0x08	; 8
      f8:	70 f4       	brcc	.+28     	; 0x116 <_ZN7zeduino9component8Display78SetValueEh+0x2e>
      fa:	4b b1       	in	r20, 0x0b	; 11
      fc:	87 70       	andi	r24, 0x07	; 7
      fe:	21 e0       	ldi	r18, 0x01	; 1
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	b9 01       	movw	r22, r18
     104:	02 c0       	rjmp	.+4      	; 0x10a <_ZN7zeduino9component8Display78SetValueEh+0x22>
     106:	66 0f       	add	r22, r22
     108:	77 1f       	adc	r23, r23
     10a:	8a 95       	dec	r24
     10c:	e2 f7       	brpl	.-8      	; 0x106 <_ZN7zeduino9component8Display78SetValueEh+0x1e>
     10e:	cb 01       	movw	r24, r22
     110:	84 2b       	or	r24, r20
     112:	8b b9       	out	0x0b, r24	; 11
     114:	0d c0       	rjmp	.+26     	; 0x130 <_ZN7zeduino9component8Display78SetValueEh+0x48>
     116:	45 b1       	in	r20, 0x05	; 5
     118:	87 70       	andi	r24, 0x07	; 7
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	b9 01       	movw	r22, r18
     120:	02 c0       	rjmp	.+4      	; 0x126 <_ZN7zeduino9component8Display78SetValueEh+0x3e>
     122:	66 0f       	add	r22, r22
     124:	77 1f       	adc	r23, r23
     126:	8a 95       	dec	r24
     128:	e2 f7       	brpl	.-8      	; 0x122 <_ZN7zeduino9component8Display78SetValueEh+0x3a>
     12a:	cb 01       	movw	r24, r22
     12c:	84 2b       	or	r24, r20
     12e:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     130:	81 81       	ldd	r24, Z+1	; 0x01
     132:	88 30       	cpi	r24, 0x08	; 8
     134:	70 f4       	brcc	.+28     	; 0x152 <_ZN7zeduino9component8Display78SetValueEh+0x6a>
     136:	4b b1       	in	r20, 0x0b	; 11
     138:	87 70       	andi	r24, 0x07	; 7
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	b9 01       	movw	r22, r18
     140:	02 c0       	rjmp	.+4      	; 0x146 <_ZN7zeduino9component8Display78SetValueEh+0x5e>
     142:	66 0f       	add	r22, r22
     144:	77 1f       	adc	r23, r23
     146:	8a 95       	dec	r24
     148:	e2 f7       	brpl	.-8      	; 0x142 <_ZN7zeduino9component8Display78SetValueEh+0x5a>
     14a:	cb 01       	movw	r24, r22
     14c:	84 2b       	or	r24, r20
     14e:	8b b9       	out	0x0b, r24	; 11
     150:	0d c0       	rjmp	.+26     	; 0x16c <_ZN7zeduino9component8Display78SetValueEh+0x84>
     152:	45 b1       	in	r20, 0x05	; 5
     154:	87 70       	andi	r24, 0x07	; 7
     156:	21 e0       	ldi	r18, 0x01	; 1
     158:	30 e0       	ldi	r19, 0x00	; 0
     15a:	b9 01       	movw	r22, r18
     15c:	02 c0       	rjmp	.+4      	; 0x162 <_ZN7zeduino9component8Display78SetValueEh+0x7a>
     15e:	66 0f       	add	r22, r22
     160:	77 1f       	adc	r23, r23
     162:	8a 95       	dec	r24
     164:	e2 f7       	brpl	.-8      	; 0x15e <_ZN7zeduino9component8Display78SetValueEh+0x76>
     166:	cb 01       	movw	r24, r22
     168:	84 2b       	or	r24, r20
     16a:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     16c:	82 81       	ldd	r24, Z+2	; 0x02
     16e:	88 30       	cpi	r24, 0x08	; 8
     170:	70 f4       	brcc	.+28     	; 0x18e <_ZN7zeduino9component8Display78SetValueEh+0xa6>
     172:	4b b1       	in	r20, 0x0b	; 11
     174:	87 70       	andi	r24, 0x07	; 7
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	b9 01       	movw	r22, r18
     17c:	02 c0       	rjmp	.+4      	; 0x182 <_ZN7zeduino9component8Display78SetValueEh+0x9a>
     17e:	66 0f       	add	r22, r22
     180:	77 1f       	adc	r23, r23
     182:	8a 95       	dec	r24
     184:	e2 f7       	brpl	.-8      	; 0x17e <_ZN7zeduino9component8Display78SetValueEh+0x96>
     186:	cb 01       	movw	r24, r22
     188:	84 2b       	or	r24, r20
     18a:	8b b9       	out	0x0b, r24	; 11
     18c:	0d c0       	rjmp	.+26     	; 0x1a8 <_ZN7zeduino9component8Display78SetValueEh+0xc0>
     18e:	45 b1       	in	r20, 0x05	; 5
     190:	87 70       	andi	r24, 0x07	; 7
     192:	21 e0       	ldi	r18, 0x01	; 1
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	b9 01       	movw	r22, r18
     198:	02 c0       	rjmp	.+4      	; 0x19e <_ZN7zeduino9component8Display78SetValueEh+0xb6>
     19a:	66 0f       	add	r22, r22
     19c:	77 1f       	adc	r23, r23
     19e:	8a 95       	dec	r24
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <_ZN7zeduino9component8Display78SetValueEh+0xb2>
     1a2:	cb 01       	movw	r24, r22
     1a4:	84 2b       	or	r24, r20
     1a6:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     1a8:	83 81       	ldd	r24, Z+3	; 0x03
     1aa:	88 30       	cpi	r24, 0x08	; 8
     1ac:	70 f4       	brcc	.+28     	; 0x1ca <_ZN7zeduino9component8Display78SetValueEh+0xe2>
     1ae:	4b b1       	in	r20, 0x0b	; 11
     1b0:	87 70       	andi	r24, 0x07	; 7
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	b9 01       	movw	r22, r18
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <_ZN7zeduino9component8Display78SetValueEh+0xd6>
     1ba:	66 0f       	add	r22, r22
     1bc:	77 1f       	adc	r23, r23
     1be:	8a 95       	dec	r24
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <_ZN7zeduino9component8Display78SetValueEh+0xd2>
     1c2:	cb 01       	movw	r24, r22
     1c4:	84 2b       	or	r24, r20
     1c6:	8b b9       	out	0x0b, r24	; 11
     1c8:	0d c0       	rjmp	.+26     	; 0x1e4 <_ZN7zeduino9component8Display78SetValueEh+0xfc>
     1ca:	45 b1       	in	r20, 0x05	; 5
     1cc:	87 70       	andi	r24, 0x07	; 7
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	b9 01       	movw	r22, r18
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <_ZN7zeduino9component8Display78SetValueEh+0xf2>
     1d6:	66 0f       	add	r22, r22
     1d8:	77 1f       	adc	r23, r23
     1da:	8a 95       	dec	r24
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <_ZN7zeduino9component8Display78SetValueEh+0xee>
     1de:	cb 01       	movw	r24, r22
     1e0:	84 2b       	or	r24, r20
     1e2:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
     1e4:	84 81       	ldd	r24, Z+4	; 0x04
     1e6:	88 30       	cpi	r24, 0x08	; 8
     1e8:	70 f4       	brcc	.+28     	; 0x206 <_ZN7zeduino9component8Display78SetValueEh+0x11e>
     1ea:	4b b1       	in	r20, 0x0b	; 11
     1ec:	87 70       	andi	r24, 0x07	; 7
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	b9 01       	movw	r22, r18
     1f4:	02 c0       	rjmp	.+4      	; 0x1fa <_ZN7zeduino9component8Display78SetValueEh+0x112>
     1f6:	66 0f       	add	r22, r22
     1f8:	77 1f       	adc	r23, r23
     1fa:	8a 95       	dec	r24
     1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <_ZN7zeduino9component8Display78SetValueEh+0x10e>
     1fe:	cb 01       	movw	r24, r22
     200:	84 2b       	or	r24, r20
     202:	8b b9       	out	0x0b, r24	; 11
     204:	0d c0       	rjmp	.+26     	; 0x220 <_ZN7zeduino9component8Display78SetValueEh+0x138>
     206:	45 b1       	in	r20, 0x05	; 5
     208:	87 70       	andi	r24, 0x07	; 7
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	b9 01       	movw	r22, r18
     210:	02 c0       	rjmp	.+4      	; 0x216 <_ZN7zeduino9component8Display78SetValueEh+0x12e>
     212:	66 0f       	add	r22, r22
     214:	77 1f       	adc	r23, r23
     216:	8a 95       	dec	r24
     218:	e2 f7       	brpl	.-8      	; 0x212 <_ZN7zeduino9component8Display78SetValueEh+0x12a>
     21a:	cb 01       	movw	r24, r22
     21c:	84 2b       	or	r24, r20
     21e:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
     220:	85 81       	ldd	r24, Z+5	; 0x05
     222:	88 30       	cpi	r24, 0x08	; 8
     224:	70 f4       	brcc	.+28     	; 0x242 <_ZN7zeduino9component8Display78SetValueEh+0x15a>
     226:	4b b1       	in	r20, 0x0b	; 11
     228:	87 70       	andi	r24, 0x07	; 7
     22a:	21 e0       	ldi	r18, 0x01	; 1
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	b9 01       	movw	r22, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <_ZN7zeduino9component8Display78SetValueEh+0x14e>
     232:	66 0f       	add	r22, r22
     234:	77 1f       	adc	r23, r23
     236:	8a 95       	dec	r24
     238:	e2 f7       	brpl	.-8      	; 0x232 <_ZN7zeduino9component8Display78SetValueEh+0x14a>
     23a:	cb 01       	movw	r24, r22
     23c:	84 2b       	or	r24, r20
     23e:	8b b9       	out	0x0b, r24	; 11
     240:	0d c0       	rjmp	.+26     	; 0x25c <_ZN7zeduino9component8Display78SetValueEh+0x174>
     242:	45 b1       	in	r20, 0x05	; 5
     244:	87 70       	andi	r24, 0x07	; 7
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	b9 01       	movw	r22, r18
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_ZN7zeduino9component8Display78SetValueEh+0x16a>
     24e:	66 0f       	add	r22, r22
     250:	77 1f       	adc	r23, r23
     252:	8a 95       	dec	r24
     254:	e2 f7       	brpl	.-8      	; 0x24e <_ZN7zeduino9component8Display78SetValueEh+0x166>
     256:	cb 01       	movw	r24, r22
     258:	84 2b       	or	r24, r20
     25a:	85 b9       	out	0x05, r24	; 5
					disable(_port[6]);
     25c:	86 81       	ldd	r24, Z+6	; 0x06
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	78 f4       	brcc	.+30     	; 0x280 <_ZN7zeduino9component8Display78SetValueEh+0x198>
     262:	4b b1       	in	r20, 0x0b	; 11
     264:	87 70       	andi	r24, 0x07	; 7
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	b9 01       	movw	r22, r18
     26c:	02 c0       	rjmp	.+4      	; 0x272 <_ZN7zeduino9component8Display78SetValueEh+0x18a>
     26e:	66 0f       	add	r22, r22
     270:	77 1f       	adc	r23, r23
     272:	8a 95       	dec	r24
     274:	e2 f7       	brpl	.-8      	; 0x26e <_ZN7zeduino9component8Display78SetValueEh+0x186>
     276:	cb 01       	movw	r24, r22
     278:	80 95       	com	r24
     27a:	84 23       	and	r24, r20
     27c:	8b b9       	out	0x0b, r24	; 11
     27e:	08 95       	ret
     280:	45 b1       	in	r20, 0x05	; 5
     282:	87 70       	andi	r24, 0x07	; 7
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	b9 01       	movw	r22, r18
     28a:	02 c0       	rjmp	.+4      	; 0x290 <_ZN7zeduino9component8Display78SetValueEh+0x1a8>
     28c:	66 0f       	add	r22, r22
     28e:	77 1f       	adc	r23, r23
     290:	8a 95       	dec	r24
     292:	e2 f7       	brpl	.-8      	; 0x28c <_ZN7zeduino9component8Display78SetValueEh+0x1a4>
     294:	cb 01       	movw	r24, r22
     296:	80 95       	com	r24
     298:	84 23       	and	r24, r20
     29a:	85 b9       	out	0x05, r24	; 5
     29c:	08 95       	ret
				} else if (hex == 0x1) {
     29e:	61 30       	cpi	r22, 0x01	; 1
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <_ZN7zeduino9component8Display78SetValueEh+0x1bc>
     2a2:	dd c0       	rjmp	.+442    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
					disable(_port[0]);
     2a4:	80 81       	ld	r24, Z
     2a6:	88 30       	cpi	r24, 0x08	; 8
     2a8:	78 f4       	brcc	.+30     	; 0x2c8 <_ZN7zeduino9component8Display78SetValueEh+0x1e0>
     2aa:	4b b1       	in	r20, 0x0b	; 11
     2ac:	87 70       	andi	r24, 0x07	; 7
     2ae:	21 e0       	ldi	r18, 0x01	; 1
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	b9 01       	movw	r22, r18
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <_ZN7zeduino9component8Display78SetValueEh+0x1d2>
     2b6:	66 0f       	add	r22, r22
     2b8:	77 1f       	adc	r23, r23
     2ba:	8a 95       	dec	r24
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <_ZN7zeduino9component8Display78SetValueEh+0x1ce>
     2be:	cb 01       	movw	r24, r22
     2c0:	80 95       	com	r24
     2c2:	84 23       	and	r24, r20
     2c4:	8b b9       	out	0x0b, r24	; 11
     2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <_ZN7zeduino9component8Display78SetValueEh+0x1fc>
     2c8:	45 b1       	in	r20, 0x05	; 5
     2ca:	87 70       	andi	r24, 0x07	; 7
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	b9 01       	movw	r22, r18
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <_ZN7zeduino9component8Display78SetValueEh+0x1f0>
     2d4:	66 0f       	add	r22, r22
     2d6:	77 1f       	adc	r23, r23
     2d8:	8a 95       	dec	r24
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <_ZN7zeduino9component8Display78SetValueEh+0x1ec>
     2dc:	cb 01       	movw	r24, r22
     2de:	80 95       	com	r24
     2e0:	84 23       	and	r24, r20
     2e2:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     2e4:	81 81       	ldd	r24, Z+1	; 0x01
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     2e6:	88 30       	cpi	r24, 0x08	; 8
     2e8:	70 f4       	brcc	.+28     	; 0x306 <_ZN7zeduino9component8Display78SetValueEh+0x21e>
     2ea:	4b b1       	in	r20, 0x0b	; 11
     2ec:	87 70       	andi	r24, 0x07	; 7
     2ee:	21 e0       	ldi	r18, 0x01	; 1
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	b9 01       	movw	r22, r18
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_ZN7zeduino9component8Display78SetValueEh+0x212>
     2f6:	66 0f       	add	r22, r22
     2f8:	77 1f       	adc	r23, r23
     2fa:	8a 95       	dec	r24
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <_ZN7zeduino9component8Display78SetValueEh+0x20e>
     2fe:	cb 01       	movw	r24, r22
     300:	84 2b       	or	r24, r20
     302:	8b b9       	out	0x0b, r24	; 11
     304:	0d c0       	rjmp	.+26     	; 0x320 <_ZN7zeduino9component8Display78SetValueEh+0x238>
     306:	45 b1       	in	r20, 0x05	; 5
     308:	87 70       	andi	r24, 0x07	; 7
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <_ZN7zeduino9component8Display78SetValueEh+0x22e>
     312:	66 0f       	add	r22, r22
     314:	77 1f       	adc	r23, r23
     316:	8a 95       	dec	r24
     318:	e2 f7       	brpl	.-8      	; 0x312 <_ZN7zeduino9component8Display78SetValueEh+0x22a>
     31a:	cb 01       	movw	r24, r22
     31c:	84 2b       	or	r24, r20
     31e:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     320:	82 81       	ldd	r24, Z+2	; 0x02
     322:	88 30       	cpi	r24, 0x08	; 8
     324:	70 f4       	brcc	.+28     	; 0x342 <_ZN7zeduino9component8Display78SetValueEh+0x25a>
     326:	4b b1       	in	r20, 0x0b	; 11
     328:	87 70       	andi	r24, 0x07	; 7
     32a:	21 e0       	ldi	r18, 0x01	; 1
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	b9 01       	movw	r22, r18
     330:	02 c0       	rjmp	.+4      	; 0x336 <_ZN7zeduino9component8Display78SetValueEh+0x24e>
     332:	66 0f       	add	r22, r22
     334:	77 1f       	adc	r23, r23
     336:	8a 95       	dec	r24
     338:	e2 f7       	brpl	.-8      	; 0x332 <_ZN7zeduino9component8Display78SetValueEh+0x24a>
     33a:	cb 01       	movw	r24, r22
     33c:	84 2b       	or	r24, r20
     33e:	8b b9       	out	0x0b, r24	; 11
     340:	0d c0       	rjmp	.+26     	; 0x35c <_ZN7zeduino9component8Display78SetValueEh+0x274>
     342:	45 b1       	in	r20, 0x05	; 5
     344:	87 70       	andi	r24, 0x07	; 7
     346:	21 e0       	ldi	r18, 0x01	; 1
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	b9 01       	movw	r22, r18
     34c:	02 c0       	rjmp	.+4      	; 0x352 <_ZN7zeduino9component8Display78SetValueEh+0x26a>
     34e:	66 0f       	add	r22, r22
     350:	77 1f       	adc	r23, r23
     352:	8a 95       	dec	r24
     354:	e2 f7       	brpl	.-8      	; 0x34e <_ZN7zeduino9component8Display78SetValueEh+0x266>
     356:	cb 01       	movw	r24, r22
     358:	84 2b       	or	r24, r20
     35a:	85 b9       	out	0x05, r24	; 5
					disable(_port[3]);
     35c:	83 81       	ldd	r24, Z+3	; 0x03
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     35e:	88 30       	cpi	r24, 0x08	; 8
     360:	78 f4       	brcc	.+30     	; 0x380 <_ZN7zeduino9component8Display78SetValueEh+0x298>
     362:	4b b1       	in	r20, 0x0b	; 11
     364:	87 70       	andi	r24, 0x07	; 7
     366:	21 e0       	ldi	r18, 0x01	; 1
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	b9 01       	movw	r22, r18
     36c:	02 c0       	rjmp	.+4      	; 0x372 <_ZN7zeduino9component8Display78SetValueEh+0x28a>
     36e:	66 0f       	add	r22, r22
     370:	77 1f       	adc	r23, r23
     372:	8a 95       	dec	r24
     374:	e2 f7       	brpl	.-8      	; 0x36e <_ZN7zeduino9component8Display78SetValueEh+0x286>
     376:	cb 01       	movw	r24, r22
     378:	80 95       	com	r24
     37a:	84 23       	and	r24, r20
     37c:	8b b9       	out	0x0b, r24	; 11
     37e:	0e c0       	rjmp	.+28     	; 0x39c <_ZN7zeduino9component8Display78SetValueEh+0x2b4>
     380:	45 b1       	in	r20, 0x05	; 5
     382:	87 70       	andi	r24, 0x07	; 7
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	b9 01       	movw	r22, r18
     38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN7zeduino9component8Display78SetValueEh+0x2a8>
     38c:	66 0f       	add	r22, r22
     38e:	77 1f       	adc	r23, r23
     390:	8a 95       	dec	r24
     392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN7zeduino9component8Display78SetValueEh+0x2a4>
     394:	cb 01       	movw	r24, r22
     396:	80 95       	com	r24
     398:	84 23       	and	r24, r20
     39a:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
     39c:	84 81       	ldd	r24, Z+4	; 0x04
     39e:	88 30       	cpi	r24, 0x08	; 8
     3a0:	78 f4       	brcc	.+30     	; 0x3c0 <_ZN7zeduino9component8Display78SetValueEh+0x2d8>
     3a2:	4b b1       	in	r20, 0x0b	; 11
     3a4:	87 70       	andi	r24, 0x07	; 7
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	b9 01       	movw	r22, r18
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <_ZN7zeduino9component8Display78SetValueEh+0x2ca>
     3ae:	66 0f       	add	r22, r22
     3b0:	77 1f       	adc	r23, r23
     3b2:	8a 95       	dec	r24
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <_ZN7zeduino9component8Display78SetValueEh+0x2c6>
     3b6:	cb 01       	movw	r24, r22
     3b8:	80 95       	com	r24
     3ba:	84 23       	and	r24, r20
     3bc:	8b b9       	out	0x0b, r24	; 11
     3be:	0e c0       	rjmp	.+28     	; 0x3dc <_ZN7zeduino9component8Display78SetValueEh+0x2f4>
     3c0:	45 b1       	in	r20, 0x05	; 5
     3c2:	87 70       	andi	r24, 0x07	; 7
     3c4:	21 e0       	ldi	r18, 0x01	; 1
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	b9 01       	movw	r22, r18
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <_ZN7zeduino9component8Display78SetValueEh+0x2e8>
     3cc:	66 0f       	add	r22, r22
     3ce:	77 1f       	adc	r23, r23
     3d0:	8a 95       	dec	r24
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <_ZN7zeduino9component8Display78SetValueEh+0x2e4>
     3d4:	cb 01       	movw	r24, r22
     3d6:	80 95       	com	r24
     3d8:	84 23       	and	r24, r20
     3da:	85 b9       	out	0x05, r24	; 5
					disable(_port[5]);
     3dc:	85 81       	ldd	r24, Z+5	; 0x05
     3de:	88 30       	cpi	r24, 0x08	; 8
     3e0:	78 f4       	brcc	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
     3e2:	4b b1       	in	r20, 0x0b	; 11
     3e4:	87 70       	andi	r24, 0x07	; 7
     3e6:	21 e0       	ldi	r18, 0x01	; 1
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	b9 01       	movw	r22, r18
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <_ZN7zeduino9component8Display78SetValueEh+0x30a>
     3ee:	66 0f       	add	r22, r22
     3f0:	77 1f       	adc	r23, r23
     3f2:	8a 95       	dec	r24
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <_ZN7zeduino9component8Display78SetValueEh+0x306>
     3f6:	cb 01       	movw	r24, r22
     3f8:	80 95       	com	r24
     3fa:	84 23       	and	r24, r20
     3fc:	8b b9       	out	0x0b, r24	; 11
     3fe:	0e c0       	rjmp	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     400:	45 b1       	in	r20, 0x05	; 5
     402:	87 70       	andi	r24, 0x07	; 7
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	b9 01       	movw	r22, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	66 0f       	add	r22, r22
     40e:	77 1f       	adc	r23, r23
     410:	8a 95       	dec	r24
     412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     414:	cb 01       	movw	r24, r22
     416:	80 95       	com	r24
     418:	84 23       	and	r24, r20
     41a:	85 b9       	out	0x05, r24	; 5
					disable(_port[6]);
     41c:	86 81       	ldd	r24, Z+6	; 0x06
     41e:	88 30       	cpi	r24, 0x08	; 8
     420:	78 f4       	brcc	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     422:	4b b1       	in	r20, 0x0b	; 11
     424:	87 70       	andi	r24, 0x07	; 7
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	b9 01       	movw	r22, r18
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	66 0f       	add	r22, r22
     430:	77 1f       	adc	r23, r23
     432:	8a 95       	dec	r24
     434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	cb 01       	movw	r24, r22
     438:	80 95       	com	r24
     43a:	84 23       	and	r24, r20
     43c:	8b b9       	out	0x0b, r24	; 11
     43e:	08 95       	ret
     440:	45 b1       	in	r20, 0x05	; 5
     442:	87 70       	andi	r24, 0x07	; 7
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	b9 01       	movw	r22, r18
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	66 0f       	add	r22, r22
     44e:	77 1f       	adc	r23, r23
     450:	8a 95       	dec	r24
     452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	cb 01       	movw	r24, r22
     456:	80 95       	com	r24
     458:	84 23       	and	r24, r20
     45a:	85 b9       	out	0x05, r24	; 5
     45c:	08 95       	ret
				} else if (hex == 0x2) {
     45e:	62 30       	cpi	r22, 0x02	; 2
     460:	09 f0       	breq	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	d7 c0       	rjmp	.+430    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
					enable(_port[0]);
     464:	80 81       	ld	r24, Z
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     466:	88 30       	cpi	r24, 0x08	; 8
     468:	70 f4       	brcc	.+28     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     46a:	4b b1       	in	r20, 0x0b	; 11
     46c:	87 70       	andi	r24, 0x07	; 7
     46e:	21 e0       	ldi	r18, 0x01	; 1
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	b9 01       	movw	r22, r18
     474:	02 c0       	rjmp	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     476:	66 0f       	add	r22, r22
     478:	77 1f       	adc	r23, r23
     47a:	8a 95       	dec	r24
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47e:	cb 01       	movw	r24, r22
     480:	84 2b       	or	r24, r20
     482:	8b b9       	out	0x0b, r24	; 11
     484:	0d c0       	rjmp	.+26     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     486:	45 b1       	in	r20, 0x05	; 5
     488:	87 70       	andi	r24, 0x07	; 7
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	b9 01       	movw	r22, r18
     490:	02 c0       	rjmp	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	66 0f       	add	r22, r22
     494:	77 1f       	adc	r23, r23
     496:	8a 95       	dec	r24
     498:	e2 f7       	brpl	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49a:	cb 01       	movw	r24, r22
     49c:	84 2b       	or	r24, r20
     49e:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     4a0:	81 81       	ldd	r24, Z+1	; 0x01
     4a2:	88 30       	cpi	r24, 0x08	; 8
     4a4:	70 f4       	brcc	.+28     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4a6:	4b b1       	in	r20, 0x0b	; 11
     4a8:	87 70       	andi	r24, 0x07	; 7
     4aa:	21 e0       	ldi	r18, 0x01	; 1
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	b9 01       	movw	r22, r18
     4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b2:	66 0f       	add	r22, r22
     4b4:	77 1f       	adc	r23, r23
     4b6:	8a 95       	dec	r24
     4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	cb 01       	movw	r24, r22
     4bc:	84 2b       	or	r24, r20
     4be:	8b b9       	out	0x0b, r24	; 11
     4c0:	0d c0       	rjmp	.+26     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4c2:	45 b1       	in	r20, 0x05	; 5
     4c4:	87 70       	andi	r24, 0x07	; 7
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	b9 01       	movw	r22, r18
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4ce:	66 0f       	add	r22, r22
     4d0:	77 1f       	adc	r23, r23
     4d2:	8a 95       	dec	r24
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4d6:	cb 01       	movw	r24, r22
     4d8:	84 2b       	or	r24, r20
     4da:	85 b9       	out	0x05, r24	; 5
					disable(_port[2]);
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     4de:	88 30       	cpi	r24, 0x08	; 8
     4e0:	78 f4       	brcc	.+30     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4e2:	4b b1       	in	r20, 0x0b	; 11
     4e4:	87 70       	andi	r24, 0x07	; 7
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	b9 01       	movw	r22, r18
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4ee:	66 0f       	add	r22, r22
     4f0:	77 1f       	adc	r23, r23
     4f2:	8a 95       	dec	r24
     4f4:	e2 f7       	brpl	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4f6:	cb 01       	movw	r24, r22
     4f8:	80 95       	com	r24
     4fa:	84 23       	and	r24, r20
     4fc:	8b b9       	out	0x0b, r24	; 11
     4fe:	0e c0       	rjmp	.+28     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     500:	45 b1       	in	r20, 0x05	; 5
     502:	87 70       	andi	r24, 0x07	; 7
     504:	21 e0       	ldi	r18, 0x01	; 1
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	b9 01       	movw	r22, r18
     50a:	02 c0       	rjmp	.+4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     50c:	66 0f       	add	r22, r22
     50e:	77 1f       	adc	r23, r23
     510:	8a 95       	dec	r24
     512:	e2 f7       	brpl	.-8      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     514:	cb 01       	movw	r24, r22
     516:	80 95       	com	r24
     518:	84 23       	and	r24, r20
     51a:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     51c:	83 81       	ldd	r24, Z+3	; 0x03
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     51e:	88 30       	cpi	r24, 0x08	; 8
     520:	70 f4       	brcc	.+28     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     522:	4b b1       	in	r20, 0x0b	; 11
     524:	87 70       	andi	r24, 0x07	; 7
     526:	21 e0       	ldi	r18, 0x01	; 1
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	b9 01       	movw	r22, r18
     52c:	02 c0       	rjmp	.+4      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     52e:	66 0f       	add	r22, r22
     530:	77 1f       	adc	r23, r23
     532:	8a 95       	dec	r24
     534:	e2 f7       	brpl	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     536:	cb 01       	movw	r24, r22
     538:	84 2b       	or	r24, r20
     53a:	8b b9       	out	0x0b, r24	; 11
     53c:	0d c0       	rjmp	.+26     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     53e:	45 b1       	in	r20, 0x05	; 5
     540:	87 70       	andi	r24, 0x07	; 7
     542:	21 e0       	ldi	r18, 0x01	; 1
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	b9 01       	movw	r22, r18
     548:	02 c0       	rjmp	.+4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54a:	66 0f       	add	r22, r22
     54c:	77 1f       	adc	r23, r23
     54e:	8a 95       	dec	r24
     550:	e2 f7       	brpl	.-8      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     552:	cb 01       	movw	r24, r22
     554:	84 2b       	or	r24, r20
     556:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
     558:	84 81       	ldd	r24, Z+4	; 0x04
     55a:	88 30       	cpi	r24, 0x08	; 8
     55c:	70 f4       	brcc	.+28     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     55e:	4b b1       	in	r20, 0x0b	; 11
     560:	87 70       	andi	r24, 0x07	; 7
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	b9 01       	movw	r22, r18
     568:	02 c0       	rjmp	.+4      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	8a 95       	dec	r24
     570:	e2 f7       	brpl	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     572:	cb 01       	movw	r24, r22
     574:	84 2b       	or	r24, r20
     576:	8b b9       	out	0x0b, r24	; 11
     578:	0d c0       	rjmp	.+26     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     57a:	45 b1       	in	r20, 0x05	; 5
     57c:	87 70       	andi	r24, 0x07	; 7
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	b9 01       	movw	r22, r18
     584:	02 c0       	rjmp	.+4      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     586:	66 0f       	add	r22, r22
     588:	77 1f       	adc	r23, r23
     58a:	8a 95       	dec	r24
     58c:	e2 f7       	brpl	.-8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     58e:	cb 01       	movw	r24, r22
     590:	84 2b       	or	r24, r20
     592:	85 b9       	out	0x05, r24	; 5
					disable(_port[5]);
     594:	85 81       	ldd	r24, Z+5	; 0x05
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     596:	88 30       	cpi	r24, 0x08	; 8
     598:	78 f4       	brcc	.+30     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     59a:	4b b1       	in	r20, 0x0b	; 11
     59c:	87 70       	andi	r24, 0x07	; 7
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	b9 01       	movw	r22, r18
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     5a6:	66 0f       	add	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	8a 95       	dec	r24
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     5ae:	cb 01       	movw	r24, r22
     5b0:	80 95       	com	r24
     5b2:	84 23       	and	r24, r20
     5b4:	8b b9       	out	0x0b, r24	; 11
     5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5b8:	45 b1       	in	r20, 0x05	; 5
     5ba:	87 70       	andi	r24, 0x07	; 7
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	b9 01       	movw	r22, r18
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
     5c4:	66 0f       	add	r22, r22
     5c6:	77 1f       	adc	r23, r23
     5c8:	8a 95       	dec	r24
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     5cc:	cb 01       	movw	r24, r22
     5ce:	80 95       	com	r24
     5d0:	84 23       	and	r24, r20
     5d2:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
     5d4:	86 81       	ldd	r24, Z+6	; 0x06
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     5d6:	88 30       	cpi	r24, 0x08	; 8
     5d8:	70 f4       	brcc	.+28     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5da:	4b b1       	in	r20, 0x0b	; 11
     5dc:	87 70       	andi	r24, 0x07	; 7
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	b9 01       	movw	r22, r18
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5e6:	66 0f       	add	r22, r22
     5e8:	77 1f       	adc	r23, r23
     5ea:	8a 95       	dec	r24
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5ee:	cb 01       	movw	r24, r22
     5f0:	84 2b       	or	r24, r20
     5f2:	8b b9       	out	0x0b, r24	; 11
     5f4:	08 95       	ret
     5f6:	45 b1       	in	r20, 0x05	; 5
     5f8:	87 70       	andi	r24, 0x07	; 7
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	b9 01       	movw	r22, r18
     600:	02 c0       	rjmp	.+4      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     602:	66 0f       	add	r22, r22
     604:	77 1f       	adc	r23, r23
     606:	8a 95       	dec	r24
     608:	e2 f7       	brpl	.-8      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     60a:	cb 01       	movw	r24, r22
     60c:	84 2b       	or	r24, r20
     60e:	85 b9       	out	0x05, r24	; 5
     610:	08 95       	ret
				} else if (hex == 0x3) {
     612:	63 30       	cpi	r22, 0x03	; 3
     614:	09 f0       	breq	.+2      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     616:	d7 c0       	rjmp	.+430    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
					enable(_port[0]);
     618:	80 81       	ld	r24, Z
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	70 f4       	brcc	.+28     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     61e:	4b b1       	in	r20, 0x0b	; 11
     620:	87 70       	andi	r24, 0x07	; 7
     622:	21 e0       	ldi	r18, 0x01	; 1
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	b9 01       	movw	r22, r18
     628:	02 c0       	rjmp	.+4      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62a:	66 0f       	add	r22, r22
     62c:	77 1f       	adc	r23, r23
     62e:	8a 95       	dec	r24
     630:	e2 f7       	brpl	.-8      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     632:	cb 01       	movw	r24, r22
     634:	84 2b       	or	r24, r20
     636:	8b b9       	out	0x0b, r24	; 11
     638:	0d c0       	rjmp	.+26     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     63a:	45 b1       	in	r20, 0x05	; 5
     63c:	87 70       	andi	r24, 0x07	; 7
     63e:	21 e0       	ldi	r18, 0x01	; 1
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	b9 01       	movw	r22, r18
     644:	02 c0       	rjmp	.+4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     646:	66 0f       	add	r22, r22
     648:	77 1f       	adc	r23, r23
     64a:	8a 95       	dec	r24
     64c:	e2 f7       	brpl	.-8      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     64e:	cb 01       	movw	r24, r22
     650:	84 2b       	or	r24, r20
     652:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	88 30       	cpi	r24, 0x08	; 8
     658:	70 f4       	brcc	.+28     	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     65a:	4b b1       	in	r20, 0x0b	; 11
     65c:	87 70       	andi	r24, 0x07	; 7
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	b9 01       	movw	r22, r18
     664:	02 c0       	rjmp	.+4      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     666:	66 0f       	add	r22, r22
     668:	77 1f       	adc	r23, r23
     66a:	8a 95       	dec	r24
     66c:	e2 f7       	brpl	.-8      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     66e:	cb 01       	movw	r24, r22
     670:	84 2b       	or	r24, r20
     672:	8b b9       	out	0x0b, r24	; 11
     674:	0d c0       	rjmp	.+26     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     676:	45 b1       	in	r20, 0x05	; 5
     678:	87 70       	andi	r24, 0x07	; 7
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	b9 01       	movw	r22, r18
     680:	02 c0       	rjmp	.+4      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
     682:	66 0f       	add	r22, r22
     684:	77 1f       	adc	r23, r23
     686:	8a 95       	dec	r24
     688:	e2 f7       	brpl	.-8      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     68a:	cb 01       	movw	r24, r22
     68c:	84 2b       	or	r24, r20
     68e:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	88 30       	cpi	r24, 0x08	; 8
     694:	70 f4       	brcc	.+28     	; 0x6b2 <__LOCK_REGION_LENGTH__+0x2b2>
     696:	4b b1       	in	r20, 0x0b	; 11
     698:	87 70       	andi	r24, 0x07	; 7
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	b9 01       	movw	r22, r18
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6a2:	66 0f       	add	r22, r22
     6a4:	77 1f       	adc	r23, r23
     6a6:	8a 95       	dec	r24
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     6aa:	cb 01       	movw	r24, r22
     6ac:	84 2b       	or	r24, r20
     6ae:	8b b9       	out	0x0b, r24	; 11
     6b0:	0d c0       	rjmp	.+26     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6b2:	45 b1       	in	r20, 0x05	; 5
     6b4:	87 70       	andi	r24, 0x07	; 7
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	b9 01       	movw	r22, r18
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
     6be:	66 0f       	add	r22, r22
     6c0:	77 1f       	adc	r23, r23
     6c2:	8a 95       	dec	r24
     6c4:	e2 f7       	brpl	.-8      	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
     6c6:	cb 01       	movw	r24, r22
     6c8:	84 2b       	or	r24, r20
     6ca:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     6cc:	83 81       	ldd	r24, Z+3	; 0x03
     6ce:	88 30       	cpi	r24, 0x08	; 8
     6d0:	70 f4       	brcc	.+28     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     6d2:	4b b1       	in	r20, 0x0b	; 11
     6d4:	87 70       	andi	r24, 0x07	; 7
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	b9 01       	movw	r22, r18
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
     6de:	66 0f       	add	r22, r22
     6e0:	77 1f       	adc	r23, r23
     6e2:	8a 95       	dec	r24
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     6e6:	cb 01       	movw	r24, r22
     6e8:	84 2b       	or	r24, r20
     6ea:	8b b9       	out	0x0b, r24	; 11
     6ec:	0d c0       	rjmp	.+26     	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     6ee:	45 b1       	in	r20, 0x05	; 5
     6f0:	87 70       	andi	r24, 0x07	; 7
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	b9 01       	movw	r22, r18
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6fa:	66 0f       	add	r22, r22
     6fc:	77 1f       	adc	r23, r23
     6fe:	8a 95       	dec	r24
     700:	e2 f7       	brpl	.-8      	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
     702:	cb 01       	movw	r24, r22
     704:	84 2b       	or	r24, r20
     706:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
     708:	84 81       	ldd	r24, Z+4	; 0x04
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     70a:	88 30       	cpi	r24, 0x08	; 8
     70c:	78 f4       	brcc	.+30     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     70e:	4b b1       	in	r20, 0x0b	; 11
     710:	87 70       	andi	r24, 0x07	; 7
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	b9 01       	movw	r22, r18
     718:	02 c0       	rjmp	.+4      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     71a:	66 0f       	add	r22, r22
     71c:	77 1f       	adc	r23, r23
     71e:	8a 95       	dec	r24
     720:	e2 f7       	brpl	.-8      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     722:	cb 01       	movw	r24, r22
     724:	80 95       	com	r24
     726:	84 23       	and	r24, r20
     728:	8b b9       	out	0x0b, r24	; 11
     72a:	0e c0       	rjmp	.+28     	; 0x748 <__LOCK_REGION_LENGTH__+0x348>
     72c:	45 b1       	in	r20, 0x05	; 5
     72e:	87 70       	andi	r24, 0x07	; 7
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	b9 01       	movw	r22, r18
     736:	02 c0       	rjmp	.+4      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
     738:	66 0f       	add	r22, r22
     73a:	77 1f       	adc	r23, r23
     73c:	8a 95       	dec	r24
     73e:	e2 f7       	brpl	.-8      	; 0x738 <__LOCK_REGION_LENGTH__+0x338>
     740:	cb 01       	movw	r24, r22
     742:	80 95       	com	r24
     744:	84 23       	and	r24, r20
     746:	85 b9       	out	0x05, r24	; 5
					disable(_port[5]);
     748:	85 81       	ldd	r24, Z+5	; 0x05
     74a:	88 30       	cpi	r24, 0x08	; 8
     74c:	78 f4       	brcc	.+30     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     74e:	4b b1       	in	r20, 0x0b	; 11
     750:	87 70       	andi	r24, 0x07	; 7
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	b9 01       	movw	r22, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
     75a:	66 0f       	add	r22, r22
     75c:	77 1f       	adc	r23, r23
     75e:	8a 95       	dec	r24
     760:	e2 f7       	brpl	.-8      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     762:	cb 01       	movw	r24, r22
     764:	80 95       	com	r24
     766:	84 23       	and	r24, r20
     768:	8b b9       	out	0x0b, r24	; 11
     76a:	0e c0       	rjmp	.+28     	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     76c:	45 b1       	in	r20, 0x05	; 5
     76e:	87 70       	andi	r24, 0x07	; 7
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	b9 01       	movw	r22, r18
     776:	02 c0       	rjmp	.+4      	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     778:	66 0f       	add	r22, r22
     77a:	77 1f       	adc	r23, r23
     77c:	8a 95       	dec	r24
     77e:	e2 f7       	brpl	.-8      	; 0x778 <__LOCK_REGION_LENGTH__+0x378>
     780:	cb 01       	movw	r24, r22
     782:	80 95       	com	r24
     784:	84 23       	and	r24, r20
     786:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
     788:	86 81       	ldd	r24, Z+6	; 0x06
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     78a:	88 30       	cpi	r24, 0x08	; 8
     78c:	70 f4       	brcc	.+28     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
     78e:	4b b1       	in	r20, 0x0b	; 11
     790:	87 70       	andi	r24, 0x07	; 7
     792:	21 e0       	ldi	r18, 0x01	; 1
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	b9 01       	movw	r22, r18
     798:	02 c0       	rjmp	.+4      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
     79a:	66 0f       	add	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	8a 95       	dec	r24
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
     7a2:	cb 01       	movw	r24, r22
     7a4:	84 2b       	or	r24, r20
     7a6:	8b b9       	out	0x0b, r24	; 11
     7a8:	08 95       	ret
     7aa:	45 b1       	in	r20, 0x05	; 5
     7ac:	87 70       	andi	r24, 0x07	; 7
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	b9 01       	movw	r22, r18
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7b6:	66 0f       	add	r22, r22
     7b8:	77 1f       	adc	r23, r23
     7ba:	8a 95       	dec	r24
     7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
     7be:	cb 01       	movw	r24, r22
     7c0:	84 2b       	or	r24, r20
     7c2:	85 b9       	out	0x05, r24	; 5
     7c4:	08 95       	ret
				} else if (hex == 0x4) {
     7c6:	64 30       	cpi	r22, 0x04	; 4
     7c8:	09 f0       	breq	.+2      	; 0x7cc <__LOCK_REGION_LENGTH__+0x3cc>
     7ca:	d9 c0       	rjmp	.+434    	; 0x97e <__stack+0x7f>
					disable(_port[0]);
     7cc:	80 81       	ld	r24, Z
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     7ce:	88 30       	cpi	r24, 0x08	; 8
     7d0:	78 f4       	brcc	.+30     	; 0x7f0 <__LOCK_REGION_LENGTH__+0x3f0>
     7d2:	4b b1       	in	r20, 0x0b	; 11
     7d4:	87 70       	andi	r24, 0x07	; 7
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	b9 01       	movw	r22, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <__LOCK_REGION_LENGTH__+0x3e2>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	8a 95       	dec	r24
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <__LOCK_REGION_LENGTH__+0x3de>
     7e6:	cb 01       	movw	r24, r22
     7e8:	80 95       	com	r24
     7ea:	84 23       	and	r24, r20
     7ec:	8b b9       	out	0x0b, r24	; 11
     7ee:	0e c0       	rjmp	.+28     	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
     7f0:	45 b1       	in	r20, 0x05	; 5
     7f2:	87 70       	andi	r24, 0x07	; 7
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	b9 01       	movw	r22, r18
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
     7fc:	66 0f       	add	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	8a 95       	dec	r24
     802:	e2 f7       	brpl	.-8      	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     804:	cb 01       	movw	r24, r22
     806:	80 95       	com	r24
     808:	84 23       	and	r24, r20
     80a:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     80c:	81 81       	ldd	r24, Z+1	; 0x01
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     80e:	88 30       	cpi	r24, 0x08	; 8
     810:	70 f4       	brcc	.+28     	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
     812:	4b b1       	in	r20, 0x0b	; 11
     814:	87 70       	andi	r24, 0x07	; 7
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	b9 01       	movw	r22, r18
     81c:	02 c0       	rjmp	.+4      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
     81e:	66 0f       	add	r22, r22
     820:	77 1f       	adc	r23, r23
     822:	8a 95       	dec	r24
     824:	e2 f7       	brpl	.-8      	; 0x81e <__LOCK_REGION_LENGTH__+0x41e>
     826:	cb 01       	movw	r24, r22
     828:	84 2b       	or	r24, r20
     82a:	8b b9       	out	0x0b, r24	; 11
     82c:	0d c0       	rjmp	.+26     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
     82e:	45 b1       	in	r20, 0x05	; 5
     830:	87 70       	andi	r24, 0x07	; 7
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	b9 01       	movw	r22, r18
     838:	02 c0       	rjmp	.+4      	; 0x83e <__LOCK_REGION_LENGTH__+0x43e>
     83a:	66 0f       	add	r22, r22
     83c:	77 1f       	adc	r23, r23
     83e:	8a 95       	dec	r24
     840:	e2 f7       	brpl	.-8      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     842:	cb 01       	movw	r24, r22
     844:	84 2b       	or	r24, r20
     846:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	88 30       	cpi	r24, 0x08	; 8
     84c:	70 f4       	brcc	.+28     	; 0x86a <__LOCK_REGION_LENGTH__+0x46a>
     84e:	4b b1       	in	r20, 0x0b	; 11
     850:	87 70       	andi	r24, 0x07	; 7
     852:	21 e0       	ldi	r18, 0x01	; 1
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	b9 01       	movw	r22, r18
     858:	02 c0       	rjmp	.+4      	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     85a:	66 0f       	add	r22, r22
     85c:	77 1f       	adc	r23, r23
     85e:	8a 95       	dec	r24
     860:	e2 f7       	brpl	.-8      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     862:	cb 01       	movw	r24, r22
     864:	84 2b       	or	r24, r20
     866:	8b b9       	out	0x0b, r24	; 11
     868:	0d c0       	rjmp	.+26     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     86a:	45 b1       	in	r20, 0x05	; 5
     86c:	87 70       	andi	r24, 0x07	; 7
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	b9 01       	movw	r22, r18
     874:	02 c0       	rjmp	.+4      	; 0x87a <__LOCK_REGION_LENGTH__+0x47a>
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	8a 95       	dec	r24
     87c:	e2 f7       	brpl	.-8      	; 0x876 <__LOCK_REGION_LENGTH__+0x476>
     87e:	cb 01       	movw	r24, r22
     880:	84 2b       	or	r24, r20
     882:	85 b9       	out	0x05, r24	; 5
					disable(_port[3]);
     884:	83 81       	ldd	r24, Z+3	; 0x03
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     886:	88 30       	cpi	r24, 0x08	; 8
     888:	78 f4       	brcc	.+30     	; 0x8a8 <__LOCK_REGION_LENGTH__+0x4a8>
     88a:	4b b1       	in	r20, 0x0b	; 11
     88c:	87 70       	andi	r24, 0x07	; 7
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	b9 01       	movw	r22, r18
     894:	02 c0       	rjmp	.+4      	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
     896:	66 0f       	add	r22, r22
     898:	77 1f       	adc	r23, r23
     89a:	8a 95       	dec	r24
     89c:	e2 f7       	brpl	.-8      	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     89e:	cb 01       	movw	r24, r22
     8a0:	80 95       	com	r24
     8a2:	84 23       	and	r24, r20
     8a4:	8b b9       	out	0x0b, r24	; 11
     8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <__LOCK_REGION_LENGTH__+0x4c4>
     8a8:	45 b1       	in	r20, 0x05	; 5
     8aa:	87 70       	andi	r24, 0x07	; 7
     8ac:	21 e0       	ldi	r18, 0x01	; 1
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	b9 01       	movw	r22, r18
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__LOCK_REGION_LENGTH__+0x4b8>
     8b4:	66 0f       	add	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	8a 95       	dec	r24
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
     8bc:	cb 01       	movw	r24, r22
     8be:	80 95       	com	r24
     8c0:	84 23       	and	r24, r20
     8c2:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
     8c4:	84 81       	ldd	r24, Z+4	; 0x04
     8c6:	88 30       	cpi	r24, 0x08	; 8
     8c8:	78 f4       	brcc	.+30     	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
     8ca:	4b b1       	in	r20, 0x0b	; 11
     8cc:	87 70       	andi	r24, 0x07	; 7
     8ce:	21 e0       	ldi	r18, 0x01	; 1
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	b9 01       	movw	r22, r18
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
     8d6:	66 0f       	add	r22, r22
     8d8:	77 1f       	adc	r23, r23
     8da:	8a 95       	dec	r24
     8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
     8de:	cb 01       	movw	r24, r22
     8e0:	80 95       	com	r24
     8e2:	84 23       	and	r24, r20
     8e4:	8b b9       	out	0x0b, r24	; 11
     8e6:	0e c0       	rjmp	.+28     	; 0x904 <__stack+0x5>
     8e8:	45 b1       	in	r20, 0x05	; 5
     8ea:	87 70       	andi	r24, 0x07	; 7
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
     8f4:	66 0f       	add	r22, r22
     8f6:	77 1f       	adc	r23, r23
     8f8:	8a 95       	dec	r24
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
     8fc:	cb 01       	movw	r24, r22
     8fe:	80 95       	com	r24
     900:	84 23       	and	r24, r20
     902:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
     904:	85 81       	ldd	r24, Z+5	; 0x05
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     906:	88 30       	cpi	r24, 0x08	; 8
     908:	70 f4       	brcc	.+28     	; 0x926 <__stack+0x27>
     90a:	4b b1       	in	r20, 0x0b	; 11
     90c:	87 70       	andi	r24, 0x07	; 7
     90e:	21 e0       	ldi	r18, 0x01	; 1
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	b9 01       	movw	r22, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
     916:	66 0f       	add	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	8a 95       	dec	r24
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__stack+0x17>
     91e:	cb 01       	movw	r24, r22
     920:	84 2b       	or	r24, r20
     922:	8b b9       	out	0x0b, r24	; 11
     924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0x41>
     926:	45 b1       	in	r20, 0x05	; 5
     928:	87 70       	andi	r24, 0x07	; 7
     92a:	21 e0       	ldi	r18, 0x01	; 1
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	b9 01       	movw	r22, r18
     930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	8a 95       	dec	r24
     938:	e2 f7       	brpl	.-8      	; 0x932 <__stack+0x33>
     93a:	cb 01       	movw	r24, r22
     93c:	84 2b       	or	r24, r20
     93e:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
     940:	86 81       	ldd	r24, Z+6	; 0x06
     942:	88 30       	cpi	r24, 0x08	; 8
     944:	70 f4       	brcc	.+28     	; 0x962 <__stack+0x63>
     946:	4b b1       	in	r20, 0x0b	; 11
     948:	87 70       	andi	r24, 0x07	; 7
     94a:	21 e0       	ldi	r18, 0x01	; 1
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	b9 01       	movw	r22, r18
     950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
     952:	66 0f       	add	r22, r22
     954:	77 1f       	adc	r23, r23
     956:	8a 95       	dec	r24
     958:	e2 f7       	brpl	.-8      	; 0x952 <__stack+0x53>
     95a:	cb 01       	movw	r24, r22
     95c:	84 2b       	or	r24, r20
     95e:	8b b9       	out	0x0b, r24	; 11
     960:	08 95       	ret
     962:	45 b1       	in	r20, 0x05	; 5
     964:	87 70       	andi	r24, 0x07	; 7
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	b9 01       	movw	r22, r18
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
     96e:	66 0f       	add	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	8a 95       	dec	r24
     974:	e2 f7       	brpl	.-8      	; 0x96e <__stack+0x6f>
     976:	cb 01       	movw	r24, r22
     978:	84 2b       	or	r24, r20
     97a:	85 b9       	out	0x05, r24	; 5
     97c:	08 95       	ret
				} else if (hex == 0x5) {
     97e:	65 30       	cpi	r22, 0x05	; 5
     980:	09 f0       	breq	.+2      	; 0x984 <__stack+0x85>
     982:	d7 c0       	rjmp	.+430    	; 0xb32 <__stack+0x233>
					enable(_port[0]);
     984:	80 81       	ld	r24, Z
     986:	88 30       	cpi	r24, 0x08	; 8
     988:	70 f4       	brcc	.+28     	; 0x9a6 <__stack+0xa7>
     98a:	4b b1       	in	r20, 0x0b	; 11
     98c:	87 70       	andi	r24, 0x07	; 7
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	b9 01       	movw	r22, r18
     994:	02 c0       	rjmp	.+4      	; 0x99a <__stack+0x9b>
     996:	66 0f       	add	r22, r22
     998:	77 1f       	adc	r23, r23
     99a:	8a 95       	dec	r24
     99c:	e2 f7       	brpl	.-8      	; 0x996 <__stack+0x97>
     99e:	cb 01       	movw	r24, r22
     9a0:	84 2b       	or	r24, r20
     9a2:	8b b9       	out	0x0b, r24	; 11
     9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__stack+0xc1>
     9a6:	45 b1       	in	r20, 0x05	; 5
     9a8:	87 70       	andi	r24, 0x07	; 7
     9aa:	21 e0       	ldi	r18, 0x01	; 1
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	b9 01       	movw	r22, r18
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <__stack+0xb7>
     9b2:	66 0f       	add	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	8a 95       	dec	r24
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <__stack+0xb3>
     9ba:	cb 01       	movw	r24, r22
     9bc:	84 2b       	or	r24, r20
     9be:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     9c2:	88 30       	cpi	r24, 0x08	; 8
     9c4:	78 f4       	brcc	.+30     	; 0x9e4 <__stack+0xe5>
     9c6:	4b b1       	in	r20, 0x0b	; 11
     9c8:	87 70       	andi	r24, 0x07	; 7
     9ca:	21 e0       	ldi	r18, 0x01	; 1
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	b9 01       	movw	r22, r18
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	8a 95       	dec	r24
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <__stack+0xd3>
     9da:	cb 01       	movw	r24, r22
     9dc:	80 95       	com	r24
     9de:	84 23       	and	r24, r20
     9e0:	8b b9       	out	0x0b, r24	; 11
     9e2:	0e c0       	rjmp	.+28     	; 0xa00 <__stack+0x101>
     9e4:	45 b1       	in	r20, 0x05	; 5
     9e6:	87 70       	andi	r24, 0x07	; 7
     9e8:	21 e0       	ldi	r18, 0x01	; 1
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	b9 01       	movw	r22, r18
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
     9f0:	66 0f       	add	r22, r22
     9f2:	77 1f       	adc	r23, r23
     9f4:	8a 95       	dec	r24
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <__stack+0xf1>
     9f8:	cb 01       	movw	r24, r22
     9fa:	80 95       	com	r24
     9fc:	84 23       	and	r24, r20
     9fe:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     a00:	82 81       	ldd	r24, Z+2	; 0x02
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     a02:	88 30       	cpi	r24, 0x08	; 8
     a04:	70 f4       	brcc	.+28     	; 0xa22 <__stack+0x123>
     a06:	4b b1       	in	r20, 0x0b	; 11
     a08:	87 70       	andi	r24, 0x07	; 7
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	b9 01       	movw	r22, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x117>
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	8a 95       	dec	r24
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <__stack+0x113>
     a1a:	cb 01       	movw	r24, r22
     a1c:	84 2b       	or	r24, r20
     a1e:	8b b9       	out	0x0b, r24	; 11
     a20:	0d c0       	rjmp	.+26     	; 0xa3c <__stack+0x13d>
     a22:	45 b1       	in	r20, 0x05	; 5
     a24:	87 70       	andi	r24, 0x07	; 7
     a26:	21 e0       	ldi	r18, 0x01	; 1
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	b9 01       	movw	r22, r18
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__stack+0x133>
     a2e:	66 0f       	add	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	8a 95       	dec	r24
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <__stack+0x12f>
     a36:	cb 01       	movw	r24, r22
     a38:	84 2b       	or	r24, r20
     a3a:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     a3c:	83 81       	ldd	r24, Z+3	; 0x03
     a3e:	88 30       	cpi	r24, 0x08	; 8
     a40:	70 f4       	brcc	.+28     	; 0xa5e <__stack+0x15f>
     a42:	4b b1       	in	r20, 0x0b	; 11
     a44:	87 70       	andi	r24, 0x07	; 7
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	b9 01       	movw	r22, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__stack+0x153>
     a4e:	66 0f       	add	r22, r22
     a50:	77 1f       	adc	r23, r23
     a52:	8a 95       	dec	r24
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <__stack+0x14f>
     a56:	cb 01       	movw	r24, r22
     a58:	84 2b       	or	r24, r20
     a5a:	8b b9       	out	0x0b, r24	; 11
     a5c:	0d c0       	rjmp	.+26     	; 0xa78 <__stack+0x179>
     a5e:	45 b1       	in	r20, 0x05	; 5
     a60:	87 70       	andi	r24, 0x07	; 7
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	b9 01       	movw	r22, r18
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <__stack+0x16f>
     a6a:	66 0f       	add	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	8a 95       	dec	r24
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <__stack+0x16b>
     a72:	cb 01       	movw	r24, r22
     a74:	84 2b       	or	r24, r20
     a76:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
     a78:	84 81       	ldd	r24, Z+4	; 0x04
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     a7a:	88 30       	cpi	r24, 0x08	; 8
     a7c:	78 f4       	brcc	.+30     	; 0xa9c <__stack+0x19d>
     a7e:	4b b1       	in	r20, 0x0b	; 11
     a80:	87 70       	andi	r24, 0x07	; 7
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	b9 01       	movw	r22, r18
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x18f>
     a8a:	66 0f       	add	r22, r22
     a8c:	77 1f       	adc	r23, r23
     a8e:	8a 95       	dec	r24
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <__stack+0x18b>
     a92:	cb 01       	movw	r24, r22
     a94:	80 95       	com	r24
     a96:	84 23       	and	r24, r20
     a98:	8b b9       	out	0x0b, r24	; 11
     a9a:	0e c0       	rjmp	.+28     	; 0xab8 <__stack+0x1b9>
     a9c:	45 b1       	in	r20, 0x05	; 5
     a9e:	87 70       	andi	r24, 0x07	; 7
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	b9 01       	movw	r22, r18
     aa6:	02 c0       	rjmp	.+4      	; 0xaac <__stack+0x1ad>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	8a 95       	dec	r24
     aae:	e2 f7       	brpl	.-8      	; 0xaa8 <__stack+0x1a9>
     ab0:	cb 01       	movw	r24, r22
     ab2:	80 95       	com	r24
     ab4:	84 23       	and	r24, r20
     ab6:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
     ab8:	85 81       	ldd	r24, Z+5	; 0x05
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     aba:	88 30       	cpi	r24, 0x08	; 8
     abc:	70 f4       	brcc	.+28     	; 0xada <__stack+0x1db>
     abe:	4b b1       	in	r20, 0x0b	; 11
     ac0:	87 70       	andi	r24, 0x07	; 7
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	b9 01       	movw	r22, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <__stack+0x1cf>
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	8a 95       	dec	r24
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <__stack+0x1cb>
     ad2:	cb 01       	movw	r24, r22
     ad4:	84 2b       	or	r24, r20
     ad6:	8b b9       	out	0x0b, r24	; 11
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <__stack+0x1f5>
     ada:	45 b1       	in	r20, 0x05	; 5
     adc:	87 70       	andi	r24, 0x07	; 7
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	b9 01       	movw	r22, r18
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <__stack+0x1eb>
     ae6:	66 0f       	add	r22, r22
     ae8:	77 1f       	adc	r23, r23
     aea:	8a 95       	dec	r24
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <__stack+0x1e7>
     aee:	cb 01       	movw	r24, r22
     af0:	84 2b       	or	r24, r20
     af2:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
     af4:	86 81       	ldd	r24, Z+6	; 0x06
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	70 f4       	brcc	.+28     	; 0xb16 <__stack+0x217>
     afa:	4b b1       	in	r20, 0x0b	; 11
     afc:	87 70       	andi	r24, 0x07	; 7
     afe:	21 e0       	ldi	r18, 0x01	; 1
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	b9 01       	movw	r22, r18
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <__stack+0x20b>
     b06:	66 0f       	add	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	8a 95       	dec	r24
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <__stack+0x207>
     b0e:	cb 01       	movw	r24, r22
     b10:	84 2b       	or	r24, r20
     b12:	8b b9       	out	0x0b, r24	; 11
     b14:	08 95       	ret
     b16:	45 b1       	in	r20, 0x05	; 5
     b18:	87 70       	andi	r24, 0x07	; 7
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	b9 01       	movw	r22, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x227>
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	8a 95       	dec	r24
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <__stack+0x223>
     b2a:	cb 01       	movw	r24, r22
     b2c:	84 2b       	or	r24, r20
     b2e:	85 b9       	out	0x05, r24	; 5
     b30:	08 95       	ret
				} else if (hex == 0x6) {
     b32:	66 30       	cpi	r22, 0x06	; 6
     b34:	09 f0       	breq	.+2      	; 0xb38 <__stack+0x239>
     b36:	d5 c0       	rjmp	.+426    	; 0xce2 <__stack+0x3e3>
					enable(_port[0]);
     b38:	80 81       	ld	r24, Z
     b3a:	88 30       	cpi	r24, 0x08	; 8
     b3c:	70 f4       	brcc	.+28     	; 0xb5a <__stack+0x25b>
     b3e:	4b b1       	in	r20, 0x0b	; 11
     b40:	87 70       	andi	r24, 0x07	; 7
     b42:	21 e0       	ldi	r18, 0x01	; 1
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	b9 01       	movw	r22, r18
     b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x24f>
     b4a:	66 0f       	add	r22, r22
     b4c:	77 1f       	adc	r23, r23
     b4e:	8a 95       	dec	r24
     b50:	e2 f7       	brpl	.-8      	; 0xb4a <__stack+0x24b>
     b52:	cb 01       	movw	r24, r22
     b54:	84 2b       	or	r24, r20
     b56:	8b b9       	out	0x0b, r24	; 11
     b58:	0d c0       	rjmp	.+26     	; 0xb74 <__stack+0x275>
     b5a:	45 b1       	in	r20, 0x05	; 5
     b5c:	87 70       	andi	r24, 0x07	; 7
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	b9 01       	movw	r22, r18
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x26b>
     b66:	66 0f       	add	r22, r22
     b68:	77 1f       	adc	r23, r23
     b6a:	8a 95       	dec	r24
     b6c:	e2 f7       	brpl	.-8      	; 0xb66 <__stack+0x267>
     b6e:	cb 01       	movw	r24, r22
     b70:	84 2b       	or	r24, r20
     b72:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
     b74:	81 81       	ldd	r24, Z+1	; 0x01
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	78 f4       	brcc	.+30     	; 0xb98 <__stack+0x299>
     b7a:	4b b1       	in	r20, 0x0b	; 11
     b7c:	87 70       	andi	r24, 0x07	; 7
     b7e:	21 e0       	ldi	r18, 0x01	; 1
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	b9 01       	movw	r22, r18
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x28b>
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	8a 95       	dec	r24
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <__stack+0x287>
     b8e:	cb 01       	movw	r24, r22
     b90:	80 95       	com	r24
     b92:	84 23       	and	r24, r20
     b94:	8b b9       	out	0x0b, r24	; 11
     b96:	0e c0       	rjmp	.+28     	; 0xbb4 <__stack+0x2b5>
     b98:	45 b1       	in	r20, 0x05	; 5
     b9a:	87 70       	andi	r24, 0x07	; 7
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	b9 01       	movw	r22, r18
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <__stack+0x2a9>
     ba4:	66 0f       	add	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	8a 95       	dec	r24
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <__stack+0x2a5>
     bac:	cb 01       	movw	r24, r22
     bae:	80 95       	com	r24
     bb0:	84 23       	and	r24, r20
     bb2:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     bb6:	88 30       	cpi	r24, 0x08	; 8
     bb8:	70 f4       	brcc	.+28     	; 0xbd6 <__stack+0x2d7>
     bba:	4b b1       	in	r20, 0x0b	; 11
     bbc:	87 70       	andi	r24, 0x07	; 7
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	b9 01       	movw	r22, r18
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <__stack+0x2cb>
     bc6:	66 0f       	add	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <__stack+0x2c7>
     bce:	cb 01       	movw	r24, r22
     bd0:	84 2b       	or	r24, r20
     bd2:	8b b9       	out	0x0b, r24	; 11
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__stack+0x2f1>
     bd6:	45 b1       	in	r20, 0x05	; 5
     bd8:	87 70       	andi	r24, 0x07	; 7
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	b9 01       	movw	r22, r18
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__stack+0x2e7>
     be2:	66 0f       	add	r22, r22
     be4:	77 1f       	adc	r23, r23
     be6:	8a 95       	dec	r24
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <__stack+0x2e3>
     bea:	cb 01       	movw	r24, r22
     bec:	84 2b       	or	r24, r20
     bee:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	88 30       	cpi	r24, 0x08	; 8
     bf4:	70 f4       	brcc	.+28     	; 0xc12 <__stack+0x313>
     bf6:	4b b1       	in	r20, 0x0b	; 11
     bf8:	87 70       	andi	r24, 0x07	; 7
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	b9 01       	movw	r22, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <__stack+0x307>
     c02:	66 0f       	add	r22, r22
     c04:	77 1f       	adc	r23, r23
     c06:	8a 95       	dec	r24
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <__stack+0x303>
     c0a:	cb 01       	movw	r24, r22
     c0c:	84 2b       	or	r24, r20
     c0e:	8b b9       	out	0x0b, r24	; 11
     c10:	0d c0       	rjmp	.+26     	; 0xc2c <__stack+0x32d>
     c12:	45 b1       	in	r20, 0x05	; 5
     c14:	87 70       	andi	r24, 0x07	; 7
     c16:	21 e0       	ldi	r18, 0x01	; 1
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	b9 01       	movw	r22, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <__stack+0x323>
     c1e:	66 0f       	add	r22, r22
     c20:	77 1f       	adc	r23, r23
     c22:	8a 95       	dec	r24
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <__stack+0x31f>
     c26:	cb 01       	movw	r24, r22
     c28:	84 2b       	or	r24, r20
     c2a:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
     c2c:	84 81       	ldd	r24, Z+4	; 0x04
     c2e:	88 30       	cpi	r24, 0x08	; 8
     c30:	70 f4       	brcc	.+28     	; 0xc4e <__stack+0x34f>
     c32:	4b b1       	in	r20, 0x0b	; 11
     c34:	87 70       	andi	r24, 0x07	; 7
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	b9 01       	movw	r22, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <__stack+0x343>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	8a 95       	dec	r24
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <__stack+0x33f>
     c46:	cb 01       	movw	r24, r22
     c48:	84 2b       	or	r24, r20
     c4a:	8b b9       	out	0x0b, r24	; 11
     c4c:	0d c0       	rjmp	.+26     	; 0xc68 <__stack+0x369>
     c4e:	45 b1       	in	r20, 0x05	; 5
     c50:	87 70       	andi	r24, 0x07	; 7
     c52:	21 e0       	ldi	r18, 0x01	; 1
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	b9 01       	movw	r22, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <__stack+0x35f>
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	8a 95       	dec	r24
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <__stack+0x35b>
     c62:	cb 01       	movw	r24, r22
     c64:	84 2b       	or	r24, r20
     c66:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
     c68:	85 81       	ldd	r24, Z+5	; 0x05
     c6a:	88 30       	cpi	r24, 0x08	; 8
     c6c:	70 f4       	brcc	.+28     	; 0xc8a <__stack+0x38b>
     c6e:	4b b1       	in	r20, 0x0b	; 11
     c70:	87 70       	andi	r24, 0x07	; 7
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	b9 01       	movw	r22, r18
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <__stack+0x37f>
     c7a:	66 0f       	add	r22, r22
     c7c:	77 1f       	adc	r23, r23
     c7e:	8a 95       	dec	r24
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <__stack+0x37b>
     c82:	cb 01       	movw	r24, r22
     c84:	84 2b       	or	r24, r20
     c86:	8b b9       	out	0x0b, r24	; 11
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <__stack+0x3a5>
     c8a:	45 b1       	in	r20, 0x05	; 5
     c8c:	87 70       	andi	r24, 0x07	; 7
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	b9 01       	movw	r22, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__stack+0x39b>
     c96:	66 0f       	add	r22, r22
     c98:	77 1f       	adc	r23, r23
     c9a:	8a 95       	dec	r24
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <__stack+0x397>
     c9e:	cb 01       	movw	r24, r22
     ca0:	84 2b       	or	r24, r20
     ca2:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	88 30       	cpi	r24, 0x08	; 8
     ca8:	70 f4       	brcc	.+28     	; 0xcc6 <__stack+0x3c7>
     caa:	4b b1       	in	r20, 0x0b	; 11
     cac:	87 70       	andi	r24, 0x07	; 7
     cae:	21 e0       	ldi	r18, 0x01	; 1
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	b9 01       	movw	r22, r18
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <__stack+0x3bb>
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	8a 95       	dec	r24
     cbc:	e2 f7       	brpl	.-8      	; 0xcb6 <__stack+0x3b7>
     cbe:	cb 01       	movw	r24, r22
     cc0:	84 2b       	or	r24, r20
     cc2:	8b b9       	out	0x0b, r24	; 11
     cc4:	08 95       	ret
     cc6:	45 b1       	in	r20, 0x05	; 5
     cc8:	87 70       	andi	r24, 0x07	; 7
     cca:	21 e0       	ldi	r18, 0x01	; 1
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	b9 01       	movw	r22, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <__stack+0x3d7>
     cd2:	66 0f       	add	r22, r22
     cd4:	77 1f       	adc	r23, r23
     cd6:	8a 95       	dec	r24
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <__stack+0x3d3>
     cda:	cb 01       	movw	r24, r22
     cdc:	84 2b       	or	r24, r20
     cde:	85 b9       	out	0x05, r24	; 5
     ce0:	08 95       	ret
				} else if (hex == 0x7) {
     ce2:	67 30       	cpi	r22, 0x07	; 7
     ce4:	09 f0       	breq	.+2      	; 0xce8 <__stack+0x3e9>
     ce6:	db c0       	rjmp	.+438    	; 0xe9e <__stack+0x59f>
					enable(_port[0]);
     ce8:	80 81       	ld	r24, Z
     cea:	88 30       	cpi	r24, 0x08	; 8
     cec:	70 f4       	brcc	.+28     	; 0xd0a <__stack+0x40b>
     cee:	4b b1       	in	r20, 0x0b	; 11
     cf0:	87 70       	andi	r24, 0x07	; 7
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	b9 01       	movw	r22, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <__stack+0x3ff>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	8a 95       	dec	r24
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <__stack+0x3fb>
     d02:	cb 01       	movw	r24, r22
     d04:	84 2b       	or	r24, r20
     d06:	8b b9       	out	0x0b, r24	; 11
     d08:	0d c0       	rjmp	.+26     	; 0xd24 <__stack+0x425>
     d0a:	45 b1       	in	r20, 0x05	; 5
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	b9 01       	movw	r22, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <__stack+0x41b>
     d16:	66 0f       	add	r22, r22
     d18:	77 1f       	adc	r23, r23
     d1a:	8a 95       	dec	r24
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <__stack+0x417>
     d1e:	cb 01       	movw	r24, r22
     d20:	84 2b       	or	r24, r20
     d22:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	88 30       	cpi	r24, 0x08	; 8
     d28:	70 f4       	brcc	.+28     	; 0xd46 <__stack+0x447>
     d2a:	4b b1       	in	r20, 0x0b	; 11
     d2c:	87 70       	andi	r24, 0x07	; 7
     d2e:	21 e0       	ldi	r18, 0x01	; 1
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	b9 01       	movw	r22, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <__stack+0x43b>
     d36:	66 0f       	add	r22, r22
     d38:	77 1f       	adc	r23, r23
     d3a:	8a 95       	dec	r24
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <__stack+0x437>
     d3e:	cb 01       	movw	r24, r22
     d40:	84 2b       	or	r24, r20
     d42:	8b b9       	out	0x0b, r24	; 11
     d44:	0d c0       	rjmp	.+26     	; 0xd60 <__stack+0x461>
     d46:	45 b1       	in	r20, 0x05	; 5
     d48:	87 70       	andi	r24, 0x07	; 7
     d4a:	21 e0       	ldi	r18, 0x01	; 1
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	b9 01       	movw	r22, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <__stack+0x457>
     d52:	66 0f       	add	r22, r22
     d54:	77 1f       	adc	r23, r23
     d56:	8a 95       	dec	r24
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <__stack+0x453>
     d5a:	cb 01       	movw	r24, r22
     d5c:	84 2b       	or	r24, r20
     d5e:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	70 f4       	brcc	.+28     	; 0xd82 <__stack+0x483>
     d66:	4b b1       	in	r20, 0x0b	; 11
     d68:	87 70       	andi	r24, 0x07	; 7
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	b9 01       	movw	r22, r18
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <__stack+0x477>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	8a 95       	dec	r24
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <__stack+0x473>
     d7a:	cb 01       	movw	r24, r22
     d7c:	84 2b       	or	r24, r20
     d7e:	8b b9       	out	0x0b, r24	; 11
     d80:	0d c0       	rjmp	.+26     	; 0xd9c <__stack+0x49d>
     d82:	45 b1       	in	r20, 0x05	; 5
     d84:	87 70       	andi	r24, 0x07	; 7
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	b9 01       	movw	r22, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__stack+0x493>
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <__stack+0x48f>
     d96:	cb 01       	movw	r24, r22
     d98:	84 2b       	or	r24, r20
     d9a:	85 b9       	out	0x05, r24	; 5
					disable(_port[3]);
     d9c:	83 81       	ldd	r24, Z+3	; 0x03
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
     d9e:	88 30       	cpi	r24, 0x08	; 8
     da0:	78 f4       	brcc	.+30     	; 0xdc0 <__stack+0x4c1>
     da2:	4b b1       	in	r20, 0x0b	; 11
     da4:	87 70       	andi	r24, 0x07	; 7
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	b9 01       	movw	r22, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <__stack+0x4b3>
     dae:	66 0f       	add	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	8a 95       	dec	r24
     db4:	e2 f7       	brpl	.-8      	; 0xdae <__stack+0x4af>
     db6:	cb 01       	movw	r24, r22
     db8:	80 95       	com	r24
     dba:	84 23       	and	r24, r20
     dbc:	8b b9       	out	0x0b, r24	; 11
     dbe:	0e c0       	rjmp	.+28     	; 0xddc <__stack+0x4dd>
     dc0:	45 b1       	in	r20, 0x05	; 5
     dc2:	87 70       	andi	r24, 0x07	; 7
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	b9 01       	movw	r22, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <__stack+0x4d1>
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <__stack+0x4cd>
     dd4:	cb 01       	movw	r24, r22
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
     ddc:	84 81       	ldd	r24, Z+4	; 0x04
     dde:	88 30       	cpi	r24, 0x08	; 8
     de0:	78 f4       	brcc	.+30     	; 0xe00 <__stack+0x501>
     de2:	4b b1       	in	r20, 0x0b	; 11
     de4:	87 70       	andi	r24, 0x07	; 7
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	b9 01       	movw	r22, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__stack+0x4f3>
     dee:	66 0f       	add	r22, r22
     df0:	77 1f       	adc	r23, r23
     df2:	8a 95       	dec	r24
     df4:	e2 f7       	brpl	.-8      	; 0xdee <__stack+0x4ef>
     df6:	cb 01       	movw	r24, r22
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8b b9       	out	0x0b, r24	; 11
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <__stack+0x51d>
     e00:	45 b1       	in	r20, 0x05	; 5
     e02:	87 70       	andi	r24, 0x07	; 7
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	b9 01       	movw	r22, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <__stack+0x511>
     e0c:	66 0f       	add	r22, r22
     e0e:	77 1f       	adc	r23, r23
     e10:	8a 95       	dec	r24
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <__stack+0x50d>
     e14:	cb 01       	movw	r24, r22
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	85 b9       	out	0x05, r24	; 5
					disable(_port[5]);
     e1c:	85 81       	ldd	r24, Z+5	; 0x05
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	78 f4       	brcc	.+30     	; 0xe40 <__stack+0x541>
     e22:	4b b1       	in	r20, 0x0b	; 11
     e24:	87 70       	andi	r24, 0x07	; 7
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	b9 01       	movw	r22, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <__stack+0x533>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	8a 95       	dec	r24
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <__stack+0x52f>
     e36:	cb 01       	movw	r24, r22
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8b b9       	out	0x0b, r24	; 11
     e3e:	0e c0       	rjmp	.+28     	; 0xe5c <__stack+0x55d>
     e40:	45 b1       	in	r20, 0x05	; 5
     e42:	87 70       	andi	r24, 0x07	; 7
     e44:	21 e0       	ldi	r18, 0x01	; 1
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	b9 01       	movw	r22, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <__stack+0x551>
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	8a 95       	dec	r24
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <__stack+0x54d>
     e54:	cb 01       	movw	r24, r22
     e56:	80 95       	com	r24
     e58:	84 23       	and	r24, r20
     e5a:	85 b9       	out	0x05, r24	; 5
					disable(_port[6]);
     e5c:	86 81       	ldd	r24, Z+6	; 0x06
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	78 f4       	brcc	.+30     	; 0xe80 <__stack+0x581>
     e62:	4b b1       	in	r20, 0x0b	; 11
     e64:	87 70       	andi	r24, 0x07	; 7
     e66:	21 e0       	ldi	r18, 0x01	; 1
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	b9 01       	movw	r22, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <__stack+0x573>
     e6e:	66 0f       	add	r22, r22
     e70:	77 1f       	adc	r23, r23
     e72:	8a 95       	dec	r24
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <__stack+0x56f>
     e76:	cb 01       	movw	r24, r22
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8b b9       	out	0x0b, r24	; 11
     e7e:	08 95       	ret
     e80:	45 b1       	in	r20, 0x05	; 5
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	b9 01       	movw	r22, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <__stack+0x591>
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	8a 95       	dec	r24
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <__stack+0x58d>
     e94:	cb 01       	movw	r24, r22
     e96:	80 95       	com	r24
     e98:	84 23       	and	r24, r20
     e9a:	85 b9       	out	0x05, r24	; 5
     e9c:	08 95       	ret
				} else if (hex == 0x8) {
     e9e:	68 30       	cpi	r22, 0x08	; 8
     ea0:	09 f0       	breq	.+2      	; 0xea4 <__stack+0x5a5>
     ea2:	d3 c0       	rjmp	.+422    	; 0x104a <__stack+0x74b>
					enable(_port[0]);
     ea4:	80 81       	ld	r24, Z
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
     ea6:	88 30       	cpi	r24, 0x08	; 8
     ea8:	70 f4       	brcc	.+28     	; 0xec6 <__stack+0x5c7>
     eaa:	4b b1       	in	r20, 0x0b	; 11
     eac:	87 70       	andi	r24, 0x07	; 7
     eae:	21 e0       	ldi	r18, 0x01	; 1
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	b9 01       	movw	r22, r18
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <__stack+0x5bb>
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	8a 95       	dec	r24
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <__stack+0x5b7>
     ebe:	cb 01       	movw	r24, r22
     ec0:	84 2b       	or	r24, r20
     ec2:	8b b9       	out	0x0b, r24	; 11
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <__stack+0x5e1>
     ec6:	45 b1       	in	r20, 0x05	; 5
     ec8:	87 70       	andi	r24, 0x07	; 7
     eca:	21 e0       	ldi	r18, 0x01	; 1
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	b9 01       	movw	r22, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <__stack+0x5d7>
     ed2:	66 0f       	add	r22, r22
     ed4:	77 1f       	adc	r23, r23
     ed6:	8a 95       	dec	r24
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <__stack+0x5d3>
     eda:	cb 01       	movw	r24, r22
     edc:	84 2b       	or	r24, r20
     ede:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
     ee0:	81 81       	ldd	r24, Z+1	; 0x01
     ee2:	88 30       	cpi	r24, 0x08	; 8
     ee4:	70 f4       	brcc	.+28     	; 0xf02 <__stack+0x603>
     ee6:	4b b1       	in	r20, 0x0b	; 11
     ee8:	87 70       	andi	r24, 0x07	; 7
     eea:	21 e0       	ldi	r18, 0x01	; 1
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	b9 01       	movw	r22, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <__stack+0x5f7>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	8a 95       	dec	r24
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <__stack+0x5f3>
     efa:	cb 01       	movw	r24, r22
     efc:	84 2b       	or	r24, r20
     efe:	8b b9       	out	0x0b, r24	; 11
     f00:	0d c0       	rjmp	.+26     	; 0xf1c <__stack+0x61d>
     f02:	45 b1       	in	r20, 0x05	; 5
     f04:	87 70       	andi	r24, 0x07	; 7
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	b9 01       	movw	r22, r18
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <__stack+0x613>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	8a 95       	dec	r24
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <__stack+0x60f>
     f16:	cb 01       	movw	r24, r22
     f18:	84 2b       	or	r24, r20
     f1a:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	70 f4       	brcc	.+28     	; 0xf3e <__stack+0x63f>
     f22:	4b b1       	in	r20, 0x0b	; 11
     f24:	87 70       	andi	r24, 0x07	; 7
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	b9 01       	movw	r22, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <__stack+0x633>
     f2e:	66 0f       	add	r22, r22
     f30:	77 1f       	adc	r23, r23
     f32:	8a 95       	dec	r24
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <__stack+0x62f>
     f36:	cb 01       	movw	r24, r22
     f38:	84 2b       	or	r24, r20
     f3a:	8b b9       	out	0x0b, r24	; 11
     f3c:	0d c0       	rjmp	.+26     	; 0xf58 <__stack+0x659>
     f3e:	45 b1       	in	r20, 0x05	; 5
     f40:	87 70       	andi	r24, 0x07	; 7
     f42:	21 e0       	ldi	r18, 0x01	; 1
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	b9 01       	movw	r22, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <__stack+0x64f>
     f4a:	66 0f       	add	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	8a 95       	dec	r24
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <__stack+0x64b>
     f52:	cb 01       	movw	r24, r22
     f54:	84 2b       	or	r24, r20
     f56:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
     f58:	83 81       	ldd	r24, Z+3	; 0x03
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	70 f4       	brcc	.+28     	; 0xf7a <__stack+0x67b>
     f5e:	4b b1       	in	r20, 0x0b	; 11
     f60:	87 70       	andi	r24, 0x07	; 7
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	b9 01       	movw	r22, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <__stack+0x66f>
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <__stack+0x66b>
     f72:	cb 01       	movw	r24, r22
     f74:	84 2b       	or	r24, r20
     f76:	8b b9       	out	0x0b, r24	; 11
     f78:	0d c0       	rjmp	.+26     	; 0xf94 <__stack+0x695>
     f7a:	45 b1       	in	r20, 0x05	; 5
     f7c:	87 70       	andi	r24, 0x07	; 7
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	b9 01       	movw	r22, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <__stack+0x68b>
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	8a 95       	dec	r24
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <__stack+0x687>
     f8e:	cb 01       	movw	r24, r22
     f90:	84 2b       	or	r24, r20
     f92:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
     f94:	84 81       	ldd	r24, Z+4	; 0x04
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	70 f4       	brcc	.+28     	; 0xfb6 <__stack+0x6b7>
     f9a:	4b b1       	in	r20, 0x0b	; 11
     f9c:	87 70       	andi	r24, 0x07	; 7
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	b9 01       	movw	r22, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <__stack+0x6ab>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <__stack+0x6a7>
     fae:	cb 01       	movw	r24, r22
     fb0:	84 2b       	or	r24, r20
     fb2:	8b b9       	out	0x0b, r24	; 11
     fb4:	0d c0       	rjmp	.+26     	; 0xfd0 <__stack+0x6d1>
     fb6:	45 b1       	in	r20, 0x05	; 5
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	21 e0       	ldi	r18, 0x01	; 1
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	b9 01       	movw	r22, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <__stack+0x6c7>
     fc2:	66 0f       	add	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <__stack+0x6c3>
     fca:	cb 01       	movw	r24, r22
     fcc:	84 2b       	or	r24, r20
     fce:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
     fd0:	85 81       	ldd	r24, Z+5	; 0x05
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	70 f4       	brcc	.+28     	; 0xff2 <__stack+0x6f3>
     fd6:	4b b1       	in	r20, 0x0b	; 11
     fd8:	87 70       	andi	r24, 0x07	; 7
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	b9 01       	movw	r22, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <__stack+0x6e7>
     fe2:	66 0f       	add	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	8a 95       	dec	r24
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <__stack+0x6e3>
     fea:	cb 01       	movw	r24, r22
     fec:	84 2b       	or	r24, r20
     fee:	8b b9       	out	0x0b, r24	; 11
     ff0:	0d c0       	rjmp	.+26     	; 0x100c <__stack+0x70d>
     ff2:	45 b1       	in	r20, 0x05	; 5
     ff4:	87 70       	andi	r24, 0x07	; 7
     ff6:	21 e0       	ldi	r18, 0x01	; 1
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	b9 01       	movw	r22, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__stack+0x703>
     ffe:	66 0f       	add	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	8a 95       	dec	r24
    1004:	e2 f7       	brpl	.-8      	; 0xffe <__stack+0x6ff>
    1006:	cb 01       	movw	r24, r22
    1008:	84 2b       	or	r24, r20
    100a:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    100c:	86 81       	ldd	r24, Z+6	; 0x06
    100e:	88 30       	cpi	r24, 0x08	; 8
    1010:	70 f4       	brcc	.+28     	; 0x102e <__stack+0x72f>
    1012:	4b b1       	in	r20, 0x0b	; 11
    1014:	87 70       	andi	r24, 0x07	; 7
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	b9 01       	movw	r22, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <__stack+0x723>
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	8a 95       	dec	r24
    1024:	e2 f7       	brpl	.-8      	; 0x101e <__stack+0x71f>
    1026:	cb 01       	movw	r24, r22
    1028:	84 2b       	or	r24, r20
    102a:	8b b9       	out	0x0b, r24	; 11
    102c:	08 95       	ret
    102e:	45 b1       	in	r20, 0x05	; 5
    1030:	87 70       	andi	r24, 0x07	; 7
    1032:	21 e0       	ldi	r18, 0x01	; 1
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	b9 01       	movw	r22, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <__stack+0x73f>
    103a:	66 0f       	add	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	8a 95       	dec	r24
    1040:	e2 f7       	brpl	.-8      	; 0x103a <__stack+0x73b>
    1042:	cb 01       	movw	r24, r22
    1044:	84 2b       	or	r24, r20
    1046:	85 b9       	out	0x05, r24	; 5
    1048:	08 95       	ret
				} else if (hex == 0x9) {
    104a:	69 30       	cpi	r22, 0x09	; 9
    104c:	09 f0       	breq	.+2      	; 0x1050 <__stack+0x751>
    104e:	d5 c0       	rjmp	.+426    	; 0x11fa <__stack+0x8fb>
					enable(_port[0]);
    1050:	80 81       	ld	r24, Z
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	70 f4       	brcc	.+28     	; 0x1072 <__stack+0x773>
    1056:	4b b1       	in	r20, 0x0b	; 11
    1058:	87 70       	andi	r24, 0x07	; 7
    105a:	21 e0       	ldi	r18, 0x01	; 1
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	b9 01       	movw	r22, r18
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <__stack+0x767>
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	8a 95       	dec	r24
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <__stack+0x763>
    106a:	cb 01       	movw	r24, r22
    106c:	84 2b       	or	r24, r20
    106e:	8b b9       	out	0x0b, r24	; 11
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__stack+0x78d>
    1072:	45 b1       	in	r20, 0x05	; 5
    1074:	87 70       	andi	r24, 0x07	; 7
    1076:	21 e0       	ldi	r18, 0x01	; 1
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	b9 01       	movw	r22, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <__stack+0x783>
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <__stack+0x77f>
    1086:	cb 01       	movw	r24, r22
    1088:	84 2b       	or	r24, r20
    108a:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
    108c:	81 81       	ldd	r24, Z+1	; 0x01
    108e:	88 30       	cpi	r24, 0x08	; 8
    1090:	70 f4       	brcc	.+28     	; 0x10ae <__stack+0x7af>
    1092:	4b b1       	in	r20, 0x0b	; 11
    1094:	87 70       	andi	r24, 0x07	; 7
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	b9 01       	movw	r22, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <__stack+0x7a3>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	8a 95       	dec	r24
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <__stack+0x79f>
    10a6:	cb 01       	movw	r24, r22
    10a8:	84 2b       	or	r24, r20
    10aa:	8b b9       	out	0x0b, r24	; 11
    10ac:	0d c0       	rjmp	.+26     	; 0x10c8 <__stack+0x7c9>
    10ae:	45 b1       	in	r20, 0x05	; 5
    10b0:	87 70       	andi	r24, 0x07	; 7
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	b9 01       	movw	r22, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <__stack+0x7bf>
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	8a 95       	dec	r24
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <__stack+0x7bb>
    10c2:	cb 01       	movw	r24, r22
    10c4:	84 2b       	or	r24, r20
    10c6:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	88 30       	cpi	r24, 0x08	; 8
    10cc:	70 f4       	brcc	.+28     	; 0x10ea <__stack+0x7eb>
    10ce:	4b b1       	in	r20, 0x0b	; 11
    10d0:	87 70       	andi	r24, 0x07	; 7
    10d2:	21 e0       	ldi	r18, 0x01	; 1
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	b9 01       	movw	r22, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <__stack+0x7df>
    10da:	66 0f       	add	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <__stack+0x7db>
    10e2:	cb 01       	movw	r24, r22
    10e4:	84 2b       	or	r24, r20
    10e6:	8b b9       	out	0x0b, r24	; 11
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <__stack+0x805>
    10ea:	45 b1       	in	r20, 0x05	; 5
    10ec:	87 70       	andi	r24, 0x07	; 7
    10ee:	21 e0       	ldi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	b9 01       	movw	r22, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <__stack+0x7fb>
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <__stack+0x7f7>
    10fe:	cb 01       	movw	r24, r22
    1100:	84 2b       	or	r24, r20
    1102:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
    1104:	83 81       	ldd	r24, Z+3	; 0x03
    1106:	88 30       	cpi	r24, 0x08	; 8
    1108:	70 f4       	brcc	.+28     	; 0x1126 <__stack+0x827>
    110a:	4b b1       	in	r20, 0x0b	; 11
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	b9 01       	movw	r22, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <__stack+0x81b>
    1116:	66 0f       	add	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <__stack+0x817>
    111e:	cb 01       	movw	r24, r22
    1120:	84 2b       	or	r24, r20
    1122:	8b b9       	out	0x0b, r24	; 11
    1124:	0d c0       	rjmp	.+26     	; 0x1140 <__stack+0x841>
    1126:	45 b1       	in	r20, 0x05	; 5
    1128:	87 70       	andi	r24, 0x07	; 7
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	b9 01       	movw	r22, r18
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <__stack+0x837>
    1132:	66 0f       	add	r22, r22
    1134:	77 1f       	adc	r23, r23
    1136:	8a 95       	dec	r24
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <__stack+0x833>
    113a:	cb 01       	movw	r24, r22
    113c:	84 2b       	or	r24, r20
    113e:	85 b9       	out	0x05, r24	; 5
					disable(_port[4]);
    1140:	84 81       	ldd	r24, Z+4	; 0x04
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	78 f4       	brcc	.+30     	; 0x1164 <__stack+0x865>
    1146:	4b b1       	in	r20, 0x0b	; 11
    1148:	87 70       	andi	r24, 0x07	; 7
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	b9 01       	movw	r22, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <__stack+0x857>
    1152:	66 0f       	add	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <__stack+0x853>
    115a:	cb 01       	movw	r24, r22
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8b b9       	out	0x0b, r24	; 11
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <__stack+0x881>
    1164:	45 b1       	in	r20, 0x05	; 5
    1166:	87 70       	andi	r24, 0x07	; 7
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	b9 01       	movw	r22, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <__stack+0x875>
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <__stack+0x871>
    1178:	cb 01       	movw	r24, r22
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    1180:	85 81       	ldd	r24, Z+5	; 0x05
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	70 f4       	brcc	.+28     	; 0x11a2 <__stack+0x8a3>
    1186:	4b b1       	in	r20, 0x0b	; 11
    1188:	87 70       	andi	r24, 0x07	; 7
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	b9 01       	movw	r22, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <__stack+0x897>
    1192:	66 0f       	add	r22, r22
    1194:	77 1f       	adc	r23, r23
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <__stack+0x893>
    119a:	cb 01       	movw	r24, r22
    119c:	84 2b       	or	r24, r20
    119e:	8b b9       	out	0x0b, r24	; 11
    11a0:	0d c0       	rjmp	.+26     	; 0x11bc <__stack+0x8bd>
    11a2:	45 b1       	in	r20, 0x05	; 5
    11a4:	87 70       	andi	r24, 0x07	; 7
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	b9 01       	movw	r22, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <__stack+0x8b3>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <__stack+0x8af>
    11b6:	cb 01       	movw	r24, r22
    11b8:	84 2b       	or	r24, r20
    11ba:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	70 f4       	brcc	.+28     	; 0x11de <__stack+0x8df>
    11c2:	4b b1       	in	r20, 0x0b	; 11
    11c4:	87 70       	andi	r24, 0x07	; 7
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	b9 01       	movw	r22, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <__stack+0x8d3>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <__stack+0x8cf>
    11d6:	cb 01       	movw	r24, r22
    11d8:	84 2b       	or	r24, r20
    11da:	8b b9       	out	0x0b, r24	; 11
    11dc:	08 95       	ret
    11de:	45 b1       	in	r20, 0x05	; 5
    11e0:	87 70       	andi	r24, 0x07	; 7
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	b9 01       	movw	r22, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <__stack+0x8ef>
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <__stack+0x8eb>
    11f2:	cb 01       	movw	r24, r22
    11f4:	84 2b       	or	r24, r20
    11f6:	85 b9       	out	0x05, r24	; 5
    11f8:	08 95       	ret
				} else if (hex == 0xA) { // A
    11fa:	6a 30       	cpi	r22, 0x0A	; 10
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__stack+0x901>
    11fe:	d5 c0       	rjmp	.+426    	; 0x13aa <__stack+0xaab>
					enable(_port[0]);
    1200:	80 81       	ld	r24, Z
    1202:	88 30       	cpi	r24, 0x08	; 8
    1204:	70 f4       	brcc	.+28     	; 0x1222 <__stack+0x923>
    1206:	4b b1       	in	r20, 0x0b	; 11
    1208:	87 70       	andi	r24, 0x07	; 7
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	b9 01       	movw	r22, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <__stack+0x917>
    1212:	66 0f       	add	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <__stack+0x913>
    121a:	cb 01       	movw	r24, r22
    121c:	84 2b       	or	r24, r20
    121e:	8b b9       	out	0x0b, r24	; 11
    1220:	0d c0       	rjmp	.+26     	; 0x123c <__stack+0x93d>
    1222:	45 b1       	in	r20, 0x05	; 5
    1224:	87 70       	andi	r24, 0x07	; 7
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	b9 01       	movw	r22, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <__stack+0x933>
    122e:	66 0f       	add	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	8a 95       	dec	r24
    1234:	e2 f7       	brpl	.-8      	; 0x122e <__stack+0x92f>
    1236:	cb 01       	movw	r24, r22
    1238:	84 2b       	or	r24, r20
    123a:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
    123c:	81 81       	ldd	r24, Z+1	; 0x01
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	70 f4       	brcc	.+28     	; 0x125e <__stack+0x95f>
    1242:	4b b1       	in	r20, 0x0b	; 11
    1244:	87 70       	andi	r24, 0x07	; 7
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	b9 01       	movw	r22, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <__stack+0x953>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <__stack+0x94f>
    1256:	cb 01       	movw	r24, r22
    1258:	84 2b       	or	r24, r20
    125a:	8b b9       	out	0x0b, r24	; 11
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <__stack+0x979>
    125e:	45 b1       	in	r20, 0x05	; 5
    1260:	87 70       	andi	r24, 0x07	; 7
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	b9 01       	movw	r22, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <__stack+0x96f>
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <__stack+0x96b>
    1272:	cb 01       	movw	r24, r22
    1274:	84 2b       	or	r24, r20
    1276:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	88 30       	cpi	r24, 0x08	; 8
    127c:	70 f4       	brcc	.+28     	; 0x129a <__stack+0x99b>
    127e:	4b b1       	in	r20, 0x0b	; 11
    1280:	87 70       	andi	r24, 0x07	; 7
    1282:	21 e0       	ldi	r18, 0x01	; 1
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	b9 01       	movw	r22, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <__stack+0x98f>
    128a:	66 0f       	add	r22, r22
    128c:	77 1f       	adc	r23, r23
    128e:	8a 95       	dec	r24
    1290:	e2 f7       	brpl	.-8      	; 0x128a <__stack+0x98b>
    1292:	cb 01       	movw	r24, r22
    1294:	84 2b       	or	r24, r20
    1296:	8b b9       	out	0x0b, r24	; 11
    1298:	0d c0       	rjmp	.+26     	; 0x12b4 <__stack+0x9b5>
    129a:	45 b1       	in	r20, 0x05	; 5
    129c:	87 70       	andi	r24, 0x07	; 7
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	b9 01       	movw	r22, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <__stack+0x9ab>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	8a 95       	dec	r24
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <__stack+0x9a7>
    12ae:	cb 01       	movw	r24, r22
    12b0:	84 2b       	or	r24, r20
    12b2:	85 b9       	out	0x05, r24	; 5
					disable(_port[3]);
    12b4:	83 81       	ldd	r24, Z+3	; 0x03
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    12b6:	88 30       	cpi	r24, 0x08	; 8
    12b8:	78 f4       	brcc	.+30     	; 0x12d8 <__stack+0x9d9>
    12ba:	4b b1       	in	r20, 0x0b	; 11
    12bc:	87 70       	andi	r24, 0x07	; 7
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <__stack+0x9cb>
    12c6:	66 0f       	add	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <__stack+0x9c7>
    12ce:	cb 01       	movw	r24, r22
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8b b9       	out	0x0b, r24	; 11
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <__stack+0x9f5>
    12d8:	45 b1       	in	r20, 0x05	; 5
    12da:	87 70       	andi	r24, 0x07	; 7
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	b9 01       	movw	r22, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <__stack+0x9e9>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <__stack+0x9e5>
    12ec:	cb 01       	movw	r24, r22
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    12f4:	84 81       	ldd	r24, Z+4	; 0x04
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	70 f4       	brcc	.+28     	; 0x1316 <__stack+0xa17>
    12fa:	4b b1       	in	r20, 0x0b	; 11
    12fc:	87 70       	andi	r24, 0x07	; 7
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	b9 01       	movw	r22, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <__stack+0xa0b>
    1306:	66 0f       	add	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <__stack+0xa07>
    130e:	cb 01       	movw	r24, r22
    1310:	84 2b       	or	r24, r20
    1312:	8b b9       	out	0x0b, r24	; 11
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <__stack+0xa31>
    1316:	45 b1       	in	r20, 0x05	; 5
    1318:	87 70       	andi	r24, 0x07	; 7
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	b9 01       	movw	r22, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <__stack+0xa27>
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	8a 95       	dec	r24
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <__stack+0xa23>
    132a:	cb 01       	movw	r24, r22
    132c:	84 2b       	or	r24, r20
    132e:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    1330:	85 81       	ldd	r24, Z+5	; 0x05
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	70 f4       	brcc	.+28     	; 0x1352 <__stack+0xa53>
    1336:	4b b1       	in	r20, 0x0b	; 11
    1338:	87 70       	andi	r24, 0x07	; 7
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	b9 01       	movw	r22, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <__stack+0xa47>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <__stack+0xa43>
    134a:	cb 01       	movw	r24, r22
    134c:	84 2b       	or	r24, r20
    134e:	8b b9       	out	0x0b, r24	; 11
    1350:	0d c0       	rjmp	.+26     	; 0x136c <__stack+0xa6d>
    1352:	45 b1       	in	r20, 0x05	; 5
    1354:	87 70       	andi	r24, 0x07	; 7
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	b9 01       	movw	r22, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <__stack+0xa63>
    135e:	66 0f       	add	r22, r22
    1360:	77 1f       	adc	r23, r23
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <__stack+0xa5f>
    1366:	cb 01       	movw	r24, r22
    1368:	84 2b       	or	r24, r20
    136a:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    136c:	86 81       	ldd	r24, Z+6	; 0x06
    136e:	88 30       	cpi	r24, 0x08	; 8
    1370:	70 f4       	brcc	.+28     	; 0x138e <__stack+0xa8f>
    1372:	4b b1       	in	r20, 0x0b	; 11
    1374:	87 70       	andi	r24, 0x07	; 7
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	b9 01       	movw	r22, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <__stack+0xa83>
    137e:	66 0f       	add	r22, r22
    1380:	77 1f       	adc	r23, r23
    1382:	8a 95       	dec	r24
    1384:	e2 f7       	brpl	.-8      	; 0x137e <__stack+0xa7f>
    1386:	cb 01       	movw	r24, r22
    1388:	84 2b       	or	r24, r20
    138a:	8b b9       	out	0x0b, r24	; 11
    138c:	08 95       	ret
    138e:	45 b1       	in	r20, 0x05	; 5
    1390:	87 70       	andi	r24, 0x07	; 7
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	b9 01       	movw	r22, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <__stack+0xa9f>
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <__stack+0xa9b>
    13a2:	cb 01       	movw	r24, r22
    13a4:	84 2b       	or	r24, r20
    13a6:	85 b9       	out	0x05, r24	; 5
    13a8:	08 95       	ret
				} else if (hex == 0xB) { 
    13aa:	6b 30       	cpi	r22, 0x0B	; 11
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <__stack+0xab1>
    13ae:	d7 c0       	rjmp	.+430    	; 0x155e <__stack+0xc5f>
					disable(_port[0]);
    13b0:	80 81       	ld	r24, Z
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    13b2:	88 30       	cpi	r24, 0x08	; 8
    13b4:	78 f4       	brcc	.+30     	; 0x13d4 <__stack+0xad5>
    13b6:	4b b1       	in	r20, 0x0b	; 11
    13b8:	87 70       	andi	r24, 0x07	; 7
    13ba:	21 e0       	ldi	r18, 0x01	; 1
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	b9 01       	movw	r22, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <__stack+0xac7>
    13c2:	66 0f       	add	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	8a 95       	dec	r24
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <__stack+0xac3>
    13ca:	cb 01       	movw	r24, r22
    13cc:	80 95       	com	r24
    13ce:	84 23       	and	r24, r20
    13d0:	8b b9       	out	0x0b, r24	; 11
    13d2:	0e c0       	rjmp	.+28     	; 0x13f0 <__stack+0xaf1>
    13d4:	45 b1       	in	r20, 0x05	; 5
    13d6:	87 70       	andi	r24, 0x07	; 7
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <__stack+0xae5>
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <__stack+0xae1>
    13e8:	cb 01       	movw	r24, r22
    13ea:	80 95       	com	r24
    13ec:	84 23       	and	r24, r20
    13ee:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	78 f4       	brcc	.+30     	; 0x1414 <__stack+0xb15>
    13f6:	4b b1       	in	r20, 0x0b	; 11
    13f8:	87 70       	andi	r24, 0x07	; 7
    13fa:	21 e0       	ldi	r18, 0x01	; 1
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	b9 01       	movw	r22, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <__stack+0xb07>
    1402:	66 0f       	add	r22, r22
    1404:	77 1f       	adc	r23, r23
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <__stack+0xb03>
    140a:	cb 01       	movw	r24, r22
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8b b9       	out	0x0b, r24	; 11
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <__stack+0xb31>
    1414:	45 b1       	in	r20, 0x05	; 5
    1416:	87 70       	andi	r24, 0x07	; 7
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	b9 01       	movw	r22, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <__stack+0xb25>
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <__stack+0xb21>
    1428:	cb 01       	movw	r24, r22
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
    1430:	82 81       	ldd	r24, Z+2	; 0x02
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    1432:	88 30       	cpi	r24, 0x08	; 8
    1434:	70 f4       	brcc	.+28     	; 0x1452 <__stack+0xb53>
    1436:	4b b1       	in	r20, 0x0b	; 11
    1438:	87 70       	andi	r24, 0x07	; 7
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <__stack+0xb47>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <__stack+0xb43>
    144a:	cb 01       	movw	r24, r22
    144c:	84 2b       	or	r24, r20
    144e:	8b b9       	out	0x0b, r24	; 11
    1450:	0d c0       	rjmp	.+26     	; 0x146c <__stack+0xb6d>
    1452:	45 b1       	in	r20, 0x05	; 5
    1454:	87 70       	andi	r24, 0x07	; 7
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	b9 01       	movw	r22, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <__stack+0xb63>
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <__stack+0xb5f>
    1466:	cb 01       	movw	r24, r22
    1468:	84 2b       	or	r24, r20
    146a:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
    146c:	83 81       	ldd	r24, Z+3	; 0x03
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	70 f4       	brcc	.+28     	; 0x148e <__stack+0xb8f>
    1472:	4b b1       	in	r20, 0x0b	; 11
    1474:	87 70       	andi	r24, 0x07	; 7
    1476:	21 e0       	ldi	r18, 0x01	; 1
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	b9 01       	movw	r22, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <__stack+0xb83>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <__stack+0xb7f>
    1486:	cb 01       	movw	r24, r22
    1488:	84 2b       	or	r24, r20
    148a:	8b b9       	out	0x0b, r24	; 11
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <__stack+0xba9>
    148e:	45 b1       	in	r20, 0x05	; 5
    1490:	87 70       	andi	r24, 0x07	; 7
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	b9 01       	movw	r22, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <__stack+0xb9f>
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	8a 95       	dec	r24
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <__stack+0xb9b>
    14a2:	cb 01       	movw	r24, r22
    14a4:	84 2b       	or	r24, r20
    14a6:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    14a8:	84 81       	ldd	r24, Z+4	; 0x04
    14aa:	88 30       	cpi	r24, 0x08	; 8
    14ac:	70 f4       	brcc	.+28     	; 0x14ca <__stack+0xbcb>
    14ae:	4b b1       	in	r20, 0x0b	; 11
    14b0:	87 70       	andi	r24, 0x07	; 7
    14b2:	21 e0       	ldi	r18, 0x01	; 1
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	b9 01       	movw	r22, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <__stack+0xbbf>
    14ba:	66 0f       	add	r22, r22
    14bc:	77 1f       	adc	r23, r23
    14be:	8a 95       	dec	r24
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <__stack+0xbbb>
    14c2:	cb 01       	movw	r24, r22
    14c4:	84 2b       	or	r24, r20
    14c6:	8b b9       	out	0x0b, r24	; 11
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <__stack+0xbe5>
    14ca:	45 b1       	in	r20, 0x05	; 5
    14cc:	87 70       	andi	r24, 0x07	; 7
    14ce:	21 e0       	ldi	r18, 0x01	; 1
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	b9 01       	movw	r22, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <__stack+0xbdb>
    14d6:	66 0f       	add	r22, r22
    14d8:	77 1f       	adc	r23, r23
    14da:	8a 95       	dec	r24
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <__stack+0xbd7>
    14de:	cb 01       	movw	r24, r22
    14e0:	84 2b       	or	r24, r20
    14e2:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    14e4:	85 81       	ldd	r24, Z+5	; 0x05
    14e6:	88 30       	cpi	r24, 0x08	; 8
    14e8:	70 f4       	brcc	.+28     	; 0x1506 <__stack+0xc07>
    14ea:	4b b1       	in	r20, 0x0b	; 11
    14ec:	87 70       	andi	r24, 0x07	; 7
    14ee:	21 e0       	ldi	r18, 0x01	; 1
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	b9 01       	movw	r22, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <__stack+0xbfb>
    14f6:	66 0f       	add	r22, r22
    14f8:	77 1f       	adc	r23, r23
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <__stack+0xbf7>
    14fe:	cb 01       	movw	r24, r22
    1500:	84 2b       	or	r24, r20
    1502:	8b b9       	out	0x0b, r24	; 11
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <__stack+0xc21>
    1506:	45 b1       	in	r20, 0x05	; 5
    1508:	87 70       	andi	r24, 0x07	; 7
    150a:	21 e0       	ldi	r18, 0x01	; 1
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	b9 01       	movw	r22, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <__stack+0xc17>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <__stack+0xc13>
    151a:	cb 01       	movw	r24, r22
    151c:	84 2b       	or	r24, r20
    151e:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    1520:	86 81       	ldd	r24, Z+6	; 0x06
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	70 f4       	brcc	.+28     	; 0x1542 <__stack+0xc43>
    1526:	4b b1       	in	r20, 0x0b	; 11
    1528:	87 70       	andi	r24, 0x07	; 7
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	b9 01       	movw	r22, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <__stack+0xc37>
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <__stack+0xc33>
    153a:	cb 01       	movw	r24, r22
    153c:	84 2b       	or	r24, r20
    153e:	8b b9       	out	0x0b, r24	; 11
    1540:	08 95       	ret
    1542:	45 b1       	in	r20, 0x05	; 5
    1544:	87 70       	andi	r24, 0x07	; 7
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	b9 01       	movw	r22, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <__stack+0xc53>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <__stack+0xc4f>
    1556:	cb 01       	movw	r24, r22
    1558:	84 2b       	or	r24, r20
    155a:	85 b9       	out	0x05, r24	; 5
    155c:	08 95       	ret
				} else if (hex == 0xC) { 
    155e:	6c 30       	cpi	r22, 0x0C	; 12
    1560:	09 f0       	breq	.+2      	; 0x1564 <__stack+0xc65>
    1562:	d9 c0       	rjmp	.+434    	; 0x1716 <__stack+0xe17>
					enable(_port[0]);
    1564:	80 81       	ld	r24, Z
    1566:	88 30       	cpi	r24, 0x08	; 8
    1568:	70 f4       	brcc	.+28     	; 0x1586 <__stack+0xc87>
    156a:	4b b1       	in	r20, 0x0b	; 11
    156c:	87 70       	andi	r24, 0x07	; 7
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <__stack+0xc7b>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <__stack+0xc77>
    157e:	cb 01       	movw	r24, r22
    1580:	84 2b       	or	r24, r20
    1582:	8b b9       	out	0x0b, r24	; 11
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <__stack+0xca1>
    1586:	45 b1       	in	r20, 0x05	; 5
    1588:	87 70       	andi	r24, 0x07	; 7
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	b9 01       	movw	r22, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <__stack+0xc97>
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	8a 95       	dec	r24
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <__stack+0xc93>
    159a:	cb 01       	movw	r24, r22
    159c:	84 2b       	or	r24, r20
    159e:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
    15a0:	81 81       	ldd	r24, Z+1	; 0x01
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    15a2:	88 30       	cpi	r24, 0x08	; 8
    15a4:	78 f4       	brcc	.+30     	; 0x15c4 <__stack+0xcc5>
    15a6:	4b b1       	in	r20, 0x0b	; 11
    15a8:	87 70       	andi	r24, 0x07	; 7
    15aa:	21 e0       	ldi	r18, 0x01	; 1
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	b9 01       	movw	r22, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <__stack+0xcb7>
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <__stack+0xcb3>
    15ba:	cb 01       	movw	r24, r22
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8b b9       	out	0x0b, r24	; 11
    15c2:	0e c0       	rjmp	.+28     	; 0x15e0 <__stack+0xce1>
    15c4:	45 b1       	in	r20, 0x05	; 5
    15c6:	87 70       	andi	r24, 0x07	; 7
    15c8:	21 e0       	ldi	r18, 0x01	; 1
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	b9 01       	movw	r22, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <__stack+0xcd5>
    15d0:	66 0f       	add	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	8a 95       	dec	r24
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <__stack+0xcd1>
    15d8:	cb 01       	movw	r24, r22
    15da:	80 95       	com	r24
    15dc:	84 23       	and	r24, r20
    15de:	85 b9       	out	0x05, r24	; 5
					disable(_port[2]);
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	88 30       	cpi	r24, 0x08	; 8
    15e4:	78 f4       	brcc	.+30     	; 0x1604 <__stack+0xd05>
    15e6:	4b b1       	in	r20, 0x0b	; 11
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	b9 01       	movw	r22, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <__stack+0xcf7>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <__stack+0xcf3>
    15fa:	cb 01       	movw	r24, r22
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8b b9       	out	0x0b, r24	; 11
    1602:	0e c0       	rjmp	.+28     	; 0x1620 <__stack+0xd21>
    1604:	45 b1       	in	r20, 0x05	; 5
    1606:	87 70       	andi	r24, 0x07	; 7
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	b9 01       	movw	r22, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <__stack+0xd15>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <__stack+0xd11>
    1618:	cb 01       	movw	r24, r22
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
    1620:	83 81       	ldd	r24, Z+3	; 0x03
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    1622:	88 30       	cpi	r24, 0x08	; 8
    1624:	70 f4       	brcc	.+28     	; 0x1642 <__stack+0xd43>
    1626:	4b b1       	in	r20, 0x0b	; 11
    1628:	87 70       	andi	r24, 0x07	; 7
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	b9 01       	movw	r22, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <__stack+0xd37>
    1632:	66 0f       	add	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	8a 95       	dec	r24
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <__stack+0xd33>
    163a:	cb 01       	movw	r24, r22
    163c:	84 2b       	or	r24, r20
    163e:	8b b9       	out	0x0b, r24	; 11
    1640:	0d c0       	rjmp	.+26     	; 0x165c <__stack+0xd5d>
    1642:	45 b1       	in	r20, 0x05	; 5
    1644:	87 70       	andi	r24, 0x07	; 7
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	b9 01       	movw	r22, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <__stack+0xd53>
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <__stack+0xd4f>
    1656:	cb 01       	movw	r24, r22
    1658:	84 2b       	or	r24, r20
    165a:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    165c:	84 81       	ldd	r24, Z+4	; 0x04
    165e:	88 30       	cpi	r24, 0x08	; 8
    1660:	70 f4       	brcc	.+28     	; 0x167e <__stack+0xd7f>
    1662:	4b b1       	in	r20, 0x0b	; 11
    1664:	87 70       	andi	r24, 0x07	; 7
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	b9 01       	movw	r22, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <__stack+0xd73>
    166e:	66 0f       	add	r22, r22
    1670:	77 1f       	adc	r23, r23
    1672:	8a 95       	dec	r24
    1674:	e2 f7       	brpl	.-8      	; 0x166e <__stack+0xd6f>
    1676:	cb 01       	movw	r24, r22
    1678:	84 2b       	or	r24, r20
    167a:	8b b9       	out	0x0b, r24	; 11
    167c:	0d c0       	rjmp	.+26     	; 0x1698 <__stack+0xd99>
    167e:	45 b1       	in	r20, 0x05	; 5
    1680:	87 70       	andi	r24, 0x07	; 7
    1682:	21 e0       	ldi	r18, 0x01	; 1
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	b9 01       	movw	r22, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <__stack+0xd8f>
    168a:	66 0f       	add	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <__stack+0xd8b>
    1692:	cb 01       	movw	r24, r22
    1694:	84 2b       	or	r24, r20
    1696:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    1698:	85 81       	ldd	r24, Z+5	; 0x05
    169a:	88 30       	cpi	r24, 0x08	; 8
    169c:	70 f4       	brcc	.+28     	; 0x16ba <__stack+0xdbb>
    169e:	4b b1       	in	r20, 0x0b	; 11
    16a0:	87 70       	andi	r24, 0x07	; 7
    16a2:	21 e0       	ldi	r18, 0x01	; 1
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	b9 01       	movw	r22, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <__stack+0xdaf>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <__stack+0xdab>
    16b2:	cb 01       	movw	r24, r22
    16b4:	84 2b       	or	r24, r20
    16b6:	8b b9       	out	0x0b, r24	; 11
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <__stack+0xdd5>
    16ba:	45 b1       	in	r20, 0x05	; 5
    16bc:	87 70       	andi	r24, 0x07	; 7
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <__stack+0xdcb>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	8a 95       	dec	r24
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <__stack+0xdc7>
    16ce:	cb 01       	movw	r24, r22
    16d0:	84 2b       	or	r24, r20
    16d2:	85 b9       	out	0x05, r24	; 5
					disable(_port[6]);
    16d4:	86 81       	ldd	r24, Z+6	; 0x06
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    16d6:	88 30       	cpi	r24, 0x08	; 8
    16d8:	78 f4       	brcc	.+30     	; 0x16f8 <__stack+0xdf9>
    16da:	4b b1       	in	r20, 0x0b	; 11
    16dc:	87 70       	andi	r24, 0x07	; 7
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	b9 01       	movw	r22, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <__stack+0xdeb>
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	8a 95       	dec	r24
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <__stack+0xde7>
    16ee:	cb 01       	movw	r24, r22
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8b b9       	out	0x0b, r24	; 11
    16f6:	08 95       	ret
    16f8:	45 b1       	in	r20, 0x05	; 5
    16fa:	87 70       	andi	r24, 0x07	; 7
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	b9 01       	movw	r22, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <__stack+0xe09>
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	8a 95       	dec	r24
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <__stack+0xe05>
    170c:	cb 01       	movw	r24, r22
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	85 b9       	out	0x05, r24	; 5
    1714:	08 95       	ret
				} else if (hex == 0xD) { 
    1716:	6d 30       	cpi	r22, 0x0D	; 13
    1718:	09 f0       	breq	.+2      	; 0x171c <__stack+0xe1d>
    171a:	d7 c0       	rjmp	.+430    	; 0x18ca <__stack+0xfcb>
					disable(_port[0]);
    171c:	80 81       	ld	r24, Z
    171e:	88 30       	cpi	r24, 0x08	; 8
    1720:	78 f4       	brcc	.+30     	; 0x1740 <__stack+0xe41>
    1722:	4b b1       	in	r20, 0x0b	; 11
    1724:	87 70       	andi	r24, 0x07	; 7
    1726:	21 e0       	ldi	r18, 0x01	; 1
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	b9 01       	movw	r22, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <__stack+0xe33>
    172e:	66 0f       	add	r22, r22
    1730:	77 1f       	adc	r23, r23
    1732:	8a 95       	dec	r24
    1734:	e2 f7       	brpl	.-8      	; 0x172e <__stack+0xe2f>
    1736:	cb 01       	movw	r24, r22
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8b b9       	out	0x0b, r24	; 11
    173e:	0e c0       	rjmp	.+28     	; 0x175c <__stack+0xe5d>
    1740:	45 b1       	in	r20, 0x05	; 5
    1742:	87 70       	andi	r24, 0x07	; 7
    1744:	21 e0       	ldi	r18, 0x01	; 1
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	b9 01       	movw	r22, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <__stack+0xe51>
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <__stack+0xe4d>
    1754:	cb 01       	movw	r24, r22
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	85 b9       	out	0x05, r24	; 5
					enable(_port[1]);
    175c:	81 81       	ldd	r24, Z+1	; 0x01
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    175e:	88 30       	cpi	r24, 0x08	; 8
    1760:	70 f4       	brcc	.+28     	; 0x177e <__stack+0xe7f>
    1762:	4b b1       	in	r20, 0x0b	; 11
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	b9 01       	movw	r22, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <__stack+0xe73>
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <__stack+0xe6f>
    1776:	cb 01       	movw	r24, r22
    1778:	84 2b       	or	r24, r20
    177a:	8b b9       	out	0x0b, r24	; 11
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <__stack+0xe99>
    177e:	45 b1       	in	r20, 0x05	; 5
    1780:	87 70       	andi	r24, 0x07	; 7
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	b9 01       	movw	r22, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <__stack+0xe8f>
    178a:	66 0f       	add	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <__stack+0xe8b>
    1792:	cb 01       	movw	r24, r22
    1794:	84 2b       	or	r24, r20
    1796:	85 b9       	out	0x05, r24	; 5
					enable(_port[2]);
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	70 f4       	brcc	.+28     	; 0x17ba <__stack+0xebb>
    179e:	4b b1       	in	r20, 0x0b	; 11
    17a0:	87 70       	andi	r24, 0x07	; 7
    17a2:	21 e0       	ldi	r18, 0x01	; 1
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	b9 01       	movw	r22, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <__stack+0xeaf>
    17aa:	66 0f       	add	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <__stack+0xeab>
    17b2:	cb 01       	movw	r24, r22
    17b4:	84 2b       	or	r24, r20
    17b6:	8b b9       	out	0x0b, r24	; 11
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <__stack+0xed5>
    17ba:	45 b1       	in	r20, 0x05	; 5
    17bc:	87 70       	andi	r24, 0x07	; 7
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	b9 01       	movw	r22, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <__stack+0xecb>
    17c6:	66 0f       	add	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	8a 95       	dec	r24
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <__stack+0xec7>
    17ce:	cb 01       	movw	r24, r22
    17d0:	84 2b       	or	r24, r20
    17d2:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
    17d4:	83 81       	ldd	r24, Z+3	; 0x03
    17d6:	88 30       	cpi	r24, 0x08	; 8
    17d8:	70 f4       	brcc	.+28     	; 0x17f6 <__stack+0xef7>
    17da:	4b b1       	in	r20, 0x0b	; 11
    17dc:	87 70       	andi	r24, 0x07	; 7
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	b9 01       	movw	r22, r18
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <__stack+0xeeb>
    17e6:	66 0f       	add	r22, r22
    17e8:	77 1f       	adc	r23, r23
    17ea:	8a 95       	dec	r24
    17ec:	e2 f7       	brpl	.-8      	; 0x17e6 <__stack+0xee7>
    17ee:	cb 01       	movw	r24, r22
    17f0:	84 2b       	or	r24, r20
    17f2:	8b b9       	out	0x0b, r24	; 11
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <__stack+0xf11>
    17f6:	45 b1       	in	r20, 0x05	; 5
    17f8:	87 70       	andi	r24, 0x07	; 7
    17fa:	21 e0       	ldi	r18, 0x01	; 1
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	b9 01       	movw	r22, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <__stack+0xf07>
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	8a 95       	dec	r24
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <__stack+0xf03>
    180a:	cb 01       	movw	r24, r22
    180c:	84 2b       	or	r24, r20
    180e:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    1810:	84 81       	ldd	r24, Z+4	; 0x04
    1812:	88 30       	cpi	r24, 0x08	; 8
    1814:	70 f4       	brcc	.+28     	; 0x1832 <__stack+0xf33>
    1816:	4b b1       	in	r20, 0x0b	; 11
    1818:	87 70       	andi	r24, 0x07	; 7
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	b9 01       	movw	r22, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <__stack+0xf27>
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <__stack+0xf23>
    182a:	cb 01       	movw	r24, r22
    182c:	84 2b       	or	r24, r20
    182e:	8b b9       	out	0x0b, r24	; 11
    1830:	0d c0       	rjmp	.+26     	; 0x184c <__stack+0xf4d>
    1832:	45 b1       	in	r20, 0x05	; 5
    1834:	87 70       	andi	r24, 0x07	; 7
    1836:	21 e0       	ldi	r18, 0x01	; 1
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	b9 01       	movw	r22, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <__stack+0xf43>
    183e:	66 0f       	add	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <__stack+0xf3f>
    1846:	cb 01       	movw	r24, r22
    1848:	84 2b       	or	r24, r20
    184a:	85 b9       	out	0x05, r24	; 5
					disable(_port[5]);
    184c:	85 81       	ldd	r24, Z+5	; 0x05
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    184e:	88 30       	cpi	r24, 0x08	; 8
    1850:	78 f4       	brcc	.+30     	; 0x1870 <__stack+0xf71>
    1852:	4b b1       	in	r20, 0x0b	; 11
    1854:	87 70       	andi	r24, 0x07	; 7
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	b9 01       	movw	r22, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <__stack+0xf63>
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	8a 95       	dec	r24
    1864:	e2 f7       	brpl	.-8      	; 0x185e <__stack+0xf5f>
    1866:	cb 01       	movw	r24, r22
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8b b9       	out	0x0b, r24	; 11
    186e:	0e c0       	rjmp	.+28     	; 0x188c <__stack+0xf8d>
    1870:	45 b1       	in	r20, 0x05	; 5
    1872:	87 70       	andi	r24, 0x07	; 7
    1874:	21 e0       	ldi	r18, 0x01	; 1
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	b9 01       	movw	r22, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <__stack+0xf81>
    187c:	66 0f       	add	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <__stack+0xf7d>
    1884:	cb 01       	movw	r24, r22
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    188c:	86 81       	ldd	r24, Z+6	; 0x06
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    188e:	88 30       	cpi	r24, 0x08	; 8
    1890:	70 f4       	brcc	.+28     	; 0x18ae <__stack+0xfaf>
    1892:	4b b1       	in	r20, 0x0b	; 11
    1894:	87 70       	andi	r24, 0x07	; 7
    1896:	21 e0       	ldi	r18, 0x01	; 1
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	b9 01       	movw	r22, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <__stack+0xfa3>
    189e:	66 0f       	add	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	8a 95       	dec	r24
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <__stack+0xf9f>
    18a6:	cb 01       	movw	r24, r22
    18a8:	84 2b       	or	r24, r20
    18aa:	8b b9       	out	0x0b, r24	; 11
    18ac:	08 95       	ret
    18ae:	45 b1       	in	r20, 0x05	; 5
    18b0:	87 70       	andi	r24, 0x07	; 7
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	b9 01       	movw	r22, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <__stack+0xfbf>
    18ba:	66 0f       	add	r22, r22
    18bc:	77 1f       	adc	r23, r23
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <__stack+0xfbb>
    18c2:	cb 01       	movw	r24, r22
    18c4:	84 2b       	or	r24, r20
    18c6:	85 b9       	out	0x05, r24	; 5
    18c8:	08 95       	ret
				} else if (hex == 0xE) {
    18ca:	6e 30       	cpi	r22, 0x0E	; 14
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <__stack+0xfd1>
    18ce:	d7 c0       	rjmp	.+430    	; 0x1a7e <__stack+0x117f>
					enable(_port[0]);
    18d0:	80 81       	ld	r24, Z
    18d2:	88 30       	cpi	r24, 0x08	; 8
    18d4:	70 f4       	brcc	.+28     	; 0x18f2 <__stack+0xff3>
    18d6:	4b b1       	in	r20, 0x0b	; 11
    18d8:	87 70       	andi	r24, 0x07	; 7
    18da:	21 e0       	ldi	r18, 0x01	; 1
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	b9 01       	movw	r22, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <__stack+0xfe7>
    18e2:	66 0f       	add	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	8a 95       	dec	r24
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <__stack+0xfe3>
    18ea:	cb 01       	movw	r24, r22
    18ec:	84 2b       	or	r24, r20
    18ee:	8b b9       	out	0x0b, r24	; 11
    18f0:	0d c0       	rjmp	.+26     	; 0x190c <__stack+0x100d>
    18f2:	45 b1       	in	r20, 0x05	; 5
    18f4:	87 70       	andi	r24, 0x07	; 7
    18f6:	21 e0       	ldi	r18, 0x01	; 1
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	b9 01       	movw	r22, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <__stack+0x1003>
    18fe:	66 0f       	add	r22, r22
    1900:	77 1f       	adc	r23, r23
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <__stack+0xfff>
    1906:	cb 01       	movw	r24, r22
    1908:	84 2b       	or	r24, r20
    190a:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
    190c:	81 81       	ldd	r24, Z+1	; 0x01
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    190e:	88 30       	cpi	r24, 0x08	; 8
    1910:	78 f4       	brcc	.+30     	; 0x1930 <__stack+0x1031>
    1912:	4b b1       	in	r20, 0x0b	; 11
    1914:	87 70       	andi	r24, 0x07	; 7
    1916:	21 e0       	ldi	r18, 0x01	; 1
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	b9 01       	movw	r22, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <__stack+0x1023>
    191e:	66 0f       	add	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	8a 95       	dec	r24
    1924:	e2 f7       	brpl	.-8      	; 0x191e <__stack+0x101f>
    1926:	cb 01       	movw	r24, r22
    1928:	80 95       	com	r24
    192a:	84 23       	and	r24, r20
    192c:	8b b9       	out	0x0b, r24	; 11
    192e:	0e c0       	rjmp	.+28     	; 0x194c <__stack+0x104d>
    1930:	45 b1       	in	r20, 0x05	; 5
    1932:	87 70       	andi	r24, 0x07	; 7
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	b9 01       	movw	r22, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <__stack+0x1041>
    193c:	66 0f       	add	r22, r22
    193e:	77 1f       	adc	r23, r23
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <__stack+0x103d>
    1944:	cb 01       	movw	r24, r22
    1946:	80 95       	com	r24
    1948:	84 23       	and	r24, r20
    194a:	85 b9       	out	0x05, r24	; 5
					disable(_port[2]);
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	88 30       	cpi	r24, 0x08	; 8
    1950:	78 f4       	brcc	.+30     	; 0x1970 <__stack+0x1071>
    1952:	4b b1       	in	r20, 0x0b	; 11
    1954:	87 70       	andi	r24, 0x07	; 7
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	b9 01       	movw	r22, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <__stack+0x1063>
    195e:	66 0f       	add	r22, r22
    1960:	77 1f       	adc	r23, r23
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <__stack+0x105f>
    1966:	cb 01       	movw	r24, r22
    1968:	80 95       	com	r24
    196a:	84 23       	and	r24, r20
    196c:	8b b9       	out	0x0b, r24	; 11
    196e:	0e c0       	rjmp	.+28     	; 0x198c <__stack+0x108d>
    1970:	45 b1       	in	r20, 0x05	; 5
    1972:	87 70       	andi	r24, 0x07	; 7
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	b9 01       	movw	r22, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <__stack+0x1081>
    197c:	66 0f       	add	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	8a 95       	dec	r24
    1982:	e2 f7       	brpl	.-8      	; 0x197c <__stack+0x107d>
    1984:	cb 01       	movw	r24, r22
    1986:	80 95       	com	r24
    1988:	84 23       	and	r24, r20
    198a:	85 b9       	out	0x05, r24	; 5
					enable(_port[3]);
    198c:	83 81       	ldd	r24, Z+3	; 0x03
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	70 f4       	brcc	.+28     	; 0x19ae <__stack+0x10af>
    1992:	4b b1       	in	r20, 0x0b	; 11
    1994:	87 70       	andi	r24, 0x07	; 7
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	b9 01       	movw	r22, r18
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <__stack+0x10a3>
    199e:	66 0f       	add	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	8a 95       	dec	r24
    19a4:	e2 f7       	brpl	.-8      	; 0x199e <__stack+0x109f>
    19a6:	cb 01       	movw	r24, r22
    19a8:	84 2b       	or	r24, r20
    19aa:	8b b9       	out	0x0b, r24	; 11
    19ac:	0d c0       	rjmp	.+26     	; 0x19c8 <__stack+0x10c9>
    19ae:	45 b1       	in	r20, 0x05	; 5
    19b0:	87 70       	andi	r24, 0x07	; 7
    19b2:	21 e0       	ldi	r18, 0x01	; 1
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	b9 01       	movw	r22, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <__stack+0x10bf>
    19ba:	66 0f       	add	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	8a 95       	dec	r24
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <__stack+0x10bb>
    19c2:	cb 01       	movw	r24, r22
    19c4:	84 2b       	or	r24, r20
    19c6:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    19c8:	84 81       	ldd	r24, Z+4	; 0x04
    19ca:	88 30       	cpi	r24, 0x08	; 8
    19cc:	70 f4       	brcc	.+28     	; 0x19ea <__stack+0x10eb>
    19ce:	4b b1       	in	r20, 0x0b	; 11
    19d0:	87 70       	andi	r24, 0x07	; 7
    19d2:	21 e0       	ldi	r18, 0x01	; 1
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	b9 01       	movw	r22, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <__stack+0x10df>
    19da:	66 0f       	add	r22, r22
    19dc:	77 1f       	adc	r23, r23
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <__stack+0x10db>
    19e2:	cb 01       	movw	r24, r22
    19e4:	84 2b       	or	r24, r20
    19e6:	8b b9       	out	0x0b, r24	; 11
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <__stack+0x1105>
    19ea:	45 b1       	in	r20, 0x05	; 5
    19ec:	87 70       	andi	r24, 0x07	; 7
    19ee:	21 e0       	ldi	r18, 0x01	; 1
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	b9 01       	movw	r22, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <__stack+0x10fb>
    19f6:	66 0f       	add	r22, r22
    19f8:	77 1f       	adc	r23, r23
    19fa:	8a 95       	dec	r24
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <__stack+0x10f7>
    19fe:	cb 01       	movw	r24, r22
    1a00:	84 2b       	or	r24, r20
    1a02:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    1a04:	85 81       	ldd	r24, Z+5	; 0x05
    1a06:	88 30       	cpi	r24, 0x08	; 8
    1a08:	70 f4       	brcc	.+28     	; 0x1a26 <__stack+0x1127>
    1a0a:	4b b1       	in	r20, 0x0b	; 11
    1a0c:	87 70       	andi	r24, 0x07	; 7
    1a0e:	21 e0       	ldi	r18, 0x01	; 1
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	b9 01       	movw	r22, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <__stack+0x111b>
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <__stack+0x1117>
    1a1e:	cb 01       	movw	r24, r22
    1a20:	84 2b       	or	r24, r20
    1a22:	8b b9       	out	0x0b, r24	; 11
    1a24:	0d c0       	rjmp	.+26     	; 0x1a40 <__stack+0x1141>
    1a26:	45 b1       	in	r20, 0x05	; 5
    1a28:	87 70       	andi	r24, 0x07	; 7
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	b9 01       	movw	r22, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <__stack+0x1137>
    1a32:	66 0f       	add	r22, r22
    1a34:	77 1f       	adc	r23, r23
    1a36:	8a 95       	dec	r24
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <__stack+0x1133>
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	84 2b       	or	r24, r20
    1a3e:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    1a40:	86 81       	ldd	r24, Z+6	; 0x06
    1a42:	88 30       	cpi	r24, 0x08	; 8
    1a44:	70 f4       	brcc	.+28     	; 0x1a62 <__stack+0x1163>
    1a46:	4b b1       	in	r20, 0x0b	; 11
    1a48:	87 70       	andi	r24, 0x07	; 7
    1a4a:	21 e0       	ldi	r18, 0x01	; 1
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	b9 01       	movw	r22, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <__stack+0x1157>
    1a52:	66 0f       	add	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	8a 95       	dec	r24
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <__stack+0x1153>
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	84 2b       	or	r24, r20
    1a5e:	8b b9       	out	0x0b, r24	; 11
    1a60:	08 95       	ret
    1a62:	45 b1       	in	r20, 0x05	; 5
    1a64:	87 70       	andi	r24, 0x07	; 7
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <__stack+0x1173>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	8a 95       	dec	r24
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <__stack+0x116f>
    1a76:	cb 01       	movw	r24, r22
    1a78:	84 2b       	or	r24, r20
    1a7a:	85 b9       	out	0x05, r24	; 5
    1a7c:	08 95       	ret
				} else if (hex == 0xF) {
    1a7e:	6f 30       	cpi	r22, 0x0F	; 15
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <__stack+0x1185>
    1a82:	d8 c0       	rjmp	.+432    	; 0x1c34 <__stack+0x1335>
					enable(_port[0]);
    1a84:	80 81       	ld	r24, Z
    1a86:	88 30       	cpi	r24, 0x08	; 8
    1a88:	70 f4       	brcc	.+28     	; 0x1aa6 <__stack+0x11a7>
    1a8a:	4b b1       	in	r20, 0x0b	; 11
    1a8c:	87 70       	andi	r24, 0x07	; 7
    1a8e:	21 e0       	ldi	r18, 0x01	; 1
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	b9 01       	movw	r22, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <__stack+0x119b>
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <__stack+0x1197>
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	84 2b       	or	r24, r20
    1aa2:	8b b9       	out	0x0b, r24	; 11
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <__stack+0x11c1>
    1aa6:	45 b1       	in	r20, 0x05	; 5
    1aa8:	87 70       	andi	r24, 0x07	; 7
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	b9 01       	movw	r22, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <__stack+0x11b7>
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	8a 95       	dec	r24
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <__stack+0x11b3>
    1aba:	cb 01       	movw	r24, r22
    1abc:	84 2b       	or	r24, r20
    1abe:	85 b9       	out	0x05, r24	; 5
					disable(_port[1]);
    1ac0:	81 81       	ldd	r24, Z+1	; 0x01
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	78 f4       	brcc	.+30     	; 0x1ae4 <__stack+0x11e5>
    1ac6:	4b b1       	in	r20, 0x0b	; 11
    1ac8:	87 70       	andi	r24, 0x07	; 7
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	b9 01       	movw	r22, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <__stack+0x11d7>
    1ad2:	66 0f       	add	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	8a 95       	dec	r24
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <__stack+0x11d3>
    1ada:	cb 01       	movw	r24, r22
    1adc:	80 95       	com	r24
    1ade:	84 23       	and	r24, r20
    1ae0:	8b b9       	out	0x0b, r24	; 11
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <__stack+0x1201>
    1ae4:	45 b1       	in	r20, 0x05	; 5
    1ae6:	87 70       	andi	r24, 0x07	; 7
    1ae8:	21 e0       	ldi	r18, 0x01	; 1
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	b9 01       	movw	r22, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <__stack+0x11f5>
    1af0:	66 0f       	add	r22, r22
    1af2:	77 1f       	adc	r23, r23
    1af4:	8a 95       	dec	r24
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <__stack+0x11f1>
    1af8:	cb 01       	movw	r24, r22
    1afa:	80 95       	com	r24
    1afc:	84 23       	and	r24, r20
    1afe:	85 b9       	out	0x05, r24	; 5
					disable(_port[2]);
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	78 f4       	brcc	.+30     	; 0x1b24 <__stack+0x1225>
    1b06:	4b b1       	in	r20, 0x0b	; 11
    1b08:	87 70       	andi	r24, 0x07	; 7
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	b9 01       	movw	r22, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <__stack+0x1217>
    1b12:	66 0f       	add	r22, r22
    1b14:	77 1f       	adc	r23, r23
    1b16:	8a 95       	dec	r24
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <__stack+0x1213>
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	80 95       	com	r24
    1b1e:	84 23       	and	r24, r20
    1b20:	8b b9       	out	0x0b, r24	; 11
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <__stack+0x1241>
    1b24:	45 b1       	in	r20, 0x05	; 5
    1b26:	87 70       	andi	r24, 0x07	; 7
    1b28:	21 e0       	ldi	r18, 0x01	; 1
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <__stack+0x1235>
    1b30:	66 0f       	add	r22, r22
    1b32:	77 1f       	adc	r23, r23
    1b34:	8a 95       	dec	r24
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <__stack+0x1231>
    1b38:	cb 01       	movw	r24, r22
    1b3a:	80 95       	com	r24
    1b3c:	84 23       	and	r24, r20
    1b3e:	85 b9       	out	0x05, r24	; 5
					disable(_port[3]);
    1b40:	83 81       	ldd	r24, Z+3	; 0x03
    1b42:	88 30       	cpi	r24, 0x08	; 8
    1b44:	78 f4       	brcc	.+30     	; 0x1b64 <__stack+0x1265>
    1b46:	4b b1       	in	r20, 0x0b	; 11
    1b48:	87 70       	andi	r24, 0x07	; 7
    1b4a:	21 e0       	ldi	r18, 0x01	; 1
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	b9 01       	movw	r22, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <__stack+0x1257>
    1b52:	66 0f       	add	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	8a 95       	dec	r24
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <__stack+0x1253>
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8b b9       	out	0x0b, r24	; 11
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <__stack+0x1281>
    1b64:	45 b1       	in	r20, 0x05	; 5
    1b66:	87 70       	andi	r24, 0x07	; 7
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <__stack+0x1275>
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	8a 95       	dec	r24
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <__stack+0x1271>
    1b78:	cb 01       	movw	r24, r22
    1b7a:	80 95       	com	r24
    1b7c:	84 23       	and	r24, r20
    1b7e:	85 b9       	out	0x05, r24	; 5
					enable(_port[4]);
    1b80:	84 81       	ldd	r24, Z+4	; 0x04
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    1b82:	88 30       	cpi	r24, 0x08	; 8
    1b84:	70 f4       	brcc	.+28     	; 0x1ba2 <__stack+0x12a3>
    1b86:	4b b1       	in	r20, 0x0b	; 11
    1b88:	87 70       	andi	r24, 0x07	; 7
    1b8a:	21 e0       	ldi	r18, 0x01	; 1
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	b9 01       	movw	r22, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <__stack+0x1297>
    1b92:	66 0f       	add	r22, r22
    1b94:	77 1f       	adc	r23, r23
    1b96:	8a 95       	dec	r24
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <__stack+0x1293>
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	84 2b       	or	r24, r20
    1b9e:	8b b9       	out	0x0b, r24	; 11
    1ba0:	0d c0       	rjmp	.+26     	; 0x1bbc <__stack+0x12bd>
    1ba2:	45 b1       	in	r20, 0x05	; 5
    1ba4:	87 70       	andi	r24, 0x07	; 7
    1ba6:	21 e0       	ldi	r18, 0x01	; 1
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	b9 01       	movw	r22, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <__stack+0x12b3>
    1bae:	66 0f       	add	r22, r22
    1bb0:	77 1f       	adc	r23, r23
    1bb2:	8a 95       	dec	r24
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <__stack+0x12af>
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	84 2b       	or	r24, r20
    1bba:	85 b9       	out	0x05, r24	; 5
					enable(_port[5]);
    1bbc:	85 81       	ldd	r24, Z+5	; 0x05
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	70 f4       	brcc	.+28     	; 0x1bde <__stack+0x12df>
    1bc2:	4b b1       	in	r20, 0x0b	; 11
    1bc4:	87 70       	andi	r24, 0x07	; 7
    1bc6:	21 e0       	ldi	r18, 0x01	; 1
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	b9 01       	movw	r22, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <__stack+0x12d3>
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <__stack+0x12cf>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	84 2b       	or	r24, r20
    1bda:	8b b9       	out	0x0b, r24	; 11
    1bdc:	0d c0       	rjmp	.+26     	; 0x1bf8 <__stack+0x12f9>
    1bde:	45 b1       	in	r20, 0x05	; 5
    1be0:	87 70       	andi	r24, 0x07	; 7
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	b9 01       	movw	r22, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <__stack+0x12ef>
    1bea:	66 0f       	add	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	8a 95       	dec	r24
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <__stack+0x12eb>
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	84 2b       	or	r24, r20
    1bf6:	85 b9       	out	0x05, r24	; 5
					enable(_port[6]);
    1bf8:	86 81       	ldd	r24, Z+6	; 0x06
    1bfa:	88 30       	cpi	r24, 0x08	; 8
    1bfc:	70 f4       	brcc	.+28     	; 0x1c1a <__stack+0x131b>
    1bfe:	4b b1       	in	r20, 0x0b	; 11
    1c00:	87 70       	andi	r24, 0x07	; 7
    1c02:	21 e0       	ldi	r18, 0x01	; 1
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	b9 01       	movw	r22, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <__stack+0x130f>
    1c0a:	66 0f       	add	r22, r22
    1c0c:	77 1f       	adc	r23, r23
    1c0e:	8a 95       	dec	r24
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <__stack+0x130b>
    1c12:	cb 01       	movw	r24, r22
    1c14:	84 2b       	or	r24, r20
    1c16:	8b b9       	out	0x0b, r24	; 11
    1c18:	08 95       	ret
    1c1a:	45 b1       	in	r20, 0x05	; 5
    1c1c:	87 70       	andi	r24, 0x07	; 7
    1c1e:	21 e0       	ldi	r18, 0x01	; 1
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	b9 01       	movw	r22, r18
    1c24:	02 c0       	rjmp	.+4      	; 0x1c2a <__stack+0x132b>
    1c26:	66 0f       	add	r22, r22
    1c28:	77 1f       	adc	r23, r23
    1c2a:	8a 95       	dec	r24
    1c2c:	e2 f7       	brpl	.-8      	; 0x1c26 <__stack+0x1327>
    1c2e:	cb 01       	movw	r24, r22
    1c30:	84 2b       	or	r24, r20
    1c32:	85 b9       	out	0x05, r24	; 5
    1c34:	08 95       	ret

00001c36 <_Z5setupv>:

component::Sonar *sonar;
component::Display7 *display;

void setup() {
	util::prescaler(util::PS1);
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN7zeduino4util9prescalerENS0_10EPrescalerE>
			ENABLED, DISABLED
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) clr_bit(fcrio(port), nmr(port));
			else if (m == OUTPUT) set_bit(fcrio(port), nmr(port));
    1c3c:	50 9a       	sbi	0x0a, 0	; 10
    1c3e:	51 9a       	sbi	0x0a, 1	; 10
    1c40:	52 9a       	sbi	0x0a, 2	; 10
    1c42:	53 9a       	sbi	0x0a, 3	; 10
    1c44:	54 9a       	sbi	0x0a, 4	; 10
    1c46:	55 9a       	sbi	0x0a, 5	; 10
    1c48:	20 9a       	sbi	0x04, 0	; 4
    1c4a:	21 9a       	sbi	0x04, 1	; 4
typedef int16_t int16;
typedef uint8_t uint8;
typedef uint16_t uint16;

void * operator new(size_t size) {
	return malloc(size);	
    1c4c:	84 e0       	ldi	r24, 0x04	; 4
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <malloc>
		class Sonar : public Component {
		
			private: const EPort _triggerPort, _echoPort;
			private: uint16 count;
			
			public: Sonar(EPort triggerPort, EPort echoPort) : _triggerPort(triggerPort), _echoPort(echoPort) {}
    1c54:	27 e0       	ldi	r18, 0x07	; 7
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
    1c5a:	26 e0       	ldi	r18, 0x06	; 6
    1c5c:	21 83       	std	Z+1, r18	; 0x01
	port::mode(P3, OUTPUT);
	port::mode(P4, OUTPUT);
	port::mode(P5, OUTPUT);
	port::mode(P8, OUTPUT);
	port::mode(P9, OUTPUT);
	sonar = new component::Sonar(P7, P6);
    1c5e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <sonar+0x1>
    1c62:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <sonar>
    1c66:	88 e0       	ldi	r24, 0x08	; 8
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <malloc>
    1c6e:	fc 01       	movw	r30, r24
		class Display7 : public Component {
			
			private: EPort _port[8];
			
			public: Display7(EPort a, EPort b, EPort c, EPort d, EPort e, EPort f, EPort g, EPort h) {
				_port[0] = a; _port[1] = b; _port[2] = c; _port[3] = d; _port[4] = e; _port[5] = f; _port[6] = g; _port[7] = h;
    1c70:	10 82       	st	Z, r1
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	81 83       	std	Z+1, r24	; 0x01
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	82 83       	std	Z+2, r24	; 0x02
    1c7a:	83 e0       	ldi	r24, 0x03	; 3
    1c7c:	83 83       	std	Z+3, r24	; 0x03
    1c7e:	84 e0       	ldi	r24, 0x04	; 4
    1c80:	84 83       	std	Z+4, r24	; 0x04
    1c82:	85 e0       	ldi	r24, 0x05	; 5
    1c84:	85 83       	std	Z+5, r24	; 0x05
    1c86:	88 e0       	ldi	r24, 0x08	; 8
    1c88:	86 83       	std	Z+6, r24	; 0x06
    1c8a:	89 e0       	ldi	r24, 0x09	; 9
    1c8c:	87 83       	std	Z+7, r24	; 0x07
	display = new component::Display7(P0, P1, P2, P3, P4, P5, P8, P9);
    1c8e:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
    1c92:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
    1c96:	08 95       	ret

00001c98 <_Z4loopv>:
}

void loop() {
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
	uint16 distance = sonar->ReadDistance();
    1ca0:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <sonar>
    1ca4:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <sonar+0x1>
			
			public: Sonar(EPort triggerPort, EPort echoPort) : _triggerPort(triggerPort), _echoPort(echoPort) {}
				
			public: uint16 ReadDistance() {
				
				port::enable(_triggerPort);
    1ca8:	88 81       	ld	r24, Y
		inline bool get_mode(EPort port) {
			return tst_bit(fcrio(port), nmr(port));
		}
		
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
    1caa:	88 30       	cpi	r24, 0x08	; 8
    1cac:	70 f4       	brcc	.+28     	; 0x1cca <_Z4loopv+0x32>
    1cae:	4b b1       	in	r20, 0x0b	; 11
    1cb0:	87 70       	andi	r24, 0x07	; 7
    1cb2:	21 e0       	ldi	r18, 0x01	; 1
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	b9 01       	movw	r22, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <_Z4loopv+0x26>
    1cba:	66 0f       	add	r22, r22
    1cbc:	77 1f       	adc	r23, r23
    1cbe:	8a 95       	dec	r24
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <_Z4loopv+0x22>
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	84 2b       	or	r24, r20
    1cc6:	8b b9       	out	0x0b, r24	; 11
    1cc8:	0d c0       	rjmp	.+26     	; 0x1ce4 <_Z4loopv+0x4c>
    1cca:	45 b1       	in	r20, 0x05	; 5
    1ccc:	87 70       	andi	r24, 0x07	; 7
    1cce:	21 e0       	ldi	r18, 0x01	; 1
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <_Z4loopv+0x42>
    1cd6:	66 0f       	add	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <_Z4loopv+0x3e>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	84 2b       	or	r24, r20
    1ce2:	85 b9       	out	0x05, r24	; 5
				util::delay_us(10);
    1ce4:	8a e0       	ldi	r24, 0x0A	; 10
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZN7zeduino4util8delay_usEj>
				port::disable(_triggerPort);
    1cec:	88 81       	ld	r24, Y
			if (b) set_bit(fcrof(port), nmr(port));
			else clr_bit(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
    1cee:	88 30       	cpi	r24, 0x08	; 8
    1cf0:	78 f4       	brcc	.+30     	; 0x1d10 <_Z4loopv+0x78>
    1cf2:	4b b1       	in	r20, 0x0b	; 11
    1cf4:	87 70       	andi	r24, 0x07	; 7
    1cf6:	21 e0       	ldi	r18, 0x01	; 1
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	b9 01       	movw	r22, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <_Z4loopv+0x6a>
    1cfe:	66 0f       	add	r22, r22
    1d00:	77 1f       	adc	r23, r23
    1d02:	8a 95       	dec	r24
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <_Z4loopv+0x66>
    1d06:	cb 01       	movw	r24, r22
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	8b b9       	out	0x0b, r24	; 11
    1d0e:	0e c0       	rjmp	.+28     	; 0x1d2c <_Z4loopv+0x94>
    1d10:	45 b1       	in	r20, 0x05	; 5
    1d12:	87 70       	andi	r24, 0x07	; 7
    1d14:	21 e0       	ldi	r18, 0x01	; 1
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	b9 01       	movw	r22, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <_Z4loopv+0x88>
    1d1c:	66 0f       	add	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	8a 95       	dec	r24
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <_Z4loopv+0x84>
    1d24:	cb 01       	movw	r24, r22
    1d26:	80 95       	com	r24
    1d28:	84 23       	and	r24, r20
    1d2a:	85 b9       	out	0x05, r24	; 5
				
				while (!port::read(_echoPort));
    1d2c:	49 81       	ldd	r20, Y+1	; 0x01
		inline bool is_enabled(EPort port) {
			return tst_bit(fcrof(port), nmr(port));
		}
		
		inline uint16 read(EPort port) {
			return tst_bit(fcrin(port), nmr(port));
    1d2e:	84 2f       	mov	r24, r20
    1d30:	87 70       	andi	r24, 0x07	; 7
    1d32:	21 e0       	ldi	r18, 0x01	; 1
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <_Z4loopv+0xa4>
    1d38:	22 0f       	add	r18, r18
    1d3a:	33 1f       	adc	r19, r19
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <_Z4loopv+0xa0>
    1d40:	48 30       	cpi	r20, 0x08	; 8
    1d42:	10 f4       	brcc	.+4      	; 0x1d48 <_Z4loopv+0xb0>
    1d44:	89 b1       	in	r24, 0x09	; 9
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <_Z4loopv+0xb2>
    1d48:	83 b1       	in	r24, 0x03	; 3
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	82 23       	and	r24, r18
    1d4e:	93 23       	and	r25, r19
    1d50:	89 2b       	or	r24, r25
    1d52:	b1 f3       	breq	.-20     	; 0x1d40 <_Z4loopv+0xa8>
				TCNT1 = 0;
    1d54:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d58:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
				
				while (port::read(_echoPort));
    1d5c:	49 81       	ldd	r20, Y+1	; 0x01
    1d5e:	84 2f       	mov	r24, r20
    1d60:	87 70       	andi	r24, 0x07	; 7
    1d62:	21 e0       	ldi	r18, 0x01	; 1
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <_Z4loopv+0xd4>
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <_Z4loopv+0xd0>
    1d70:	48 30       	cpi	r20, 0x08	; 8
    1d72:	10 f4       	brcc	.+4      	; 0x1d78 <_Z4loopv+0xe0>
    1d74:	89 b1       	in	r24, 0x09	; 9
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <_Z4loopv+0xe2>
    1d78:	83 b1       	in	r24, 0x03	; 3
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	82 23       	and	r24, r18
    1d7e:	93 23       	and	r25, r19
    1d80:	89 2b       	or	r24, r25
    1d82:	b1 f7       	brne	.-20     	; 0x1d70 <_Z4loopv+0xd8>
				count = TCNT1;
    1d84:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    1d88:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1d8c:	1b 83       	std	Y+3, r17	; 0x03
    1d8e:	0a 83       	std	Y+2, r16	; 0x02
				
				uint16 ret = (uint16)(count / 116);
				util::delay_ms(60);
    1d90:	8c e3       	ldi	r24, 0x3C	; 60
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN7zeduino4util8delay_msEj>
	display->SetValue(distance);
    1d98:	98 01       	movw	r18, r16
    1d9a:	af e9       	ldi	r26, 0x9F	; 159
    1d9c:	b6 e4       	ldi	r27, 0x46	; 70
    1d9e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__umulhisi3>
    1da2:	96 95       	lsr	r25
    1da4:	87 95       	ror	r24
    1da6:	92 95       	swap	r25
    1da8:	82 95       	swap	r24
    1daa:	8f 70       	andi	r24, 0x0F	; 15
    1dac:	89 27       	eor	r24, r25
    1dae:	9f 70       	andi	r25, 0x0F	; 15
    1db0:	89 27       	eor	r24, r25
    1db2:	68 2f       	mov	r22, r24
    1db4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    1db8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    1dbc:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN7zeduino9component8Display78SetValueEh>
			public: Display7(EPort a, EPort b, EPort c, EPort d, EPort e, EPort f, EPort g, EPort h) {
				_port[0] = a; _port[1] = b; _port[2] = c; _port[3] = d; _port[4] = e; _port[5] = f; _port[6] = g; _port[7] = h;
			}
			
			public: void SetDotVisibility(bool b) { enable(_port[7], b); }
			public: bool IsDotVisible() { return is_enabled(_port[7]); }
    1dc0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
    1dc4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
    1dc8:	87 81       	ldd	r24, Z+7	; 0x07
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
		}
		
		inline bool is_enabled(EPort port) {
			return tst_bit(fcrof(port), nmr(port));
    1dca:	88 30       	cpi	r24, 0x08	; 8
    1dcc:	60 f4       	brcc	.+24     	; 0x1de6 <_Z4loopv+0x14e>
    1dce:	2b b1       	in	r18, 0x0b	; 11
    1dd0:	87 70       	andi	r24, 0x07	; 7
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) set_bit(fcrof(port), nmr(port));
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	08 2e       	mov	r0, r24
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <_Z4loopv+0x144>
    1dd8:	35 95       	asr	r19
    1dda:	27 95       	ror	r18
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <_Z4loopv+0x140>
    1de0:	20 ff       	sbrs	r18, 0
    1de2:	0d c0       	rjmp	.+26     	; 0x1dfe <_Z4loopv+0x166>
    1de4:	2a c0       	rjmp	.+84     	; 0x1e3a <_Z4loopv+0x1a2>
		inline void disable(EPort port) {
			clr_bit(fcrof(port), nmr(port));
		}
		
		inline bool is_enabled(EPort port) {
			return tst_bit(fcrof(port), nmr(port));
    1de6:	25 b1       	in	r18, 0x05	; 5
    1de8:	87 70       	andi	r24, 0x07	; 7
		inline void enable(EPort port) {
			set_bit(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) set_bit(fcrof(port), nmr(port));
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	08 2e       	mov	r0, r24
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <_Z4loopv+0x15c>
    1df0:	35 95       	asr	r19
    1df2:	27 95       	ror	r18
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <_Z4loopv+0x158>
    1df8:	20 fd       	sbrc	r18, 0
    1dfa:	2d c0       	rjmp	.+90     	; 0x1e56 <_Z4loopv+0x1be>
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <_Z4loopv+0x180>
    1dfe:	4b b1       	in	r20, 0x0b	; 11
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	b9 01       	movw	r22, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <_Z4loopv+0x174>
    1e08:	66 0f       	add	r22, r22
    1e0a:	77 1f       	adc	r23, r23
    1e0c:	8a 95       	dec	r24
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <_Z4loopv+0x170>
    1e10:	cb 01       	movw	r24, r22
    1e12:	84 2b       	or	r24, r20
    1e14:	8b b9       	out	0x0b, r24	; 11
    1e16:	0c c0       	rjmp	.+24     	; 0x1e30 <_Z4loopv+0x198>
    1e18:	45 b1       	in	r20, 0x05	; 5
    1e1a:	21 e0       	ldi	r18, 0x01	; 1
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	b9 01       	movw	r22, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <_Z4loopv+0x18e>
    1e22:	66 0f       	add	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	8a 95       	dec	r24
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <_Z4loopv+0x18a>
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	84 2b       	or	r24, r20
    1e2e:	85 b9       	out	0x05, r24	; 5
	display->SetDotVisibility(!display->IsDotVisible());
	util::delay_ms(500);
    1e30:	84 ef       	ldi	r24, 0xF4	; 244
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN7zeduino4util8delay_msEj>
}
    1e38:	1c c0       	rjmp	.+56     	; 0x1e72 <_Z4loopv+0x1da>
			else clr_bit(fcrof(port), nmr(port));
    1e3a:	4b b1       	in	r20, 0x0b	; 11
    1e3c:	21 e0       	ldi	r18, 0x01	; 1
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	b9 01       	movw	r22, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <_Z4loopv+0x1b0>
    1e44:	66 0f       	add	r22, r22
    1e46:	77 1f       	adc	r23, r23
    1e48:	8a 95       	dec	r24
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <_Z4loopv+0x1ac>
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8b b9       	out	0x0b, r24	; 11
    1e54:	ed cf       	rjmp	.-38     	; 0x1e30 <_Z4loopv+0x198>
    1e56:	45 b1       	in	r20, 0x05	; 5
    1e58:	21 e0       	ldi	r18, 0x01	; 1
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	b9 01       	movw	r22, r18
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <_Z4loopv+0x1cc>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	8a 95       	dec	r24
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <_Z4loopv+0x1c8>
    1e68:	cb 01       	movw	r24, r22
    1e6a:	80 95       	com	r24
    1e6c:	84 23       	and	r24, r20
    1e6e:	85 b9       	out	0x05, r24	; 5
    1e70:	df cf       	rjmp	.-66     	; 0x1e30 <_Z4loopv+0x198>
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	08 95       	ret

00001e7c <main>:
void setup();
void loop();

extern "C" {
	int main() {
		setup();
    1e7c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_Z5setupv>
		while (true) loop();
    1e80:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_Z4loopv>
    1e84:	fd cf       	rjmp	.-6      	; 0x1e80 <main+0x4>

00001e86 <__umulhisi3>:
    1e86:	a2 9f       	mul	r26, r18
    1e88:	b0 01       	movw	r22, r0
    1e8a:	b3 9f       	mul	r27, r19
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	a3 9f       	mul	r26, r19
    1e90:	70 0d       	add	r23, r0
    1e92:	81 1d       	adc	r24, r1
    1e94:	11 24       	eor	r1, r1
    1e96:	91 1d       	adc	r25, r1
    1e98:	b2 9f       	mul	r27, r18
    1e9a:	70 0d       	add	r23, r0
    1e9c:	81 1d       	adc	r24, r1
    1e9e:	11 24       	eor	r1, r1
    1ea0:	91 1d       	adc	r25, r1
    1ea2:	08 95       	ret

00001ea4 <malloc>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	82 30       	cpi	r24, 0x02	; 2
    1eae:	91 05       	cpc	r25, r1
    1eb0:	10 f4       	brcc	.+4      	; 0x1eb6 <malloc+0x12>
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__flp>
    1eba:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__flp+0x1>
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	30 97       	sbiw	r30, 0x00	; 0
    1ec8:	19 f1       	breq	.+70     	; 0x1f10 <malloc+0x6c>
    1eca:	40 81       	ld	r20, Z
    1ecc:	51 81       	ldd	r21, Z+1	; 0x01
    1ece:	02 81       	ldd	r16, Z+2	; 0x02
    1ed0:	13 81       	ldd	r17, Z+3	; 0x03
    1ed2:	48 17       	cp	r20, r24
    1ed4:	59 07       	cpc	r21, r25
    1ed6:	c8 f0       	brcs	.+50     	; 0x1f0a <malloc+0x66>
    1ed8:	84 17       	cp	r24, r20
    1eda:	95 07       	cpc	r25, r21
    1edc:	69 f4       	brne	.+26     	; 0x1ef8 <malloc+0x54>
    1ede:	10 97       	sbiw	r26, 0x00	; 0
    1ee0:	31 f0       	breq	.+12     	; 0x1eee <malloc+0x4a>
    1ee2:	12 96       	adiw	r26, 0x02	; 2
    1ee4:	0c 93       	st	X, r16
    1ee6:	12 97       	sbiw	r26, 0x02	; 2
    1ee8:	13 96       	adiw	r26, 0x03	; 3
    1eea:	1c 93       	st	X, r17
    1eec:	27 c0       	rjmp	.+78     	; 0x1f3c <malloc+0x98>
    1eee:	00 93 0c 01 	sts	0x010C, r16	; 0x80010c <__flp>
    1ef2:	10 93 0d 01 	sts	0x010D, r17	; 0x80010d <__flp+0x1>
    1ef6:	22 c0       	rjmp	.+68     	; 0x1f3c <malloc+0x98>
    1ef8:	21 15       	cp	r18, r1
    1efa:	31 05       	cpc	r19, r1
    1efc:	19 f0       	breq	.+6      	; 0x1f04 <malloc+0x60>
    1efe:	42 17       	cp	r20, r18
    1f00:	53 07       	cpc	r21, r19
    1f02:	18 f4       	brcc	.+6      	; 0x1f0a <malloc+0x66>
    1f04:	9a 01       	movw	r18, r20
    1f06:	bd 01       	movw	r22, r26
    1f08:	ef 01       	movw	r28, r30
    1f0a:	df 01       	movw	r26, r30
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	db cf       	rjmp	.-74     	; 0x1ec6 <malloc+0x22>
    1f10:	21 15       	cp	r18, r1
    1f12:	31 05       	cpc	r19, r1
    1f14:	f9 f0       	breq	.+62     	; 0x1f54 <malloc+0xb0>
    1f16:	28 1b       	sub	r18, r24
    1f18:	39 0b       	sbc	r19, r25
    1f1a:	24 30       	cpi	r18, 0x04	; 4
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	80 f4       	brcc	.+32     	; 0x1f40 <malloc+0x9c>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	61 15       	cp	r22, r1
    1f26:	71 05       	cpc	r23, r1
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <malloc+0x8e>
    1f2a:	fb 01       	movw	r30, r22
    1f2c:	93 83       	std	Z+3, r25	; 0x03
    1f2e:	82 83       	std	Z+2, r24	; 0x02
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <malloc+0x96>
    1f32:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__flp+0x1>
    1f36:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__flp>
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	32 96       	adiw	r30, 0x02	; 2
    1f3e:	44 c0       	rjmp	.+136    	; 0x1fc8 <malloc+0x124>
    1f40:	fe 01       	movw	r30, r28
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	81 93       	st	Z+, r24
    1f48:	91 93       	st	Z+, r25
    1f4a:	22 50       	subi	r18, 0x02	; 2
    1f4c:	31 09       	sbc	r19, r1
    1f4e:	39 83       	std	Y+1, r19	; 0x01
    1f50:	28 83       	st	Y, r18
    1f52:	3a c0       	rjmp	.+116    	; 0x1fc8 <malloc+0x124>
    1f54:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
    1f58:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
    1f5c:	23 2b       	or	r18, r19
    1f5e:	41 f4       	brne	.+16     	; 0x1f70 <malloc+0xcc>
    1f60:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f64:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f68:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <__brkval+0x1>
    1f6c:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <__brkval>
    1f70:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f74:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1f78:	21 15       	cp	r18, r1
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	41 f4       	brne	.+16     	; 0x1f8e <malloc+0xea>
    1f7e:	2d b7       	in	r18, 0x3d	; 61
    1f80:	3e b7       	in	r19, 0x3e	; 62
    1f82:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f86:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f8a:	24 1b       	sub	r18, r20
    1f8c:	35 0b       	sbc	r19, r21
    1f8e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__brkval>
    1f92:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__brkval+0x1>
    1f96:	e2 17       	cp	r30, r18
    1f98:	f3 07       	cpc	r31, r19
    1f9a:	a0 f4       	brcc	.+40     	; 0x1fc4 <malloc+0x120>
    1f9c:	2e 1b       	sub	r18, r30
    1f9e:	3f 0b       	sbc	r19, r31
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	78 f0       	brcs	.+30     	; 0x1fc4 <malloc+0x120>
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	4e 5f       	subi	r20, 0xFE	; 254
    1faa:	5f 4f       	sbci	r21, 0xFF	; 255
    1fac:	24 17       	cp	r18, r20
    1fae:	35 07       	cpc	r19, r21
    1fb0:	48 f0       	brcs	.+18     	; 0x1fc4 <malloc+0x120>
    1fb2:	4e 0f       	add	r20, r30
    1fb4:	5f 1f       	adc	r21, r31
    1fb6:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <__brkval+0x1>
    1fba:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <__brkval>
    1fbe:	81 93       	st	Z+, r24
    1fc0:	91 93       	st	Z+, r25
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <malloc+0x124>
    1fc4:	e0 e0       	ldi	r30, 0x00	; 0
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	cf 01       	movw	r24, r30
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	08 95       	ret

00001fd4 <free>:
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	09 f4       	brne	.+2      	; 0x1fde <free+0xa>
    1fdc:	81 c0       	rjmp	.+258    	; 0x20e0 <free+0x10c>
    1fde:	fc 01       	movw	r30, r24
    1fe0:	32 97       	sbiw	r30, 0x02	; 2
    1fe2:	13 82       	std	Z+3, r1	; 0x03
    1fe4:	12 82       	std	Z+2, r1	; 0x02
    1fe6:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__flp>
    1fea:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__flp+0x1>
    1fee:	10 97       	sbiw	r26, 0x00	; 0
    1ff0:	81 f4       	brne	.+32     	; 0x2012 <free+0x3e>
    1ff2:	20 81       	ld	r18, Z
    1ff4:	31 81       	ldd	r19, Z+1	; 0x01
    1ff6:	82 0f       	add	r24, r18
    1ff8:	93 1f       	adc	r25, r19
    1ffa:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
    1ffe:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
    2002:	28 17       	cp	r18, r24
    2004:	39 07       	cpc	r19, r25
    2006:	51 f5       	brne	.+84     	; 0x205c <free+0x88>
    2008:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <__brkval+0x1>
    200c:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__brkval>
    2010:	67 c0       	rjmp	.+206    	; 0x20e0 <free+0x10c>
    2012:	ed 01       	movw	r28, r26
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	ce 17       	cp	r28, r30
    201a:	df 07       	cpc	r29, r31
    201c:	40 f4       	brcc	.+16     	; 0x202e <free+0x5a>
    201e:	4a 81       	ldd	r20, Y+2	; 0x02
    2020:	5b 81       	ldd	r21, Y+3	; 0x03
    2022:	9e 01       	movw	r18, r28
    2024:	41 15       	cp	r20, r1
    2026:	51 05       	cpc	r21, r1
    2028:	f1 f0       	breq	.+60     	; 0x2066 <free+0x92>
    202a:	ea 01       	movw	r28, r20
    202c:	f5 cf       	rjmp	.-22     	; 0x2018 <free+0x44>
    202e:	d3 83       	std	Z+3, r29	; 0x03
    2030:	c2 83       	std	Z+2, r28	; 0x02
    2032:	40 81       	ld	r20, Z
    2034:	51 81       	ldd	r21, Z+1	; 0x01
    2036:	84 0f       	add	r24, r20
    2038:	95 1f       	adc	r25, r21
    203a:	c8 17       	cp	r28, r24
    203c:	d9 07       	cpc	r29, r25
    203e:	59 f4       	brne	.+22     	; 0x2056 <free+0x82>
    2040:	88 81       	ld	r24, Y
    2042:	99 81       	ldd	r25, Y+1	; 0x01
    2044:	84 0f       	add	r24, r20
    2046:	95 1f       	adc	r25, r21
    2048:	02 96       	adiw	r24, 0x02	; 2
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	9b 81       	ldd	r25, Y+3	; 0x03
    2052:	93 83       	std	Z+3, r25	; 0x03
    2054:	82 83       	std	Z+2, r24	; 0x02
    2056:	21 15       	cp	r18, r1
    2058:	31 05       	cpc	r19, r1
    205a:	29 f4       	brne	.+10     	; 0x2066 <free+0x92>
    205c:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__flp+0x1>
    2060:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__flp>
    2064:	3d c0       	rjmp	.+122    	; 0x20e0 <free+0x10c>
    2066:	e9 01       	movw	r28, r18
    2068:	fb 83       	std	Y+3, r31	; 0x03
    206a:	ea 83       	std	Y+2, r30	; 0x02
    206c:	49 91       	ld	r20, Y+
    206e:	59 91       	ld	r21, Y+
    2070:	c4 0f       	add	r28, r20
    2072:	d5 1f       	adc	r29, r21
    2074:	ec 17       	cp	r30, r28
    2076:	fd 07       	cpc	r31, r29
    2078:	61 f4       	brne	.+24     	; 0x2092 <free+0xbe>
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	84 0f       	add	r24, r20
    2080:	95 1f       	adc	r25, r21
    2082:	02 96       	adiw	r24, 0x02	; 2
    2084:	e9 01       	movw	r28, r18
    2086:	99 83       	std	Y+1, r25	; 0x01
    2088:	88 83       	st	Y, r24
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	9b 83       	std	Y+3, r25	; 0x03
    2090:	8a 83       	std	Y+2, r24	; 0x02
    2092:	e0 e0       	ldi	r30, 0x00	; 0
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	12 96       	adiw	r26, 0x02	; 2
    2098:	8d 91       	ld	r24, X+
    209a:	9c 91       	ld	r25, X
    209c:	13 97       	sbiw	r26, 0x03	; 3
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <free+0xd4>
    20a2:	fd 01       	movw	r30, r26
    20a4:	dc 01       	movw	r26, r24
    20a6:	f7 cf       	rjmp	.-18     	; 0x2096 <free+0xc2>
    20a8:	8d 91       	ld	r24, X+
    20aa:	9c 91       	ld	r25, X
    20ac:	11 97       	sbiw	r26, 0x01	; 1
    20ae:	9d 01       	movw	r18, r26
    20b0:	2e 5f       	subi	r18, 0xFE	; 254
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	82 0f       	add	r24, r18
    20b6:	93 1f       	adc	r25, r19
    20b8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__brkval>
    20bc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__brkval+0x1>
    20c0:	28 17       	cp	r18, r24
    20c2:	39 07       	cpc	r19, r25
    20c4:	69 f4       	brne	.+26     	; 0x20e0 <free+0x10c>
    20c6:	30 97       	sbiw	r30, 0x00	; 0
    20c8:	29 f4       	brne	.+10     	; 0x20d4 <free+0x100>
    20ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__flp+0x1>
    20ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__flp>
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <free+0x104>
    20d4:	13 82       	std	Z+3, r1	; 0x03
    20d6:	12 82       	std	Z+2, r1	; 0x02
    20d8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <__brkval+0x1>
    20dc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <__brkval>
    20e0:	df 91       	pop	r29
    20e2:	cf 91       	pop	r28
    20e4:	08 95       	ret

000020e6 <_exit>:
    20e6:	f8 94       	cli

000020e8 <__stop_program>:
    20e8:	ff cf       	rjmp	.-2      	; 0x20e8 <__stop_program>
