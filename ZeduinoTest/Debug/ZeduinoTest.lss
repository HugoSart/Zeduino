
ZeduinoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
<<<<<<< HEAD
  5 .debug_aranges 00000068  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106e  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000863  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000441  00000000  00000000  00002ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003300  2**0
=======
  5 .debug_aranges 00000068  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf1  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cd  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d2  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000275  00000000  00000000  0000229a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000250f  2**0
>>>>>>> 30e4a19be69aaa668739b4a668c2222fe1d955ac
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e0 e6       	ldi	r30, 0x60	; 96
  8c:	f1 e0       	ldi	r31, 0x01	; 1
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  9e:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12uart_putcharcP6__file>:
#include <util/delay.h>
#include <zeduino/zeduino.hpp>

using namespace zeduino;

void setup() {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <_Z12uart_putcharcP6__file+0xe>
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12uart_putcharcP6__file>
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z12uart_putcharcP6__file+0x12>
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <_Z12uart_getcharP6__file>:
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <_Z12uart_getcharP6__file+0x4>
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <_Z9uart_initv>:
  dc:	e0 e0       	ldi	r30, 0x00	; 0
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	83 e5       	ldi	r24, 0x53	; 83
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 87       	std	Z+9, r25	; 0x09
  e6:	80 87       	std	Z+8, r24	; 0x08
  e8:	85 e6       	ldi	r24, 0x65	; 101
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	93 87       	std	Z+11, r25	; 0x0b
  ee:	82 87       	std	Z+10, r24	; 0x0a
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	83 83       	std	Z+3, r24	; 0x03
  f4:	15 86       	std	Z+13, r1	; 0x0d
  f6:	14 86       	std	Z+12, r1	; 0x0c
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 102:	a0 ec       	ldi	r26, 0xC0	; 192
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	8c 93       	st	X, r24
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 118:	ae e0       	ldi	r26, 0x0E	; 14
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	13 96       	adiw	r26, 0x03	; 3
 11e:	fc 93       	st	X, r31
 120:	ee 93       	st	-X, r30
 122:	12 97       	sbiw	r26, 0x02	; 2
 124:	ed 93       	st	X+, r30
 126:	fc 93       	st	X, r31
 128:	08 95       	ret

0000012a <_Z4loopv>:
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
<<<<<<< HEAD
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
			else if (m == OUTPUT) _SET_BIT(fcrio(port), nmr(port));
 138:	20 9a       	sbi	0x04, 0	; 4

component::Led *led;
component::Button *button;

void setup() {
	led = new component::Led(P8);
 13a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led+0x1>
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led>
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 33 01 	call	0x266	; 0x266 <malloc>
 14a:	fc 01       	movw	r30, r24
		
			private: EPort _input;
			private: bool _alreadyPressed = false;
			private: bool _lastState = false;
		
			public: Button(EPort input) : _input(input) {
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	80 83       	st	Z, r24
 150:	11 82       	std	Z+1, r1	; 0x01
 152:	12 82       	std	Z+2, r1	; 0x02
			P0, P1, P2, P3, P4, P5, P6, P7, // DDRD
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
 154:	21 98       	cbi	0x04, 1	; 4
	button = new component::Button(P9);
 156:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 15a:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
			}
			
			public: inline bool IsOn() { return is_enabled(_port); }
			public: inline void TurnOn() { enable(_port); }
			public: inline void TurnOn(bool b) { enable(_port, b); }
			public: inline void TurnOff() { disable(_port);	}
 15e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <led>
 162:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <led+0x1>
 166:	80 81       	ld	r24, Z
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	78 f4       	brcc	.+30     	; 0x18a <_Z5setupv+0x60>
 16c:	4b b1       	in	r20, 0x0b	; 11
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <_Z5setupv+0x52>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <_Z5setupv+0x4e>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret
 18a:	45 b1       	in	r20, 0x05	; 5
 18c:	87 70       	andi	r24, 0x07	; 7
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <_Z5setupv+0x70>
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <_Z5setupv+0x6c>
 19e:	cf 01       	movw	r24, r30
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	08 95       	ret

000001a8 <_Z4loopv>:
			public: Button(EPort input) : _input(input) {
				mode(input, INPUT);
			}
			
			public: inline bool IsPressed() {
				return !port::read(_input);
 1a8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 1ac:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 1b0:	30 81       	ld	r19, Z
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
		}
		
		inline bool read(EPort port) {
			return _GET_BIT(fcrin(port), nmr(port));
 1b2:	38 30       	cpi	r19, 0x08	; 8
 1b4:	10 f4       	brcc	.+4      	; 0x1ba <_Z4loopv+0x12>
 1b6:	89 b1       	in	r24, 0x09	; 9
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_Z4loopv+0x14>
 1ba:	83 b1       	in	r24, 0x03	; 3
				mode(port, OUTPUT);
			}
			
			public: inline bool IsOn() { return is_enabled(_port); }
			public: inline void TurnOn() { enable(_port); }
			public: inline void TurnOn(bool b) { enable(_port, b); }
 1bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <led>
 1c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <led+0x1>
 1c4:	20 81       	ld	r18, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	37 70       	andi	r19, 0x07	; 7
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <_Z4loopv+0x28>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	3a 95       	dec	r19
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <_Z4loopv+0x24>
 1d4:	80 fd       	sbrc	r24, 0
 1d6:	1a c0       	rjmp	.+52     	; 0x20c <_Z4loopv+0x64>
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	60 f4       	brcc	.+24     	; 0x1f4 <_Z4loopv+0x4c>
 1dc:	3b b1       	in	r19, 0x0b	; 11
 1de:	27 70       	andi	r18, 0x07	; 7
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <_Z4loopv+0x42>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <_Z4loopv+0x3e>
 1ee:	83 2b       	or	r24, r19
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	08 95       	ret
 1f4:	35 b1       	in	r19, 0x05	; 5
 1f6:	27 70       	andi	r18, 0x07	; 7
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <_Z4loopv+0x5a>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <_Z4loopv+0x56>
 206:	83 2b       	or	r24, r19
 208:	85 b9       	out	0x05, r24	; 5
 20a:	08 95       	ret
			else _CLEAR_BIT(fcrof(port), nmr(port));
 20c:	28 30       	cpi	r18, 0x08	; 8
 20e:	68 f4       	brcc	.+26     	; 0x22a <_Z4loopv+0x82>
 210:	3b b1       	in	r19, 0x0b	; 11
 212:	27 70       	andi	r18, 0x07	; 7
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <_Z4loopv+0x76>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <_Z4loopv+0x72>
 222:	80 95       	com	r24
 224:	83 23       	and	r24, r19
 226:	8b b9       	out	0x0b, r24	; 11
 228:	08 95       	ret
 22a:	35 b1       	in	r19, 0x05	; 5
 22c:	27 70       	andi	r18, 0x07	; 7
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <_Z4loopv+0x90>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_Z4loopv+0x8c>
 23c:	80 95       	com	r24
 23e:	83 23       	and	r24, r19
 240:	85 b9       	out	0x05, r24	; 5
 242:	08 95       	ret

00000244 <main>:
=======
			if (m == INPUT) clr_bit(fcrio(port), nmr(port));
			else if (m == OUTPUT) set_bit(fcrio(port), nmr(port));
 12a:	56 9a       	sbi	0x0a, 6	; 10
			#ifdef ZEDUINO_AUTO
			mode(port, OUTPUT);
			#endif
			
			if(port == P6){
				set_bit(TCCR0A, WGM01); // Ativa o modo CTC
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	84 bd       	out	0x24, r24	; 36
				set_bit(TCCR0A, COM0A0); // Configura o modo CTC = OCR0A
 132:	84 b5       	in	r24, 0x24	; 36
 134:	80 64       	ori	r24, 0x40	; 64
 136:	84 bd       	out	0x24, r24	; 36
				OCR0A = (F_CPU/(2*freq))-1;
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	87 bd       	out	0x27, r24	; 39
 13c:	08 95       	ret

0000013e <main>:
>>>>>>> 30e4a19be69aaa668739b4a668c2222fe1d955ac
void loop();

extern "C" {
	int main() {
		
		DDRB  = 0b00000000;
 13e:	14 b8       	out	0x04, r1	; 4
		DDRD  = 0b00000000;
 140:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0b11111111;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b11111111;
 146:	8b b9       	out	0x0b, r24	; 11
		
		uart_init();
 148:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9uart_initv>
		enum EPrescaler {
			PS0 = CS00, PS1 = CS01, PS2 = CS02
		};
		
		inline void prescaler(EPrescaler p) {
<<<<<<< HEAD
			_SET_BIT(TCCR1B, p);
 252:	e1 e8       	ldi	r30, 0x81	; 129
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	80 83       	st	Z, r24
=======
			set_bit(TCCR1B, p);
 14c:	e1 e8       	ldi	r30, 0x81	; 129
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 83       	st	Z, r24
>>>>>>> 30e4a19be69aaa668739b4a668c2222fe1d955ac
		zeduino::clock::prescaler(zeduino::clock::PS1);
		setup();
		while (true) loop();
 156:	0e 94 95 00 	call	0x12a	; 0x12a <_Z4loopv>
 15a:	fd cf       	rjmp	.-6      	; 0x156 <main+0x18>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
