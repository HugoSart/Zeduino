
ZeduinoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800106  00800106  00000546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106e  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  0000168e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052f  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00002590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000863  00000000  00000000  0000265c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000441  00000000  00000000  00002ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a6 e0       	ldi	r26, 0x06	; 6
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 32       	cpi	r26, 0x22	; 34
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ec ea       	ldi	r30, 0xAC	; 172
  8c:	f4 e0       	ldi	r31, 0x04	; 4
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>
  9a:	0e 94 22 01 	call	0x244	; 0x244 <main>
  9e:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z12uart_putcharcP6__file>:
		void log(const char *format, ...) {
			va_list args;
			va_start(args, format);
			printf(format, args);
			va_end(args);
		}
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <_Z12uart_putcharcP6__file+0xe>
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z12uart_putcharcP6__file>
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <_Z12uart_putcharcP6__file+0x12>
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <_Z12uart_getcharP6__file>:
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <_Z12uart_getcharP6__file+0x4>
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <_Z9uart_initv>:
  dc:	ea e0       	ldi	r30, 0x0A	; 10
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	83 e5       	ldi	r24, 0x53	; 83
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	91 87       	std	Z+9, r25	; 0x09
  e6:	80 87       	std	Z+8, r24	; 0x08
  e8:	85 e6       	ldi	r24, 0x65	; 101
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	93 87       	std	Z+11, r25	; 0x0b
  ee:	82 87       	std	Z+10, r24	; 0x0a
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	83 83       	std	Z+3, r24	; 0x03
  f4:	15 86       	std	Z+13, r1	; 0x0d
  f6:	14 86       	std	Z+12, r1	; 0x0c
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 102:	a0 ec       	ldi	r26, 0xC0	; 192
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	8c 91       	ld	r24, X
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	8c 93       	st	X, r24
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 112:	88 e1       	ldi	r24, 0x18	; 24
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 118:	ac e1       	ldi	r26, 0x1C	; 28
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	13 96       	adiw	r26, 0x03	; 3
 11e:	fc 93       	st	X, r31
 120:	ee 93       	st	-X, r30
 122:	12 97       	sbiw	r26, 0x02	; 2
 124:	ed 93       	st	X+, r30
 126:	fc 93       	st	X, r31
 128:	08 95       	ret

0000012a <_Z5setupv>:
typedef int16_t int16;
typedef uint8_t uint8;
typedef uint16_t uint16;

void * operator new(size_t size) {
	return malloc(size);	
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 33 01 	call	0x266	; 0x266 <malloc>
		
		class Led : public Component {
			
			private: const EPort _port;
			
			public: Led(EPort port) : _port(port) {
 132:	28 e0       	ldi	r18, 0x08	; 8
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
			else if (m == OUTPUT) _SET_BIT(fcrio(port), nmr(port));
 138:	20 9a       	sbi	0x04, 0	; 4

component::Led *led;
component::Button *button;

void setup() {
	led = new component::Led(P8);
 13a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <led+0x1>
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <led>
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 33 01 	call	0x266	; 0x266 <malloc>
 14a:	fc 01       	movw	r30, r24
		
			private: EPort _input;
			private: bool _alreadyPressed = false;
			private: bool _lastState = false;
		
			public: Button(EPort input) : _input(input) {
 14c:	89 e0       	ldi	r24, 0x09	; 9
 14e:	80 83       	st	Z, r24
 150:	11 82       	std	Z+1, r1	; 0x01
 152:	12 82       	std	Z+2, r1	; 0x02
			P0, P1, P2, P3, P4, P5, P6, P7, // DDRD
			P8, P9, P10, P11, P12, P13 // DDRB
		};
		
		void mode(EPort port, EMode m) {
			if (m == INPUT) _CLEAR_BIT(fcrio(port), nmr(port));
 154:	21 98       	cbi	0x04, 1	; 4
	button = new component::Button(P9);
 156:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <__data_end+0x1>
 15a:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <__data_end>
			}
			
			public: inline bool IsOn() { return is_enabled(_port); }
			public: inline void TurnOn() { enable(_port); }
			public: inline void TurnOn(bool b) { enable(_port, b); }
			public: inline void TurnOff() { disable(_port);	}
 15e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <led>
 162:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <led+0x1>
 166:	80 81       	ld	r24, Z
			if (b) _SET_BIT(fcrof(port), nmr(port));
			else _CLEAR_BIT(fcrof(port), nmr(port));
		}
		
		inline void disable(EPort port) {
			_CLEAR_BIT(fcrof(port), nmr(port));
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	78 f4       	brcc	.+30     	; 0x18a <_Z5setupv+0x60>
 16c:	4b b1       	in	r20, 0x0b	; 11
 16e:	87 70       	andi	r24, 0x07	; 7
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <_Z5setupv+0x52>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	8a 95       	dec	r24
 17e:	e2 f7       	brpl	.-8      	; 0x178 <_Z5setupv+0x4e>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	8b b9       	out	0x0b, r24	; 11
 188:	08 95       	ret
 18a:	45 b1       	in	r20, 0x05	; 5
 18c:	87 70       	andi	r24, 0x07	; 7
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <_Z5setupv+0x70>
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <_Z5setupv+0x6c>
 19e:	cf 01       	movw	r24, r30
 1a0:	80 95       	com	r24
 1a2:	84 23       	and	r24, r20
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	08 95       	ret

000001a8 <_Z4loopv>:
			public: Button(EPort input) : _input(input) {
				mode(input, INPUT);
			}
			
			public: inline bool IsPressed() {
				return !port::read(_input);
 1a8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 1ac:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
 1b0:	30 81       	ld	r19, Z
		inline bool is_enabled(EPort port) {
			return _GET_BIT(fcrof(port), nmr(port));
		}
		
		inline bool read(EPort port) {
			return _GET_BIT(fcrin(port), nmr(port));
 1b2:	38 30       	cpi	r19, 0x08	; 8
 1b4:	10 f4       	brcc	.+4      	; 0x1ba <_Z4loopv+0x12>
 1b6:	89 b1       	in	r24, 0x09	; 9
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_Z4loopv+0x14>
 1ba:	83 b1       	in	r24, 0x03	; 3
				mode(port, OUTPUT);
			}
			
			public: inline bool IsOn() { return is_enabled(_port); }
			public: inline void TurnOn() { enable(_port); }
			public: inline void TurnOn(bool b) { enable(_port, b); }
 1bc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <led>
 1c0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <led+0x1>
 1c4:	20 81       	ld	r18, Z
		inline void enable(EPort port) {
			_SET_BIT(fcrof(port), nmr(port));
		}
		
		inline void enable(EPort port, bool b) {
			if (b) _SET_BIT(fcrof(port), nmr(port));
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	37 70       	andi	r19, 0x07	; 7
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <_Z4loopv+0x28>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	3a 95       	dec	r19
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <_Z4loopv+0x24>
 1d4:	80 fd       	sbrc	r24, 0
 1d6:	1a c0       	rjmp	.+52     	; 0x20c <_Z4loopv+0x64>
 1d8:	28 30       	cpi	r18, 0x08	; 8
 1da:	60 f4       	brcc	.+24     	; 0x1f4 <_Z4loopv+0x4c>
 1dc:	3b b1       	in	r19, 0x0b	; 11
 1de:	27 70       	andi	r18, 0x07	; 7
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <_Z4loopv+0x42>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <_Z4loopv+0x3e>
 1ee:	83 2b       	or	r24, r19
 1f0:	8b b9       	out	0x0b, r24	; 11
 1f2:	08 95       	ret
 1f4:	35 b1       	in	r19, 0x05	; 5
 1f6:	27 70       	andi	r18, 0x07	; 7
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <_Z4loopv+0x5a>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <_Z4loopv+0x56>
 206:	83 2b       	or	r24, r19
 208:	85 b9       	out	0x05, r24	; 5
 20a:	08 95       	ret
			else _CLEAR_BIT(fcrof(port), nmr(port));
 20c:	28 30       	cpi	r18, 0x08	; 8
 20e:	68 f4       	brcc	.+26     	; 0x22a <_Z4loopv+0x82>
 210:	3b b1       	in	r19, 0x0b	; 11
 212:	27 70       	andi	r18, 0x07	; 7
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <_Z4loopv+0x76>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <_Z4loopv+0x72>
 222:	80 95       	com	r24
 224:	83 23       	and	r24, r19
 226:	8b b9       	out	0x0b, r24	; 11
 228:	08 95       	ret
 22a:	35 b1       	in	r19, 0x05	; 5
 22c:	27 70       	andi	r18, 0x07	; 7
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <_Z4loopv+0x90>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <_Z4loopv+0x8c>
 23c:	80 95       	com	r24
 23e:	83 23       	and	r24, r19
 240:	85 b9       	out	0x05, r24	; 5
 242:	08 95       	ret

00000244 <main>:
void loop();

extern "C" {
	int main() {
		
		DDRB  = 0b00000000;
 244:	14 b8       	out	0x04, r1	; 4
		DDRD  = 0b00000000;
 246:	1a b8       	out	0x0a, r1	; 10
		PORTB = 0b11111111;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	85 b9       	out	0x05, r24	; 5
		PORTD = 0b11111111;
 24c:	8b b9       	out	0x0b, r24	; 11
		
		uart_init();
 24e:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9uart_initv>
		enum EPrescaler {
			PS0 = CS00, PS1 = CS01, PS2 = CS02
		};
		
		inline void prescaler(EPrescaler p) {
			_SET_BIT(TCCR1B, p);
 252:	e1 e8       	ldi	r30, 0x81	; 129
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	80 83       	st	Z, r24
		zeduino::clock::prescaler(zeduino::clock::PS1);
		setup();
 25c:	0e 94 95 00 	call	0x12a	; 0x12a <_Z5setupv>
		while (true) loop();
 260:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z4loopv>
 264:	fd cf       	rjmp	.-6      	; 0x260 <main+0x1c>

00000266 <malloc>:
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	91 05       	cpc	r25, r1
 272:	10 f4       	brcc	.+4      	; 0x278 <malloc+0x12>
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__flp>
 27c:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__flp+0x1>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	30 97       	sbiw	r30, 0x00	; 0
 28a:	19 f1       	breq	.+70     	; 0x2d2 <malloc+0x6c>
 28c:	40 81       	ld	r20, Z
 28e:	51 81       	ldd	r21, Z+1	; 0x01
 290:	02 81       	ldd	r16, Z+2	; 0x02
 292:	13 81       	ldd	r17, Z+3	; 0x03
 294:	48 17       	cp	r20, r24
 296:	59 07       	cpc	r21, r25
 298:	c8 f0       	brcs	.+50     	; 0x2cc <malloc+0x66>
 29a:	84 17       	cp	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	69 f4       	brne	.+26     	; 0x2ba <malloc+0x54>
 2a0:	10 97       	sbiw	r26, 0x00	; 0
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <malloc+0x4a>
 2a4:	12 96       	adiw	r26, 0x02	; 2
 2a6:	0c 93       	st	X, r16
 2a8:	12 97       	sbiw	r26, 0x02	; 2
 2aa:	13 96       	adiw	r26, 0x03	; 3
 2ac:	1c 93       	st	X, r17
 2ae:	27 c0       	rjmp	.+78     	; 0x2fe <malloc+0x98>
 2b0:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <__flp>
 2b4:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <__flp+0x1>
 2b8:	22 c0       	rjmp	.+68     	; 0x2fe <malloc+0x98>
 2ba:	21 15       	cp	r18, r1
 2bc:	31 05       	cpc	r19, r1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <malloc+0x60>
 2c0:	42 17       	cp	r20, r18
 2c2:	53 07       	cpc	r21, r19
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <malloc+0x66>
 2c6:	9a 01       	movw	r18, r20
 2c8:	bd 01       	movw	r22, r26
 2ca:	ef 01       	movw	r28, r30
 2cc:	df 01       	movw	r26, r30
 2ce:	f8 01       	movw	r30, r16
 2d0:	db cf       	rjmp	.-74     	; 0x288 <malloc+0x22>
 2d2:	21 15       	cp	r18, r1
 2d4:	31 05       	cpc	r19, r1
 2d6:	f9 f0       	breq	.+62     	; 0x316 <malloc+0xb0>
 2d8:	28 1b       	sub	r18, r24
 2da:	39 0b       	sbc	r19, r25
 2dc:	24 30       	cpi	r18, 0x04	; 4
 2de:	31 05       	cpc	r19, r1
 2e0:	80 f4       	brcc	.+32     	; 0x302 <malloc+0x9c>
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	9b 81       	ldd	r25, Y+3	; 0x03
 2e6:	61 15       	cp	r22, r1
 2e8:	71 05       	cpc	r23, r1
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <malloc+0x8e>
 2ec:	fb 01       	movw	r30, r22
 2ee:	93 83       	std	Z+3, r25	; 0x03
 2f0:	82 83       	std	Z+2, r24	; 0x02
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <malloc+0x96>
 2f4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__flp+0x1>
 2f8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__flp>
 2fc:	fe 01       	movw	r30, r28
 2fe:	32 96       	adiw	r30, 0x02	; 2
 300:	44 c0       	rjmp	.+136    	; 0x38a <malloc+0x124>
 302:	fe 01       	movw	r30, r28
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	81 93       	st	Z+, r24
 30a:	91 93       	st	Z+, r25
 30c:	22 50       	subi	r18, 0x02	; 2
 30e:	31 09       	sbc	r19, r1
 310:	39 83       	std	Y+1, r19	; 0x01
 312:	28 83       	st	Y, r18
 314:	3a c0       	rjmp	.+116    	; 0x38a <malloc+0x124>
 316:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 31a:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 31e:	23 2b       	or	r18, r19
 320:	41 f4       	brne	.+16     	; 0x332 <malloc+0xcc>
 322:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 326:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 32a:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__brkval+0x1>
 32e:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__brkval>
 332:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 336:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 33a:	21 15       	cp	r18, r1
 33c:	31 05       	cpc	r19, r1
 33e:	41 f4       	brne	.+16     	; 0x350 <malloc+0xea>
 340:	2d b7       	in	r18, 0x3d	; 61
 342:	3e b7       	in	r19, 0x3e	; 62
 344:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 348:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 34c:	24 1b       	sub	r18, r20
 34e:	35 0b       	sbc	r19, r21
 350:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__brkval>
 354:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__brkval+0x1>
 358:	e2 17       	cp	r30, r18
 35a:	f3 07       	cpc	r31, r19
 35c:	a0 f4       	brcc	.+40     	; 0x386 <malloc+0x120>
 35e:	2e 1b       	sub	r18, r30
 360:	3f 0b       	sbc	r19, r31
 362:	28 17       	cp	r18, r24
 364:	39 07       	cpc	r19, r25
 366:	78 f0       	brcs	.+30     	; 0x386 <malloc+0x120>
 368:	ac 01       	movw	r20, r24
 36a:	4e 5f       	subi	r20, 0xFE	; 254
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	24 17       	cp	r18, r20
 370:	35 07       	cpc	r19, r21
 372:	48 f0       	brcs	.+18     	; 0x386 <malloc+0x120>
 374:	4e 0f       	add	r20, r30
 376:	5f 1f       	adc	r21, r31
 378:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__brkval+0x1>
 37c:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__brkval>
 380:	81 93       	st	Z+, r24
 382:	91 93       	st	Z+, r25
 384:	02 c0       	rjmp	.+4      	; 0x38a <malloc+0x124>
 386:	e0 e0       	ldi	r30, 0x00	; 0
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	cf 01       	movw	r24, r30
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	08 95       	ret

00000396 <free>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	09 f4       	brne	.+2      	; 0x3a0 <free+0xa>
 39e:	81 c0       	rjmp	.+258    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3a0:	fc 01       	movw	r30, r24
 3a2:	32 97       	sbiw	r30, 0x02	; 2
 3a4:	13 82       	std	Z+3, r1	; 0x03
 3a6:	12 82       	std	Z+2, r1	; 0x02
 3a8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__flp>
 3ac:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__flp+0x1>
 3b0:	10 97       	sbiw	r26, 0x00	; 0
 3b2:	81 f4       	brne	.+32     	; 0x3d4 <free+0x3e>
 3b4:	20 81       	ld	r18, Z
 3b6:	31 81       	ldd	r19, Z+1	; 0x01
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 3c0:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	51 f5       	brne	.+84     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ca:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__brkval+0x1>
 3ce:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__brkval>
 3d2:	67 c0       	rjmp	.+206    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 3d4:	ed 01       	movw	r28, r26
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	ce 17       	cp	r28, r30
 3dc:	df 07       	cpc	r29, r31
 3de:	40 f4       	brcc	.+16     	; 0x3f0 <free+0x5a>
 3e0:	4a 81       	ldd	r20, Y+2	; 0x02
 3e2:	5b 81       	ldd	r21, Y+3	; 0x03
 3e4:	9e 01       	movw	r18, r28
 3e6:	41 15       	cp	r20, r1
 3e8:	51 05       	cpc	r21, r1
 3ea:	f1 f0       	breq	.+60     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 3ec:	ea 01       	movw	r28, r20
 3ee:	f5 cf       	rjmp	.-22     	; 0x3da <free+0x44>
 3f0:	d3 83       	std	Z+3, r29	; 0x03
 3f2:	c2 83       	std	Z+2, r28	; 0x02
 3f4:	40 81       	ld	r20, Z
 3f6:	51 81       	ldd	r21, Z+1	; 0x01
 3f8:	84 0f       	add	r24, r20
 3fa:	95 1f       	adc	r25, r21
 3fc:	c8 17       	cp	r28, r24
 3fe:	d9 07       	cpc	r29, r25
 400:	59 f4       	brne	.+22     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 402:	88 81       	ld	r24, Y
 404:	99 81       	ldd	r25, Y+1	; 0x01
 406:	84 0f       	add	r24, r20
 408:	95 1f       	adc	r25, r21
 40a:	02 96       	adiw	r24, 0x02	; 2
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	80 83       	st	Z, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	9b 81       	ldd	r25, Y+3	; 0x03
 414:	93 83       	std	Z+3, r25	; 0x03
 416:	82 83       	std	Z+2, r24	; 0x02
 418:	21 15       	cp	r18, r1
 41a:	31 05       	cpc	r19, r1
 41c:	29 f4       	brne	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41e:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__flp+0x1>
 422:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__flp>
 426:	3d c0       	rjmp	.+122    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 428:	e9 01       	movw	r28, r18
 42a:	fb 83       	std	Y+3, r31	; 0x03
 42c:	ea 83       	std	Y+2, r30	; 0x02
 42e:	49 91       	ld	r20, Y+
 430:	59 91       	ld	r21, Y+
 432:	c4 0f       	add	r28, r20
 434:	d5 1f       	adc	r29, r21
 436:	ec 17       	cp	r30, r28
 438:	fd 07       	cpc	r31, r29
 43a:	61 f4       	brne	.+24     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 43c:	80 81       	ld	r24, Z
 43e:	91 81       	ldd	r25, Z+1	; 0x01
 440:	84 0f       	add	r24, r20
 442:	95 1f       	adc	r25, r21
 444:	02 96       	adiw	r24, 0x02	; 2
 446:	e9 01       	movw	r28, r18
 448:	99 83       	std	Y+1, r25	; 0x01
 44a:	88 83       	st	Y, r24
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	93 81       	ldd	r25, Z+3	; 0x03
 450:	9b 83       	std	Y+3, r25	; 0x03
 452:	8a 83       	std	Y+2, r24	; 0x02
 454:	e0 e0       	ldi	r30, 0x00	; 0
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	12 96       	adiw	r26, 0x02	; 2
 45a:	8d 91       	ld	r24, X+
 45c:	9c 91       	ld	r25, X
 45e:	13 97       	sbiw	r26, 0x03	; 3
 460:	00 97       	sbiw	r24, 0x00	; 0
 462:	19 f0       	breq	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 464:	fd 01       	movw	r30, r26
 466:	dc 01       	movw	r26, r24
 468:	f7 cf       	rjmp	.-18     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 46a:	8d 91       	ld	r24, X+
 46c:	9c 91       	ld	r25, X
 46e:	11 97       	sbiw	r26, 0x01	; 1
 470:	9d 01       	movw	r18, r26
 472:	2e 5f       	subi	r18, 0xFE	; 254
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 47e:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 482:	28 17       	cp	r18, r24
 484:	39 07       	cpc	r19, r25
 486:	69 f4       	brne	.+26     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 488:	30 97       	sbiw	r30, 0x00	; 0
 48a:	29 f4       	brne	.+10     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 48c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp+0x1>
 490:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp>
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 496:	13 82       	std	Z+3, r1	; 0x03
 498:	12 82       	std	Z+2, r1	; 0x02
 49a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__brkval+0x1>
 49e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__brkval>
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
